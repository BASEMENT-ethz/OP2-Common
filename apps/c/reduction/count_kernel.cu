//
// auto-generated by op2.m on 09-Jul-2012 15:36:25
//

// user function

__device__
#include "count.h"


// CUDA kernel function

__global__ void op_cuda_count(
  int *arg0,
  int   offset_s,
  int   set_size ) {

  int arg0_l[1];
  for (int d=0; d<1; d++) arg0_l[d]=ZERO_int;

  // process set elements

  for (int n=threadIdx.x+blockIdx.x*blockDim.x;
       n<set_size; n+=blockDim.x*gridDim.x) {

    // user-supplied kernel call


    count(  arg0_l );
  }

  // global reductions

  for(int d=0; d<1; d++)
    op_reduction<OP_INC>(&arg0[d+blockIdx.x*1],arg0_l[d]);
}


// host stub function

void op_par_loop_count(char const *name, op_set set,
  op_arg arg0 ){

  int *arg0h = (int *)arg0.data;

  int    nargs   = 1;
  op_arg args[1];

  args[0] = arg0;

  if (OP_diags>2) {
    printf(" kernel routine w/o indirection:  count\n");
  }

  op_mpi_halo_exchanges(set, nargs, args);

  // initialise timers

  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timers_core(&cpu_t1, &wall_t1);

  if (set->size >0) {


    // set CUDA execution parameters

    #ifdef OP_BLOCK_SIZE_0
      int nthread = OP_BLOCK_SIZE_0;
    #else
      // int nthread = OP_block_size;
      int nthread = 128;
    #endif

    int nblocks = 200;

    // transfer global reduction data to GPU

    int maxblocks = nblocks;

    int reduct_bytes = 0;
    int reduct_size  = 0;
    reduct_bytes += ROUND_UP(maxblocks*1*sizeof(int));
    reduct_size   = MAX(reduct_size,sizeof(int));

    reallocReductArrays(reduct_bytes);

    reduct_bytes = 0;
    arg0.data   = OP_reduct_h + reduct_bytes;
    arg0.data_d = OP_reduct_d + reduct_bytes;
    for (int b=0; b<maxblocks; b++)
      for (int d=0; d<1; d++)
        ((int *)arg0.data)[d+b*1] = ZERO_int;
    reduct_bytes += ROUND_UP(maxblocks*1*sizeof(int));

    mvReductArraysToDevice(reduct_bytes);

    // work out shared memory requirements per element

    int nshared = 0;

    // execute plan

    int offset_s = nshared*OP_WARPSIZE;

    nshared = MAX(nshared*nthread,reduct_size*nthread);

    op_cuda_count<<<nblocks,nthread,nshared>>>( (int *) arg0.data_d,
                                                offset_s,
                                                set->size );

    cutilSafeCall(cudaThreadSynchronize());
    cutilCheckMsg("op_cuda_count execution failed\n");

    // transfer global reduction data back to CPU

    mvReductArraysToHost(reduct_bytes);

    for (int b=0; b<maxblocks; b++)
      for (int d=0; d<1; d++)
        arg0h[d] = arg0h[d] + ((int *)arg0.data)[d+b*1];

  arg0.data = (char *)arg0h;

  op_mpi_reduce(&arg0,arg0h);

  }


  op_mpi_set_dirtybit(nargs, args);

  // update kernel record

  op_timers_core(&cpu_t2, &wall_t2);
  op_timing_realloc(0);
  OP_kernels[0].name      = name;
  OP_kernels[0].count    += 1;
  OP_kernels[0].time     += wall_t2 - wall_t1;
}
