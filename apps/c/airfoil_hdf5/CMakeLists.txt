# Open source copyright declaration based on BSD open source template:
# http://www.opensource.org/licenses/bsd-license.php
#
# This file is part of the OP2 distribution.
#
# Copyright (c) 2011, Florian Rathgeber and others. Please see the AUTHORS
# file in the main source directory for a full list of copyright holders.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * The name of Florian Rathgeber may not be used to endorse or promote
#       products derived from this software without specific prior written
#       permission.
#
# THIS SOFTWARE IS PROVIDED BY Florian Rathgeber ''AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL Florian Rathgeber BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

project(OP2-Airfoil-HDF5-DP)

# Require CMake 2.8
cmake_minimum_required(VERSION 2.8)

include(../airfoil-common.cmake)

# All these require HDF5
if (TARGET op2_hdf5 AND OP2_BUILD_DP)

  set(KERNEL_HEADERS dp/save_soln.h dp/adt_calc.h dp/res_calc.h dp/bres_calc.h)
  # simple sequential version
  if (TARGET op2_seq)
    add_executable(airfoil_hdf5_dp_seq dp/airfoil.cpp)
    target_link_libraries(airfoil_hdf5_dp_seq op2_seq op2_hdf5)
    install(TARGETS airfoil_hdf5_dp_seq RUNTIME DESTINATION ${OP2_APPS_DIR} COMPONENT RuntimeExecutables)
  endif()

  # x86 version using kernel files generated by op2.m
  if (TARGET op2_openmp)
    add_executable(airfoil_hdf5_dp_openmp dp/airfoil_op.cpp dp/airfoil_kernels.cpp
      ${KERNEL_HEADERS})
    target_link_libraries(airfoil_hdf5_dp_openmp op2_openmp op2_hdf5)
    set_target_properties(airfoil_hdf5_dp_openmp PROPERTIES COMPILE_FLAGS
      "${OpenMP_CXX_FLAGS}" LINK_FLAGS "${OpenMP_CXX_FLAGS}")
    install(TARGETS airfoil_hdf5_dp_openmp RUNTIME DESTINATION ${OP2_APPS_DIR} COMPONENT RuntimeExecutables)
  endif()

  # CUDA version using kernel files generated by op2.m
  if (TARGET op2_cuda)
    find_package(CUDA)
    if (CUDA_FOUND)
      cuda_add_executable(airfoil_hdf5_dp_cuda dp/airfoil_op.cpp dp/airfoil_kernels.cu
        ${KERNEL_HEADERS})
      target_link_libraries(airfoil_hdf5_dp_cuda op2_cuda op2_hdf5)
      install(TARGETS airfoil_hdf5_dp_cuda RUNTIME DESTINATION ${OP2_APPS_DIR} COMPONENT RuntimeExecutables)
    endif()
  endif()

  # MPI with sequential-nodes version
  if (TARGET op2_mpi)
    add_definitions(${OP2_MPI_DEFINITIONS})
    include_directories(${OP2_MPI_INCLUDE_DIRS})
    add_executable(convert_mesh dp/convert_mesh.cpp)
    target_link_libraries(convert_mesh op2_mpi)

    # Generate the H5 input grid, given the regular input grid has been generated
    if(TARGET grid OR EXISTS ${AIRFOIL_MESH_FILE})
      option(AIRFOIL_HDF5_GENERATE_MESH "Generate HDF5 meshes during the build process." ON)
      if(AIRFOIL_HDF5_GENERATE_MESH)
        # Convert the grid to H5
        set(AIRFOIL_MESH_FILE_H5 ${CMAKE_BINARY_DIR}/new_grid_out.h5)
        # Custom command to generate the grid
        add_custom_command(OUTPUT ${AIRFOIL_MESH_FILE_H5}
          COMMAND convert_mesh
          DEPENDS convert_mesh ${AIRFOIL_MESH_FILE}
          WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
          COMMENT "Converting the input grid to H5 ${AIRFOIL_MESH_FILE_H5}...")

        # Repack/compress the grid
        option(AIRFOIL_HDF5_REPACK_MESH "Repack HDF5 meshes during the build process." ON)
        if(AIRFOIL_HDF5_REPACK_MESH)
          find_program(HDF5_H5REPACK h5repack hints ${HDF5_ROOT} ENV HDF5_ROOT)
          if(NOT HDF5_H5REPACK)
            message(STATUS "Could not find h5repack. Set HDF5_ROOT to the folder containing the executable.

Repacking/compression of the H5 input mesh is skipped. Compress it manually by running:
  h5repack -f GZIP=9 ${AIRFOIL_MESH_FILE_H5} ${AIRFOIL_MESH_FILE_H5_REPACK}")
            install(FILES ${AIRFOIL_MESH_FILE_H5} DESTINATION ${OP2_APPS_DIR}
              COMPONENT RuntimeInputFiles RENAME new_grid.h5)
            set(MESH ${AIRFOIL_MESH_FILE_H5})
          else()
            set(AIRFOIL_MESH_FILE_H5_REPACK ${CMAKE_BINARY_DIR}/new_grid.h5)
            # Custom command to repack the grid
            add_custom_command(OUTPUT ${AIRFOIL_MESH_FILE_H5_REPACK}
              COMMAND ${HDF5_H5REPACK} -f GZIP=9 ${AIRFOIL_MESH_FILE_H5} ${AIRFOIL_MESH_FILE_H5_REPACK}
              DEPENDS ${AIRFOIL_MESH_FILE_H5}
              WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
              COMMENT "Repacking the H5 input grid H5 ${AIRFOIL_MESH_FILE_H5_REPACK}...")
            install(FILES ${AIRFOIL_MESH_FILE_H5_REPACK} DESTINATION ${OP2_APPS_DIR}
              COMPONENT RuntimeInputFiles)
            set(MESH ${AIRFOIL_MESH_FILE_H5_REPACK})
          endif()
        endif()
      endif()
    endif()

    # Build HDF5 exectuable
    add_executable(airfoil_hdf5_dp_mpi dp/airfoil_mpi.cpp ${KERNEL_HEADERS} ${MESH})
    target_link_libraries(airfoil_hdf5_dp_mpi op2_mpi)
    install(TARGETS airfoil_hdf5_dp_mpi convert_mesh RUNTIME
      DESTINATION ${OP2_APPS_DIR} COMPONENT RuntimeExecutables)
  endif()

endif()
