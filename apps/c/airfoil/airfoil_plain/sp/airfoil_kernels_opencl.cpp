//
// auto-generated by op2.m on 16-May-2012 17:25:24
//

// header

#include "op_lib_cpp.h"
#include "stdlib.h"
#include "stdio.h"

#include "op_opencl_core.h"
#include "op_opencl_rt_support.h"
#include "op_opencl_reduction.h"

extern op_opencl_core OP_opencl_core;

#define MAX_SOURCE_SIZE (0x10000)


// global constants

//extern float gam;
//extern float gm1;
//extern float cfl;
//extern float eps;
//extern float mach;
//extern float alpha;
//extern float qinf[4];

//void
//op_decl_const_char ( int dim, char const * type, int size, char * dat,
//                     char const * name )
//{
//#warning "const_d is not kept track of, therefore it will not be freed up!"
//  // Add constant to constant array
////  cl_mem const_tmp[OP_opencl_core.n_constants+1];
//  cl_mem *const_tmp;
//  const_tmp = (cl_mem*) malloc((OP_opencl_core.n_constants+1)*sizeof(cl_mem));
//  for(int i=0; i<OP_opencl_core.n_constants; i++)
//    const_tmp[i] = (*OP_opencl_core.constant)[i];
//
//  cl_int ret = 0;
//  cl_mem const_d;
////  const_d = clCreateBuffer(OP_opencl_core.context, CL_MEM_READ_ONLY, dim*size, NULL, &ret);
//
//  const_tmp[OP_opencl_core.n_constants] = clCreateBuffer(OP_opencl_core.context, CL_MEM_READ_ONLY, dim*size, NULL, &ret);
//  OP_opencl_core.n_constants++;
//  clSafeCall( ret );
//  *(OP_opencl_core.constant) = (cl_mem*) const_tmp;
//
////  OP_opencl_core.n_constants++;
////  const_tmp[OP_opencl_core.n_constants] = const_d;
//
//  clSafeCall( clEnqueueWriteBuffer(OP_opencl_core.command_queue, (*OP_opencl_core.constant)[OP_opencl_core.n_constants], CL_TRUE, 0, dim*size, (void*) dat, 0, NULL, NULL) );
//  clSafeCall( clFlush(OP_opencl_core.command_queue) );
//  clSafeCall( clFinish(OP_opencl_core.command_queue) );
//
//
//
////  free(OP_opencl_core.constant);
//
//
////  cutilSafeCall ( cudaMemcpyToSymbol ( name, dat, dim * size, 0,
////                                       cudaMemcpyHostToDevice ) );
//}

// host stub function

// user kernel files

void buildOpenCLKernels() {
  static bool isbuilt = false;

  if(!isbuilt) {
    clSafeCall( clUnloadCompiler() );

    OP_opencl_core.n_kernels = 5;
    OP_opencl_core.kernel = (cl_kernel*) malloc(5*sizeof(cl_kernel));

    cl_int ret;
    char* source_filename[5] = {
        "save_soln_kernel.cl",
        "adt_calc_kernel.cl",
        "res_calc_kernel.cl",
        "bres_calc_kernel.cl",
        "update_kernel.cl"
    };

    // Load the kernel source code into the array source_str
    FILE *fid;
    char *source_str[5];
    size_t source_size[5];

    for(int i=0; i<5; i++) {
      fid = fopen(source_filename[i], "r");
      if (!fid) {
        fprintf(stderr, "Can't open the kernel source file!\n");
        exit(1);
      }

      source_str[i] = (char*)malloc(MAX_SOURCE_SIZE);
      source_size[i] = fread(source_str[i], 1, MAX_SOURCE_SIZE, fid);
      if(source_size[i] != MAX_SOURCE_SIZE) {
        if (ferror(fid)) {
          printf ("Error while reading kernel source file %s\n", source_filename[i]);
          exit(-1);
        }
        if (feof(fid))
          printf ("Kernel source file %s succesfuly read.\n", source_filename[i]);
      }
      fclose(fid);
    }

//      printf(" compiling source: %s\n", source_filename[i]);
    printf(" compiling sources \n");

      // Create a program from the source
      OP_opencl_core.program = clCreateProgramWithSource(OP_opencl_core.context, 5, (const char **) &source_str, (const size_t *) &source_size, &ret);
      clSafeCall( ret );

      // Build the program
      char buildOpts[255];
      sprintf(buildOpts,"-cl-std=CL1.1 -cl-mad-enable -DOP_WARPSIZE=%d", OP_WARPSIZE);
//      sprintf(buildOpts,"-cl-std=CL1.1 -cl-mad-enable -DOP_WARPSIZE=%d", OP_WARPSIZE);
      ret = clBuildProgram(OP_opencl_core.program, 1, &OP_opencl_core.device_id, buildOpts, NULL, NULL);
//      ret = clBuildProgram(OP_opencl_core.program, 1, &OP_opencl_core.device_id, NULL, NULL, NULL);
      if(ret != CL_SUCCESS) {
        char* build_log;
        size_t log_size;
        clSafeCall( clGetProgramBuildInfo(OP_opencl_core.program, OP_opencl_core.device_id, CL_PROGRAM_BUILD_LOG, 0, NULL, &log_size) );
        build_log = (char*) malloc(log_size+1);
        clSafeCall( clGetProgramBuildInfo(OP_opencl_core.program, OP_opencl_core.device_id, CL_PROGRAM_BUILD_LOG, log_size, build_log, NULL) );
        build_log[log_size] = '\0';
        fprintf(stderr, "=============== OpenCL Program Build Info ================\n\n%s", build_log);
        fprintf(stderr, "\n========================================================= \n");
        free(build_log);
        exit(EXIT_FAILURE);
      }
      printf(" compiling done\n");

    // Create the OpenCL kernel
    OP_opencl_core.kernel[0] = clCreateKernel(OP_opencl_core.program, "op_opencl_save_soln", &ret);
    clSafeCall( ret );
    OP_opencl_core.kernel[1] = clCreateKernel(OP_opencl_core.program, "op_opencl_adt_calc", &ret);
    clSafeCall( ret );
    OP_opencl_core.kernel[2] = clCreateKernel(OP_opencl_core.program, "op_opencl_res_calc", &ret);
    clSafeCall( ret );
    OP_opencl_core.kernel[3] = clCreateKernel(OP_opencl_core.program, "op_opencl_bres_calc", &ret);
    clSafeCall( ret );
    OP_opencl_core.kernel[4] = clCreateKernel(OP_opencl_core.program, "op_opencl_update", &ret);
    clSafeCall( ret );

    isbuilt = true;
  }
}


#include "save_soln_kernel_opencl.cpp"
#include "adt_calc_kernel_opencl.cpp"
#include "res_calc_kernel_opencl.cpp"
#include "bres_calc_kernel_opencl.cpp"
#include "update_kernel_opencl.cpp"





