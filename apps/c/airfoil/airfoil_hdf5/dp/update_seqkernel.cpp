//
// auto-generated by op2.py on 2015-07-08 13:58
//

//user function
//#include "update.h"

inline void update(const double *qold, double *q,
  double *res, const double *adt, double *rms){
  double del, adti;

  adti = 1.0f/(*adt);

  for (int n=0; n<4; n++) {
    del    = adti*res[n];
    q[n]   = qold[n] - del;
    res[n] = 0.0f;
    *rms  += del*del;
  }
}

#ifdef VECTORIZE
//#define SIMD_VEC 8
inline void update_vec(const double qold[*][SIMD_VEC], double q[*][SIMD_VEC],
  double res[*][SIMD_VEC], const double adt[*][SIMD_VEC], double *rms,
  int idx){

  double del, adti;

  adti = 1.0f/(adt[0][idx]);

  for (int n=0; n<4; n++) {
    del    = adti*res[n][idx];
    q[n][idx]   = qold[n][idx] - del;
    res[n][idx] = 0.0f;
    *rms += del*del;
  }
}
#endif

// host stub function
void op_par_loop_update(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4){

  int nargs = 5;
  op_arg args[5];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(4);
  op_timers_core(&cpu_t1, &wall_t1);


  if (OP_diags>2) {
    printf(" kernel routine w/o indirection:  update");
  }

  int exec_size = op_mpi_halo_exchanges(set, nargs, args);
  //int set_size = ((set->size+set->exec_size-1)/16+1)*16; //align to 512 bits

  if (exec_size >0) {

#ifdef VECTORIZE
    #pragma novector
    for ( int n=0; n<0+(exec_size/SIMD_VEC)*SIMD_VEC; n+=SIMD_VEC ){
      //double dat4[SIMD_VEC];
      double dat4[SIMD_VEC] = {0.0,0.0,0.0,0.0};

      #pragma simd
      for ( int i=0; i<SIMD_VEC; i++ ){
        update(
        &((double*)arg0.data)[(n+i) * 4],
        &((double*)arg1.data)[(n+i) * 4],
        &((double*)arg2.data)[(n+i) * 4],
        &((double*)arg3.data)[(n+i) * 1],
        &dat4[i]);
      }

      //for ( int i=0; i<SIMD_VEC; i++ ){
       *(double*)arg4.data += dat4[0]+dat4[1]+dat4[2]+dat4[3];
      //}
    }

//remainder
    for ( int n=(exec_size/SIMD_VEC)*SIMD_VEC; n<exec_size; n++ ){
#else
    for ( int n=0; n<exec_size; n++ ){
#endif
      update(
        &((double*)arg0.data)[4*n],
        &((double*)arg1.data)[4*n],
        &((double*)arg2.data)[4*n],
        &((double*)arg3.data)[1*n],
        (double*)arg4.data);
    }
  }

  // combine reduction data
  op_mpi_reduce(&arg4,(double*)arg4.data);
  op_mpi_set_dirtybit(nargs, args);

  // update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[4].name      = name;
  OP_kernels[4].count    += 1;
  OP_kernels[4].time     += wall_t2 - wall_t1;
  OP_kernels[4].transfer += (float)set->size * arg0.size;
  OP_kernels[4].transfer += (float)set->size * arg1.size * 2.0f;
  OP_kernels[4].transfer += (float)set->size * arg2.size * 2.0f;
  OP_kernels[4].transfer += (float)set->size * arg3.size;
}
