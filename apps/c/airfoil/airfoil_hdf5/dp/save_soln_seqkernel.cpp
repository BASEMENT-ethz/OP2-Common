//
// auto-generated by op2.py on 2015-07-08 13:58
//

//user function
//#include "save_soln.h"
inline void save_soln(const double *q, double *qold){
  for (int n=0; n<4; n++) qold[n] = q[n];
}

#ifdef VECTORIZE
//#define SIMD_VEC 8
inline void save_soln_vec(const double q[*][SIMD_VEC], double qold[*][SIMD_VEC], int idx){
  for (int n=0; n<4; n++) qold[n][idx] = q[n][idx];
}

#endif
// host stub function
void op_par_loop_save_soln(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1){

  int nargs = 2;

  __attribute__((aligned(128))) const double * __restrict__ ptr0 = (double *) arg0.data;
  __attribute__((aligned(128)))       double * __restrict__ ptr1 = (double *) arg1.data;

  op_arg args[2];

  args[0] = arg0;
  args[1] = arg1;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(0);
  op_timers_core(&cpu_t1, &wall_t1);


  if (OP_diags>2) {
    printf(" kernel routine w/o indirection:  save_soln");
  }

  int exec_size = op_mpi_halo_exchanges(set, nargs, args);
  int set_size = ((set->size+set->exec_size-1)/16+1)*16; //align to 512 bits

  if (exec_size >0) {

#ifdef VECTORIZE
    #pragma novector
    for ( int n=0; n<0+(exec_size/SIMD_VEC)*SIMD_VEC; n+=SIMD_VEC ){

      #pragma simd
      for ( int i=0; i<SIMD_VEC; i++ ){
        save_soln(&(ptr0)[(n+i) * 4],
                  &(ptr1)[(n+i) * 4]);
      }
    }
    //remainder
    for ( int n=(exec_size/SIMD_VEC)*SIMD_VEC; n<exec_size; n++ ){
#else
    for ( int n=0; n<exec_size; n++ ){
#endif
      save_soln(
        &(ptr0)[4*n],
        &(ptr1)[4*n]);
    }
  }

  // combine reduction data
  op_mpi_set_dirtybit(nargs, args);

  // update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[0].name      = name;
  OP_kernels[0].count    += 1;
  OP_kernels[0].time     += wall_t2 - wall_t1;
  OP_kernels[0].transfer += (float)set->size * arg0.size;
  OP_kernels[0].transfer += (float)set->size * arg1.size * 2.0f;
}
