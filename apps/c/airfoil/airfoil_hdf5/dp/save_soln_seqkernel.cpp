//
// auto-generated by op2.py on 2015-07-08 13:58
//

//user function
//#include "save_soln.h"
inline void save_soln(const double *q, double *qold){
  for (int n=0; n<4; n++) qold[n] = q[n];
}

#ifdef VECTORIZE
#define SIMD_VEC 4
inline void save_soln_vec(const double q[*][SIMD_VEC], double qold[*][SIMD_VEC], int idx){
  for (int n=0; n<4; n++) qold[n][idx] = q[n][idx];
}

#endif
// host stub function
void op_par_loop_save_soln(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1){

  int nargs = 2;
  op_arg args[2];

  args[0] = arg0;
  args[1] = arg1;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(0);
  op_timers_core(&cpu_t1, &wall_t1);


  if (OP_diags>2) {
    printf(" kernel routine w/o indirection:  save_soln");
  }

  int set_size = op_mpi_halo_exchanges(set, nargs, args);

  if (set->size >0) {

#ifdef VECTORIZE
    #pragma novector
    for ( int n=0; n<0+(set_size/SIMD_VEC)*SIMD_VEC; n+=SIMD_VEC ){

      /*double dat0[4][SIMD_VEC];
      double dat1[4][SIMD_VEC];

      #pragma simd
      for ( int i=0; i<SIMD_VEC; i++ ){

        dat0[0][i] = ((double*)arg0.data)[(n+i) * 4 + 0];
        dat0[1][i] = ((double*)arg0.data)[(n+i) * 4 + 1];
        dat0[2][i] = ((double*)arg0.data)[(n+i) * 4 + 2];
        dat0[3][i] = ((double*)arg0.data)[(n+i) * 4 + 3];
      }*/
      #pragma simd
      for ( int i=0; i<SIMD_VEC; i++ ){
        //save_soln_vec(dat0, dat1, i);
        save_soln(&((double*)arg0.data)[(n+i) * 4],
                  &((double*)arg1.data)[(n+i) * 4]);
      }

      /*#pragma simd
      for ( int i=0; i<SIMD_VEC; i++ ){
          ((double*)arg1.data)[(n+i) * 4 + 0] = dat1[0][i];
          ((double*)arg1.data)[(n+i) * 4 + 1] = dat1[1][i];
          ((double*)arg1.data)[(n+i) * 4 + 2] = dat1[2][i];
          ((double*)arg1.data)[(n+i) * 4 + 3] = dat1[3][i];
      }*/
    }
    //remainder
    for ( int n=(set_size/SIMD_VEC)*SIMD_VEC; n<set_size; n++ ){
#else
    for ( int n=0; n<set_size; n++ ){
#endif
      save_soln(
        &((double*)arg0.data)[4*n],
        &((double*)arg1.data)[4*n]);
    }
  }

  // combine reduction data
  op_mpi_set_dirtybit(nargs, args);

  // update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[0].name      = name;
  OP_kernels[0].count    += 1;
  OP_kernels[0].time     += wall_t2 - wall_t1;
  OP_kernels[0].transfer += (float)set->size * arg0.size;
  OP_kernels[0].transfer += (float)set->size * arg1.size * 2.0f;
}
