//
// auto-generated by op2.py on 2014-03-07 14:38
//

//user function
#include "update.h"
#ifdef VECTORIZE
inline void update_vec(const doublev *qold, doublev *q, doublev *res, const doublev *adt, doublev *rms){
  doublev del, adti;

  adti = 1.0f/(*adt);

  for (int n=0; n<4; n++) {
    del    = adti*res[n];
    q[n]   = qold[n] - del;
    res[n] = 0.0f;
    *rms  += del*del;
  }
}


#endif

// host stub function
void op_par_loop_update(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4){

  double *arg4h = (double *)arg4.data;
  int nargs = 5;
  op_arg args[5];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  // set number of threads
  #ifdef _OPENMP
    int nthreads = omp_get_max_threads();
  #else
    int nthreads = 1;
  #endif

  // allocate and initialise arrays for global reduction
  double arg4_red[nthreads*64];
  for ( int thr=0; thr<nthreads; thr++ ){
    for ( int d=0; d<1; d++ ){
      arg4_red[d+thr*64]=ZERO_double;
    }
  }

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(4);
  op_timers_core(&cpu_t1, &wall_t1);


  int exec_size = op_mpi_halo_exchanges(set, nargs, args);
  int set_size = ((set->size+set->exec_size-1)/16+1)*16; //align to 512 bits

  if (OP_diags>2) {
    printf(" kernel routine w/o indirection:  update");
  }

  if (exec_size >0) {

    int chunk_size = (((set->size-1)/nthreads+1-1)/16+1)*16;
    #pragma omp parallel for
    for ( int thr=0; thr<nthreads; thr++ ){
      int start  = min(thr*chunk_size,set->size);
      int finish = min((thr+1)*chunk_size,set->size);
#ifdef VECTORIZE
      for ( int n=start/VECSIZEH; n<finish/VECSIZEH; n++ ){
        doublev arg0_p[4] = {
          doublev(&((double*)arg0.data)[VECSIZEH*4 * n +0], 4),
          doublev(&((double*)arg0.data)[VECSIZEH*4 * n +1], 4),
          doublev(&((double*)arg0.data)[VECSIZEH*4 * n +2], 4),
          doublev(&((double*)arg0.data)[VECSIZEH*4 * n +3], 4)};
        doublev arg1_p[4];
        doublev arg2_p[4] = {
          doublev(&((double*)arg2.data)[VECSIZEH*4 * n +0], 4),
          doublev(&((double*)arg2.data)[VECSIZEH*4 * n +1], 4),
          doublev(&((double*)arg2.data)[VECSIZEH*4 * n +2], 4),
          doublev(&((double*)arg2.data)[VECSIZEH*4 * n +3], 4)};
        doublev arg3_p[1] = {doublev(&((double*)arg3.data)[VECSIZEH * n])};
        doublev arg4_l(0.0);
        update_vec(
          arg0_p,
          arg1_p,
          arg2_p,
          arg3_p,
          &arg4_l);
        store_stride(arg1_p[0],&((double*)arg1.data)[VECSIZEH*4 * n +0], 4);
        store_stride(arg1_p[1],&((double*)arg1.data)[VECSIZEH*4 * n +1], 4);
        store_stride(arg1_p[2],&((double*)arg1.data)[VECSIZEH*4 * n +2], 4);
        store_stride(arg1_p[3],&((double*)arg1.data)[VECSIZEH*4 * n +3], 4);
        store_stride(arg2_p[0],&((double*)arg2.data)[VECSIZEH*4 * n +0], 4);
        store_stride(arg2_p[1],&((double*)arg2.data)[VECSIZEH*4 * n +1], 4);
        store_stride(arg2_p[2],&((double*)arg2.data)[VECSIZEH*4 * n +2], 4);
        store_stride(arg2_p[3],&((double*)arg2.data)[VECSIZEH*4 * n +3], 4);
        arg4_red[64*thr] += add_horizontal(arg4_l);
      }
      for ( int n=(finish/VECSIZEH)*VECSIZEH; n<finish; n++ ){
#else
      for ( int n=start; n<finish; n++ ){
#endif
        update(
          &((double*)arg0.data)[4*n],
          &((double*)arg1.data)[4*n],
          &((double*)arg2.data)[4*n],
          &((double*)arg3.data)[1*n],
          &arg4_red[64*thr]);
      }
    }
  }

  // combine reduction data
  for ( int thr=0; thr<nthreads; thr++ ){
    for ( int d=0; d<1; d++ ){
      arg4h[d] += arg4_red[d+thr*64];
    }
  }
  op_mpi_reduce(&arg4,arg4h);
  op_mpi_set_dirtybit(nargs, args);

  // update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[4].name      = name;
  OP_kernels[4].count    += 1;
  OP_kernels[4].time     += wall_t2 - wall_t1;
  OP_kernels[4].transfer += (float)set->size * arg0.size;
  OP_kernels[4].transfer += (float)set->size * arg1.size * 2.0f;
  OP_kernels[4].transfer += (float)set->size * arg2.size * 2.0f;
  OP_kernels[4].transfer += (float)set->size * arg3.size;
}
