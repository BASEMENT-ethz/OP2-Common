//
// auto-generated by op2.py on 2014-03-07 14:38
//

//user function
#include "bres_calc.h"
#ifdef VECTORIZE
inline void bres_calc_vec(doublev *x1,  doublev *x2,  doublev *q1,
                      doublev *adt1,doublev *res1,intv_half *bound) {
  doublev dx,dy,mu, ri, p1,vol1, p2,vol2, f;

  dx = x1[0] - x2[0];
  dy = x1[1] - x2[1];

  ri = 1.0/q1[0];
  p1 = gm1*(q1[3]-0.5*ri*(q1[1]*q1[1]+q1[2]*q1[2]));

  vol1 =  ri*(q1[1]*dy - q1[2]*dx);

  ri   = 1.0/qinf[0];
  p2   = gm1*(qinf[3]-0.5*ri*(qinf[1]*qinf[1]+qinf[2]*qinf[2]));
  vol2 =  ri*(qinf[1]*dy - qinf[2]*dx);

  mu = (*adt1)*eps;

  f = 0.5*(vol1* q1[0]         + vol2* qinf[0]        ) + mu*(q1[0]-qinf[0]);
  res1[0] += select(*bound==1.0,0.0,f);
  f = 0.5*(vol1* q1[1] + p1*dy + vol2* qinf[1] + p2*dy) + mu*(q1[1]-qinf[1]);

  res1[1] += select(*bound==1,p1*dy,f);
  f = 0.5*(vol1* q1[2] - p1*dx + vol2* qinf[2] - p2*dx) + mu*(q1[2]-qinf[2]);
  res1[2] += select(*bound==1,-p1*dx,f);
  f = 0.5*(vol1*(q1[3]+p1)     + vol2*(qinf[3]+p2)    ) + mu*(q1[3]-qinf[3]);
  res1[3] += select(*bound==1,0.0,f);
}

#endif

// host stub function
void op_par_loop_bres_calc(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5){

  int nargs = 6;
  op_arg args[6];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  args[5] = arg5;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(3);
  op_timers_core(&cpu_t1, &wall_t1);

  if (OP_diags>2) {
    printf(" kernel routine with indirection: bres_calc\n");
  }

  int exec_size = op_mpi_halo_exchanges(set, nargs, args);
  int set_size = ((set->size+set->exec_size-1)/16+1)*16; //align to 512 bits

  if (exec_size >0) {

#ifdef VECTORIZE
    for ( int n=0; n<exec_size/VECSIZEH; n++ ){
      if (n==set->core_size/VECSIZEH) {
        op_mpi_wait_all(nargs, args);
      }
      intv_half map0idx(&arg0.map_data_d[VECSIZEH*n + set_size * 0]);
      intv_half map1idx(&arg0.map_data_d[VECSIZEH*n + set_size * 1]);
      intv_half map2idx(&arg2.map_data_d[VECSIZEH*n + set_size * 0]);

      intv_half mapidx;
      mapidx = 2*map0idx;
      doublev arg0_p[2] = {
        doublev((double*)arg0.data+0, mapidx),
        doublev((double*)arg0.data+1, mapidx)};
      mapidx = 2*map1idx;
      doublev arg1_p[2] = {
        doublev((double*)arg1.data+0, mapidx),
        doublev((double*)arg1.data+1, mapidx)};
      mapidx = 4*map2idx;
      doublev arg2_p[4] = {
        doublev((double*)arg2.data+0, mapidx),
        doublev((double*)arg2.data+1, mapidx),
        doublev((double*)arg2.data+2, mapidx),
        doublev((double*)arg2.data+3, mapidx)};
      doublev arg3_p[1] = {
        doublev((double*)arg3.data+0, map2idx)};
      doublev arg4_p[4] = {
        doublev(0.0),
        doublev(0.0),
        doublev(0.0),
        doublev(0.0)};
      intv_half arg5_p[1] = {intv_half(&((int*)arg5.data)[VECSIZEH * n])};
      bres_calc_vec(
        arg0_p,
        arg1_p,
        arg2_p,
        arg3_p,
        arg4_p,
        arg5_p);
      mapidx = 4*map2idx;
      store_scatter_add(arg4_p[0], (double*)arg4.data+0, mapidx);
      store_scatter_add(arg4_p[1], (double*)arg4.data+1, mapidx);
      store_scatter_add(arg4_p[2], (double*)arg4.data+2, mapidx);
      store_scatter_add(arg4_p[3], (double*)arg4.data+3, mapidx);
    }
    for ( int n=(exec_size/VECSIZEH)*VECSIZEH; n<exec_size; n++ ){
#else
    for ( int n=0; n<exec_size; n++ ){
#endif
      if (n==set->core_size) {
        op_mpi_wait_all(nargs, args);
      }
      int map0idx = arg0.map_data[n * arg0.map->dim + 0];
      int map1idx = arg0.map_data[n * arg0.map->dim + 1];
      int map2idx = arg2.map_data[n * arg2.map->dim + 0];

      bres_calc(
        &((double*)arg0.data)[2 * map0idx],
        &((double*)arg0.data)[2 * map1idx],
        &((double*)arg2.data)[4 * map2idx],
        &((double*)arg3.data)[1 * map2idx],
        &((double*)arg4.data)[4 * map2idx],
        &((int*)arg5.data)[1 * n]);
    }
  }

  if (exec_size == 0 || exec_size == set->core_size) {
    op_mpi_wait_all(nargs, args);
  }
  // combine reduction data
  op_mpi_set_dirtybit(nargs, args);

  // update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[3].name      = name;
  OP_kernels[3].count    += 1;
  OP_kernels[3].time     += wall_t2 - wall_t1;
}
