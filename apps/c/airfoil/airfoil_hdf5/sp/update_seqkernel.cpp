//
// auto-generated by op2.py on 2013-10-29 14:09
//

//user function
#ifndef BEG
#define BEG 1
#endif
#include "update.h"
inline void update_vec(floatv *qold, floatv *q, floatv *res, floatv *adt, floatv *rms){
  floatv del, adti;

  adti = 1.0f/(*adt);

  for (int n=0; n<4; n++) {
    del    = adti*res[n];
    q[n]   = qold[n] - del;
    res[n] = 0.0f;
    *rms  += del*del;
  }
}


// host stub function
void op_par_loop_update(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4){

  int nargs = 5;
  op_arg args[5];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(4);
  op_timers_core(&cpu_t1, &wall_t1);


  if (OP_diags>2) {
    printf(" kernel routine w/o indirection:  update");
  }

  int exec_size = op_mpi_halo_exchanges(set, nargs, args);
  int set_size = ((set->size+set->exec_size-1)/16+1)*16; //align to 512 bits

  if (exec_size >0) {

    for ( int n=0; n<BEG*exec_size/16; n++ ){
      floatv arg0_p[4] = {
        floatv(&((float*)arg0.data)[16*4 * n +0], 4),
        floatv(&((float*)arg0.data)[16*4 * n +1], 4),
        floatv(&((float*)arg0.data)[16*4 * n +2], 4),
        floatv(&((float*)arg0.data)[16*4 * n +3], 4)};
      floatv arg1_p[4];
      floatv arg2_p[4] = {
        floatv(&((float*)arg2.data)[16*4 * n +0], 4),
        floatv(&((float*)arg2.data)[16*4 * n +1], 4),
        floatv(&((float*)arg2.data)[16*4 * n +2], 4),
        floatv(&((float*)arg2.data)[16*4 * n +3], 4)};
      floatv arg3_p[1] = {floatv(&((float*)arg3.data)[16 * n])};
      floatv arg4_l(0.0f);
      update_vec(
        arg0_p,
        arg1_p,
        arg2_p,
        arg3_p,
        &arg4_l);
      store_stride(arg1_p[0],&((float*)arg1.data)[16*4 * n +0], 4);
      store_stride(arg1_p[1],&((float*)arg1.data)[16*4 * n +1], 4);
      store_stride(arg1_p[2],&((float*)arg1.data)[16*4 * n +2], 4);
      store_stride(arg1_p[3],&((float*)arg1.data)[16*4 * n +3], 4);
      store_stride(arg2_p[0],&((float*)arg2.data)[16*4 * n +0], 4);
      store_stride(arg2_p[1],&((float*)arg2.data)[16*4 * n +1], 4);
      store_stride(arg2_p[2],&((float*)arg2.data)[16*4 * n +2], 4);
      store_stride(arg2_p[3],&((float*)arg2.data)[16*4 * n +3], 4);
      *(float*)arg4.data += add_horizontal(arg4_l);
    }
    for ( int n=BEG*(exec_size/16)*16; n<exec_size; n++ ){
      update(
        &((float*)arg0.data)[4*n],
        &((float*)arg1.data)[4*n],
        &((float*)arg2.data)[4*n],
        &((float*)arg3.data)[1*n],
        (float*)arg4.data);
    }
  }

  // combine reduction data
  op_mpi_reduce(&arg4,(float*)arg4.data);
  op_mpi_set_dirtybit(nargs, args);

  // update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[4].name      = name;
  OP_kernels[4].count    += 1;
  OP_kernels[4].time     += wall_t2 - wall_t1;
  OP_kernels[4].transfer += (float)set->size * arg0.size;
  OP_kernels[4].transfer += (float)set->size * arg1.size * 2.0f;
  OP_kernels[4].transfer += (float)set->size * arg2.size * 2.0f;
  OP_kernels[4].transfer += (float)set->size * arg3.size;
}
