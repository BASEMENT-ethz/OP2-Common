//
// auto-generated by op2.py on 2013-10-30 16:07
//

//user function
#include "res_calc.h"
#ifdef VECTORIZE
inline void res_calc_vec(floatv *x1,  floatv *x2,  floatv *q1,  floatv *q2,
                     floatv *adt1,floatv *adt2,floatv *res1,floatv *res2) {
  floatv dx,dy,mu, ri, p1,vol1, p2,vol2, f;

  dx = x1[0] - x2[0];
  dy = x1[1] - x2[1];

  ri   = 1.0f/q1[0];
  p1   = gm1*(q1[3]-0.5f*ri*(q1[1]*q1[1]+q1[2]*q1[2]));
  vol1 =  ri*(q1[1]*dy - q1[2]*dx);

  ri   = 1.0f/q2[0];
  p2   = gm1*(q2[3]-0.5f*ri*(q2[1]*q2[1]+q2[2]*q2[2]));
  vol2 =  ri*(q2[1]*dy - q2[2]*dx);

  mu = 0.5f*((*adt1)+(*adt2))*eps;

  f = 0.5f*(vol1* q1[0]         + vol2* q2[0]        ) + mu*(q1[0]-q2[0]);
  res1[0] += f;
  res2[0] -= f;
  f = 0.5f*(vol1* q1[1] + p1*dy + vol2* q2[1] + p2*dy) + mu*(q1[1]-q2[1]);
  res1[1] += f;
  res2[1] -= f;
  f = 0.5f*(vol1* q1[2] - p1*dx + vol2* q2[2] - p2*dx) + mu*(q1[2]-q2[2]);
  res1[2] += f;
  res2[2] -= f;
  f = 0.5f*(vol1*(q1[3]+p1)     + vol2*(q2[3]+p2)    ) + mu*(q1[3]-q2[3]);
  res1[3] += f;
  res2[3] -= f;
}

#endif

// host stub function
void op_par_loop_res_calc(char const *name, op_set set,
  op_arg arg0,
  op_arg arg1,
  op_arg arg2,
  op_arg arg3,
  op_arg arg4,
  op_arg arg5,
  op_arg arg6,
  op_arg arg7){

  int nargs = 8;
  op_arg args[8];

  args[0] = arg0;
  args[1] = arg1;
  args[2] = arg2;
  args[3] = arg3;
  args[4] = arg4;
  args[5] = arg5;
  args[6] = arg6;
  args[7] = arg7;

  // initialise timers
  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timing_realloc(2);
  op_timers_core(&cpu_t1, &wall_t1);

  if (OP_diags>2) {
    printf(" kernel routine with indirection: res_calc\n");
  }

  int exec_size = op_mpi_halo_exchanges(set, nargs, args);
  int set_size = ((set->size+set->exec_size-1)/16+1)*16; //align to 512 bits

  if (exec_size >0) {

#ifdef VECTORIZE
    for ( int n=0; n<exec_size/VECSIZE; n++ ){
      if (n==set->core_size/VECSIZE) {
        op_mpi_wait_all(nargs, args);
      }
      intv map0idx(&arg0.map_data_d[VECSIZE*n + set_size * 0]);
      intv map1idx(&arg0.map_data_d[VECSIZE*n + set_size * 1]);
      intv map2idx(&arg2.map_data_d[VECSIZE*n + set_size * 0]);
      intv map3idx(&arg2.map_data_d[VECSIZE*n + set_size * 1]);

      intv mapidx;
      mapidx = 2*map0idx;
      floatv arg0_p[2] = {
        floatv((float*)arg0.data+0, mapidx),
        floatv((float*)arg0.data+1, mapidx)};
      mapidx = 2*map1idx;
      floatv arg1_p[2] = {
        floatv((float*)arg1.data+0, mapidx),
        floatv((float*)arg1.data+1, mapidx)};
      mapidx = 4*map2idx;
      floatv arg2_p[4] = {
        floatv((float*)arg2.data+0, mapidx),
        floatv((float*)arg2.data+1, mapidx),
        floatv((float*)arg2.data+2, mapidx),
        floatv((float*)arg2.data+3, mapidx)};
      mapidx = 4*map3idx;
      floatv arg3_p[4] = {
        floatv((float*)arg3.data+0, mapidx),
        floatv((float*)arg3.data+1, mapidx),
        floatv((float*)arg3.data+2, mapidx),
        floatv((float*)arg3.data+3, mapidx)};
      floatv arg4_p[1] = {
        floatv((float*)arg4.data+0, map2idx)};
      floatv arg5_p[1] = {
        floatv((float*)arg5.data+0, map3idx)};
      floatv arg6_p[4] = {
        floatv(0.0f),
        floatv(0.0f),
        floatv(0.0f),
        floatv(0.0f)};
      floatv arg7_p[4] = {
        floatv(0.0f),
        floatv(0.0f),
        floatv(0.0f),
        floatv(0.0f)};
      res_calc_vec(
        arg0_p,
        arg1_p,
        arg2_p,
        arg3_p,
        arg4_p,
        arg5_p,
        arg6_p,
        arg7_p);
      mapidx = 4*map2idx;
      store_scatter_add(arg6_p[0], (float*)arg6.data+0, mapidx);
      store_scatter_add(arg6_p[1], (float*)arg6.data+1, mapidx);
      store_scatter_add(arg6_p[2], (float*)arg6.data+2, mapidx);
      store_scatter_add(arg6_p[3], (float*)arg6.data+3, mapidx);
      mapidx = 4*map3idx;
      store_scatter_add(arg7_p[0], (float*)arg7.data+0, mapidx);
      store_scatter_add(arg7_p[1], (float*)arg7.data+1, mapidx);
      store_scatter_add(arg7_p[2], (float*)arg7.data+2, mapidx);
      store_scatter_add(arg7_p[3], (float*)arg7.data+3, mapidx);
    }
    for ( int n=(exec_size/VECSIZE)*VECSIZE; n<exec_size; n++ ){
#else
    for ( int n=0; n<exec_size; n++ ){
#endif
      if (n==set->core_size) {
        op_mpi_wait_all(nargs, args);
      }
      int map0idx = arg0.map_data[n * arg0.map->dim + 0];
      int map1idx = arg0.map_data[n * arg0.map->dim + 1];
      int map2idx = arg2.map_data[n * arg2.map->dim + 0];
      int map3idx = arg2.map_data[n * arg2.map->dim + 1];

      res_calc(
        &((float*)arg0.data)[2 * map0idx],
        &((float*)arg0.data)[2 * map1idx],
        &((float*)arg2.data)[4 * map2idx],
        &((float*)arg2.data)[4 * map3idx],
        &((float*)arg4.data)[1 * map2idx],
        &((float*)arg4.data)[1 * map3idx],
        &((float*)arg6.data)[4 * map2idx],
        &((float*)arg6.data)[4 * map3idx]);
    }
  }

  if (exec_size == 0 || exec_size == set->core_size) {
    op_mpi_wait_all(nargs, args);
  }
  // combine reduction data
  op_mpi_set_dirtybit(nargs, args);

  // update kernel record
  op_timers_core(&cpu_t2, &wall_t2);
  OP_kernels[2].name      = name;
  OP_kernels[2].count    += 1;
  OP_kernels[2].time     += wall_t2 - wall_t1;
}
