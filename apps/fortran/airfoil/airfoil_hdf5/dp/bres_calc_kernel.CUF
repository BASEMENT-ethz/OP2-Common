!
! auto-generated by op2.py on 2013-04-18 15:02
!

MODULE BRES_CALC_MODULE
USE OP2_FORTRAN_DECLARATIONS
USE OP2_FORTRAN_RT_SUPPORT
USE ISO_C_BINDING
USE OP2_CONSTANTS
USE CUDAFOR
USE CUDACONFIGURATIONPARAMS


! bres_calcvariable declarations

real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opGblDat1Devicebres_calc
REAL(kind=4) :: loopTimeHostbres_calc
REAL(kind=4) :: loopTimeKernelbres_calc
INTEGER(kind=4) :: numberCalledbres_calc

TYPE ( c_ptr )  :: planRet_bres_calc

CONTAINS

attributes (device) &
#include "bres_calc.inc"


! CUDA kernel function
attributes (global) SUBROUTINE op_cuda_bres_calc( &
  & opDat2Devicebres_calc, &
  & opMap2Devicebres_calc, &
  & opDat4Devicebres_calc, &
  & opMap4Devicebres_calc, &
  & opDat5Devicebres_calc, &
  & opMap5Devicebres_calc, &
  & opDat6Devicebres_calc, &
  & opMap6Devicebres_calc, &
  & opDat7Devicebres_calc, &
  & pblkMap, &
  & poffset, &
  & pnelems, &
  & pnthrcol, &
  & pthrcol, &
  & setSize, &
  & blockOffset)
  
  IMPLICIT NONE
  
! local variables
  real(8), DEVICE, INTENT(IN) :: opDat2Devicebres_calc(*)
  INTEGER(kind=4), DEVICE :: opMap2Devicebres_calc(*)
  real(8), DEVICE, INTENT(IN) :: opDat4Devicebres_calc(*)
  INTEGER(kind=4), DEVICE :: opMap4Devicebres_calc(*)
  real(8), DEVICE, INTENT(IN) :: opDat5Devicebres_calc(*)
  INTEGER(kind=4), DEVICE :: opMap5Devicebres_calc(*)
  real(8), DEVICE :: opDat6Devicebres_calc(*)
  INTEGER(kind=4), DEVICE :: opMap6Devicebres_calc(*)
  integer(4), DEVICE, INTENT(IN) :: opDat7Devicebres_calc(*)
  
  INTEGER(kind=4), DIMENSION(0:*), DEVICE :: pblkMap
  INTEGER(kind=4), DIMENSION(0:*), DEVICE :: poffset
  INTEGER(kind=4), DIMENSION(0:*), DEVICE :: pnelems
  INTEGER(kind=4), DIMENSION(0:*), DEVICE :: pnthrcol
  INTEGER(kind=4), DIMENSION(0:*), DEVICE :: pthrcol
  INTEGER(kind=4), VALUE :: blockOffset
  INTEGER(kind=4), VALUE :: setSize
  
  real(8), DIMENSION(0:4-1) :: opDat6Local
  
  INTEGER(kind=4), SHARED :: numOfColours
  INTEGER(kind=4), SHARED :: numberOfActiveThreadsCeiling
  INTEGER(kind=4), SHARED :: blockID
  INTEGER(kind=4), SHARED :: threadBlockOffset
  INTEGER(kind=4), SHARED :: numberOfActiveThreads
  INTEGER(kind=4) :: colour1
  INTEGER(kind=4) :: colour2
  INTEGER(kind=4) :: n1
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: i2
  
  
  IF (threadIdx%x - 1 .EQ. 0) THEN
    blockID = pblkMap(blockIdx%x - 1 + blockOffset)
    numberOfActiveThreads = pnelems(blockID)
    numberOfActiveThreadsCeiling = blockDim%x * (1 + (numberOfActiveThreads - 1) / blockDim%x)
    numOfColours = pnthrcol(blockID)
    threadBlockOffset = poffset(blockID)
    
  END IF
  
  CALL syncthreads()
  
  i1 = threadIdx%x - 1
  
  DO WHILE (i1 < numberOfActiveThreadsCeiling )
    colour2 = -1
    IF (i1 < numberOfActiveThreads) THEN
      DO i2 = 0, 4 - 1, 1
        opDat6Local(i2) = 0
      END DO
      
! kernel call
      CALL bres_calc( &
      & opGblDat1Devicebres_calc, &
      & opDat2Devicebres_calc(1 + opMap2Devicebres_calc(1 + i1 + threadBlockOffset + setSize * 0) * (2):     opMap2Devicebres_calc(1 + i1 + threadBlockOffset + setSize * 0) * (2) + 2), &
      & opDat2Devicebres_calc(1 + opMap2Devicebres_calc(1 + i1 + threadBlockOffset + setSize * 1) * (2):     opMap2Devicebres_calc(1 + i1 + threadBlockOffset + setSize * 1) * (2) + 2), &
      & opDat4Devicebres_calc(1 + opMap4Devicebres_calc(1 + i1 + threadBlockOffset + setSize * 0) * (4):     opMap4Devicebres_calc(1 + i1 + threadBlockOffset + setSize * 0) * (4) + 4), &
      & opDat5Devicebres_calc(1 + opMap5Devicebres_calc(1 + i1 + threadBlockOffset + setSize * 0)), &
      & opDat6Local, &
      & opDat7Devicebres_calc((i1 + threadBlockOffset) * (1) +1) &
      & )
      
      colour2 = pthrcol(i1 + threadBlockOffset)
    END IF
    DO colour1 = 0, numOfColours - 1, 1
      IF (colour2 .EQ. colour1) THEN
        DO i2 = 0, 4 - 1, 1
          opDat6Devicebres_calc(1 + i2 + opMap6Devicebres_calc(1 + i1 + threadBlockOffset + setSize * 0) * (4)) = &
          & opDat6Devicebres_calc(1 + i2 + opMap6Devicebres_calc(1 + i1 + threadBlockOffset + setSize * 0) * (4)) + opDat6Local(i2)
        END DO
        
      END IF
      CALL syncthreads()
    END DO
    i1 = i1 + blockDim%x
  END DO
  
  
  
END SUBROUTINE

attributes (host) SUBROUTINE bres_calc_host( userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4, &
  & opArg5, &
  & opArg6, &
  & opArg7 )
  
  IMPLICIT NONE
  character(len=9), INTENT(IN) :: userSubroutine
  TYPE ( op_set ) , INTENT(IN) :: set
  
  TYPE ( op_arg ) , INTENT(IN) :: opArg1
  TYPE ( op_arg ) , INTENT(IN) :: opArg2
  TYPE ( op_arg ) , INTENT(IN) :: opArg3
  TYPE ( op_arg ) , INTENT(IN) :: opArg4
  TYPE ( op_arg ) , INTENT(IN) :: opArg5
  TYPE ( op_arg ) , INTENT(IN) :: opArg6
  TYPE ( op_arg ) , INTENT(IN) :: opArg7
  if (getHybridGPU()) then
    CALL bres_calc_host_gpu(userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4, &
  & opArg5, &
  & opArg6, &
  & opArg7 )
  else
    CALL bres_calc_host_cpu(userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4, &
  & opArg5, &
  & opArg6, &
  & opArg7 )
  end if

END SUBROUTINE

attributes (host) SUBROUTINE bres_calc_cpu(qinf,x1,x2,q1,adt1,res1,bound)
  IMPLICIT NONE
  REAL(kind=8), DIMENSION(4) :: qinf
  REAL(kind=8), DIMENSION(2), INTENT(IN) :: x1
  REAL(kind=8), DIMENSION(2), INTENT(IN) :: x2
  REAL(kind=8), DIMENSION(4), INTENT(IN) :: q1
  REAL(kind=8), INTENT(IN) :: adt1
  REAL(kind=8), DIMENSION(4) :: res1
  INTEGER(kind=4), INTENT(IN) :: bound
  REAL(kind=8) :: dx,dy,mu,ri,p1,vol1,p2,vol2,f

  dx = x1(1) - x2(1)
  dy = x1(2) - x2(2)
  ri = 1.0 / q1(1)
  p1 = gm1 * (q1(4) - 0.5 * ri * (q1(2) * q1(2) + q1(3) * q1(3)))

  IF (bound .EQ. 1) THEN
    res1(2) = res1(2) + p1 * dy
    res1(3) = res1(3) -(p1 * dx)
  ELSE
    vol1 = ri * (q1(2) * dy - q1(3) * dx)
!    ri = 1.0 / qinf(1)
    ri = 1.0 / qinf(1)
!    p2 = gm1 * (qinf(4) - 0.5 * ri * (qinf(2) * qinf(2) + qinf(3) * qinf(3)))
!    vol2 = ri * (qinf(2) * dy - qinf(3) * dx)
    p2 = gm1 * (qinf(4) - 0.5 * ri * (qinf(2) * qinf(2) + qinf(3) * qinf(3)))
    vol2 = ri * (qinf(2) * dy - qinf(3) * dx)
    mu = adt1 * eps
!    f = 0.5 * (vol1 * q1(1) + vol2 * qinf(1)) + mu * (q1(1) - qinf(1))
    f = 0.5 * (vol1 * q1(1) + vol2 * qinf(1)) + mu * (q1(1) - qinf(1))
    res1(1) = res1(1) + f
!    f = 0.5 * (vol1 * q1(2) + p1 * dy + vol2 * qinf(2) + p2 * dy) + mu * (q1(2) - qinf(2))
    f = 0.5 * (vol1 * q1(2) + p1 * dy + vol2 * qinf(2) + p2 * dy) + mu * (q1(2) - qinf(2))
    res1(2) = res1(2) + f
!    f = 0.5 * (vol1 * q1(3) - p1 * dx + vol2 * qinf(3) - p2 * dx) + mu * (q1(3) - qinf(3))
    f = 0.5 * (vol1 * q1(3) - p1 * dx + vol2 * qinf(3) - p2 * dx) + mu * (q1(3) - qinf(3))
    res1(3) = res1(3) + f
!    f = 0.5 * (vol1 * (q1(4) + p1) + vol2 * (qinf(4) + p2)) + mu * (q1(4) - qinf(4))
    f = 0.5 * (vol1 * (q1(4) + p1) + vol2 * (qinf(4) + p2)) + mu * (q1(4) - qinf(4))
    res1(4) = res1(4) + f
  END IF
END SUBROUTINE

attributes (host) SUBROUTINE bres_calc_host_cpu( userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4, &
  & opArg5, &
  & opArg6, &
  & opArg7 )

  IMPLICIT NONE
  character(kind=c_char,len=*), INTENT(IN) :: userSubroutine
  type ( op_set ) , INTENT(IN) :: set

  type ( op_arg ) , INTENT(IN) :: opArg1
  type ( op_arg ) , INTENT(IN) :: opArg2
  type ( op_arg ) , INTENT(IN) :: opArg3
  type ( op_arg ) , INTENT(IN) :: opArg4
  type ( op_arg ) , INTENT(IN) :: opArg5
  type ( op_arg ) , INTENT(IN) :: opArg6
  type ( op_arg ) , INTENT(IN) :: opArg7

  type ( op_arg ) , DIMENSION(7) :: opArgArray
  INTEGER(kind=4) :: numberOfOpDats
  INTEGER(kind=4) :: n_upper
  type ( op_set_core ) , POINTER :: opSetCore

  INTEGER(kind=4), POINTER, DIMENSION(:) :: opDat2Map
  INTEGER(kind=4) :: opDat2MapDim
  real(8), POINTER, DIMENSION(:) :: opDat2Local
  INTEGER(kind=4) :: opDat2Cardinality

  INTEGER(kind=4), POINTER, DIMENSION(:) :: opDat4Map
  INTEGER(kind=4) :: opDat4MapDim
  real(8), POINTER, DIMENSION(:) :: opDat4Local
  INTEGER(kind=4) :: opDat4Cardinality

  INTEGER(kind=4), POINTER, DIMENSION(:) :: opDat5Map
  INTEGER(kind=4) :: opDat5MapDim
  real(8), POINTER, DIMENSION(:) :: opDat5Local
  INTEGER(kind=4) :: opDat5Cardinality

  INTEGER(kind=4), POINTER, DIMENSION(:) :: opDat6Map
  INTEGER(kind=4) :: opDat6MapDim
  real(8), POINTER, DIMENSION(:) :: opDat6Local
  INTEGER(kind=4) :: opDat6Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat1Local
  integer(4), POINTER, DIMENSION(:) :: opDat7Local
  INTEGER(kind=4) :: opDat7Cardinality


  INTEGER(kind=4) :: i1

  numberOfOpDats = 7

  opArgArray(1) = opArg1
  opArgArray(2) = opArg2
  opArgArray(3) = opArg3
  opArgArray(4) = opArg4
  opArgArray(5) = opArg5
  opArgArray(6) = opArg6
  opArgArray(7) = opArg7

  n_upper = op_mpi_halo_exchanges(set%setCPtr,numberOfOpDats,opArgArray)

  opSetCore => set%setPtr

  opDat2Cardinality = opArg2%dim * getSetSizeFromOpArg(opArg2)
  opDat2MapDim = getMapDimFromOpArg(opArg2)
  opDat4Cardinality = opArg4%dim * getSetSizeFromOpArg(opArg4)
  opDat4MapDim = getMapDimFromOpArg(opArg4)
  opDat5Cardinality = opArg5%dim * getSetSizeFromOpArg(opArg5)
  opDat5MapDim = getMapDimFromOpArg(opArg5)
  opDat6Cardinality = opArg6%dim * getSetSizeFromOpArg(opArg6)
  opDat6MapDim = getMapDimFromOpArg(opArg6)
  opDat7Cardinality = opArg7%dim * getSetSizeFromOpArg(opArg7)
  CALL c_f_pointer(opArg2%data,opDat2Local,(/opDat2Cardinality/))
  CALL c_f_pointer(opArg2%map_data,opDat2Map,(/opSetCore%size*opDat2MapDim/))
  CALL c_f_pointer(opArg4%data,opDat4Local,(/opDat4Cardinality/))
  CALL c_f_pointer(opArg4%map_data,opDat4Map,(/opSetCore%size*opDat4MapDim/))
  CALL c_f_pointer(opArg5%data,opDat5Local,(/opDat5Cardinality/))
  CALL c_f_pointer(opArg5%map_data,opDat5Map,(/opSetCore%size*opDat5MapDim/))
  CALL c_f_pointer(opArg6%data,opDat6Local,(/opDat6Cardinality/))
  CALL c_f_pointer(opArg6%map_data,opDat6Map,(/opSetCore%size*opDat6MapDim/))
  CALL c_f_pointer(opArg1%data,opDat1Local, (/opArg1%dim/))
  CALL c_f_pointer(opArg7%data,opDat7Local,(/opDat7Cardinality/))


  DO i1 = 0, n_upper-1, 1
    IF (i1 .EQ. opSetCore%core_size) THEN
      CALL op_mpi_wait_all(numberOfOpDats,opArgArray)
    END IF

! kernel call
  CALL bres_calc_cpu( &
    & opDat1Local(1:4), &
    & opDat2Local(1 + opDat2Map(1 + i1 * opDat2MapDim + 0) * (2) : opDat2Map(1 + i1 * opDat2MapDim + 0) * (2) + 2), &
    & opDat2Local(1 + opDat2Map(1 + i1 * opDat2MapDim + 1) * (2) : opDat2Map(1 + i1 * opDat2MapDim + 1) * (2) + 2), &
    & opDat4Local(1 + opDat4Map(1 + i1 * opDat4MapDim + 0) * (4) : opDat4Map(1 + i1 * opDat4MapDim + 0) * (4) + 4), &
    & opDat5Local(1 + opDat5Map(1 + i1 * opDat5MapDim + 0)), &
    & opDat6Local(1 + opDat6Map(1 + i1 * opDat6MapDim + 0) * (4) : opDat6Map(1 + i1 * opDat6MapDim + 0) * (4) + 4), &
    & opDat7Local(1 + i1) &
    & )
  END DO

  IF ((n_upper .EQ. 0) .OR. (n_upper .EQ. opSetCore%core_size)) THEN
    CALL op_mpi_wait_all(numberOfOpDats,opArgArray)
  END IF


  CALL op_mpi_set_dirtybit(numberOfOpDats,opArgArray)

END SUBROUTINE

attributes (host) SUBROUTINE bres_calc_host_gpu( userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4, &
  & opArg5, &
  & opArg6, &
  & opArg7 )
  
  IMPLICIT NONE
  character(len=9), INTENT(IN) :: userSubroutine
  TYPE ( op_set ) , INTENT(IN) :: set
  
  TYPE ( op_arg ) , INTENT(IN) :: opArg1
  TYPE ( op_arg ) , INTENT(IN) :: opArg2
  TYPE ( op_arg ) , INTENT(IN) :: opArg3
  TYPE ( op_arg ) , INTENT(IN) :: opArg4
  TYPE ( op_arg ) , INTENT(IN) :: opArg5
  TYPE ( op_arg ) , INTENT(IN) :: opArg6
  TYPE ( op_arg ) , INTENT(IN) :: opArg7
  
  TYPE ( op_arg ) , DIMENSION(7) :: opArgArray
  INTEGER(kind=4) :: numberOfOpDats
  INTEGER(kind=4) :: n_upper
  INTEGER(kind=4) :: returnSetKernelTiming
  
  
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat2Devicebres_calc
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: opMap2Devicebres_calc
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat4Devicebres_calc
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: opMap4Devicebres_calc
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat5Devicebres_calc
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: opMap5Devicebres_calc
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat6Devicebres_calc
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: opMap6Devicebres_calc
  integer(4), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat7Devicebres_calc
  
  INTEGER(kind=4) :: opDat2Cardinality
  INTEGER(kind=4) :: opMap2Cardinality
  INTEGER(kind=4) :: opDat4Cardinality
  INTEGER(kind=4) :: opMap4Cardinality
  INTEGER(kind=4) :: opDat5Cardinality
  INTEGER(kind=4) :: opMap5Cardinality
  INTEGER(kind=4) :: opDat6Cardinality
  INTEGER(kind=4) :: opMap6Cardinality
  INTEGER(kind=4) :: opDat1Cardinality
  INTEGER(kind=4) :: opDat7Cardinality
  
  TYPE ( op_plan ) , POINTER :: actualPlan_bres_calc
  
  INTEGER(kind=4) :: blocksPerGrid
  INTEGER(kind=4) :: threadsPerBlock
  INTEGER(kind=4) :: dynamicSharedMemorySize
  INTEGER(kind=4) :: threadSynchRet
  INTEGER(kind=4), DIMENSION(1:7) :: opDatArray
  INTEGER(kind=4), DIMENSION(1:7) :: mappingIndicesArray
  INTEGER(kind=4), DIMENSION(1:7) :: mappingArray
  INTEGER(kind=4), DIMENSION(1:7) :: accessDescriptorArray
  INTEGER(kind=4), DIMENSION(1:7) :: indirectionDescriptorArray
  
  INTEGER(kind=4) :: mappingArray2Size
  INTEGER(kind=4) :: mappingArray4Size
  INTEGER(kind=4) :: mappingArray5Size
  INTEGER(kind=4) :: mappingArray6Size
  
  INTEGER(kind=4) :: numberOfIndirectOpDats
  INTEGER(kind=4) :: blockOffset
  INTEGER(kind=4) :: pblkMapSize
  INTEGER(kind=4) :: poffsetSize
  INTEGER(kind=4) :: pnelemsSize
  INTEGER(kind=4) :: pnthrcolSize
  INTEGER(kind=4) :: pthrcolSize
  INTEGER(kind=4), POINTER, DIMENSION(:) :: ncolblk
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: pblkMap
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: poffset
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: pnelems
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: pnthrcol
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: pthrcol
  INTEGER(kind=4) :: partitionSize
  INTEGER(kind=4) :: blockSize
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: i2
  INTEGER(kind=4), SAVE :: calledTimes
  
  INTEGER(kind=4) :: istat
  REAL(kind=4) :: accumulatorHostTime
  REAL(kind=4) :: accumulatorKernelTime
  REAL(kind=8) :: KT_double
  TYPE ( cudaEvent )  :: startTimeHost
  TYPE ( cudaEvent )  :: endTimeHost
  TYPE ( cudaEvent )  :: startTimeKernel
  TYPE ( cudaEvent )  :: endTimeKernel
  real(8), DIMENSION(:), POINTER :: opDat1Host
  
  numberOfOpDats = 7
  
  opArgArray(1) = opArg1
  opArgArray(2) = opArg2
  opArgArray(3) = opArg3
  opArgArray(4) = opArg4
  opArgArray(5) = opArg5
  opArgArray(6) = opArg6
  opArgArray(7) = opArg7
  
  n_upper = op_mpi_halo_exchanges_cuda(set%setCPtr,numberOfOpDats,opArgArray)
  
  istat = cudaEventCreate(startTimeHost)
  istat = cudaEventCreate(endTimeHost)
  istat = cudaEventCreate(startTimeKernel)
  istat = cudaEventCreate(endTimeKernel)
  
  numberCalledbres_calc = numberCalledbres_calc + 1
  istat = cudaEventRecord(startTimeHost,0)
  
  indirectionDescriptorArray(1) = -1
  indirectionDescriptorArray(2) = 0
  indirectionDescriptorArray(3) = 0
  indirectionDescriptorArray(4) = 1
  indirectionDescriptorArray(5) = 2
  indirectionDescriptorArray(6) = 3
  indirectionDescriptorArray(7) = -1
  
  numberOfIndirectOpDats = 4
  
  partitionSize = getPartitionSize(userSubroutine//C_NULL_CHAR,set%setPtr%size)
  
  planRet_bres_calc = FortranPlanCaller( &
  & userSubroutine//C_NULL_CHAR, &
  & set%setCPtr, &
  & partitionSize, &
  & numberOfOpDats, &
  & opArgArray, &
  & numberOfIndirectOpDats, &
  & indirectionDescriptorArray)
  
  opDat2Cardinality = opArg2%dim * getSetSizeFromOpArg(opArg2)
  opMap2Cardinality = set%setPtr%size * getMapDimFromOpArg(opArg2)
  opDat4Cardinality = opArg4%dim * getSetSizeFromOpArg(opArg4)
  opMap4Cardinality = set%setPtr%size * getMapDimFromOpArg(opArg4)
  opDat5Cardinality = opArg5%dim * getSetSizeFromOpArg(opArg5)
  opMap5Cardinality = set%setPtr%size * getMapDimFromOpArg(opArg5)
  opDat6Cardinality = opArg6%dim * getSetSizeFromOpArg(opArg6)
  opMap6Cardinality = set%setPtr%size * getMapDimFromOpArg(opArg6)
  opDat1Cardinality = opArg1%dim
  opDat7Cardinality = opArg7%dim * getSetSizeFromOpArg(opArg7)
  
  
  CALL c_f_pointer(opArg2%data_d,opDat2Devicebres_calc,(/opDat2Cardinality/))
  CALL c_f_pointer(opArg2%map_data_d,opMap2Devicebres_calc,(/opMap2Cardinality/))
  CALL c_f_pointer(opArg4%data_d,opDat4Devicebres_calc,(/opDat4Cardinality/))
  CALL c_f_pointer(opArg4%map_data_d,opMap4Devicebres_calc,(/opMap4Cardinality/))
  CALL c_f_pointer(opArg5%data_d,opDat5Devicebres_calc,(/opDat5Cardinality/))
  CALL c_f_pointer(opArg5%map_data_d,opMap5Devicebres_calc,(/opMap5Cardinality/))
  CALL c_f_pointer(opArg6%data_d,opDat6Devicebres_calc,(/opDat6Cardinality/))
  CALL c_f_pointer(opArg6%map_data_d,opMap6Devicebres_calc,(/opMap6Cardinality/))
  CALL c_f_pointer(opArg1%data,opDat1Host,(/opDat1Cardinality/))
  CALL c_f_pointer(opArg7%data_d,opDat7Devicebres_calc,(/opDat7Cardinality/))
  
  CALL c_f_pointer(planRet_bres_calc,actualPlan_bres_calc)
  CALL c_f_pointer(actualPlan_bres_calc%ncolblk,ncolblk,(/set%setPtr%size/))
  pblkMapSize = actualPlan_bres_calc%nblocks
  CALL c_f_pointer(actualPlan_bres_calc%blkmap,pblkMap,(/pblkMapSize/))
  poffsetSize = actualPlan_bres_calc%nblocks
  CALL c_f_pointer(actualPlan_bres_calc%offset,poffset,(/poffsetSize/))
  pnelemsSize = actualPlan_bres_calc%nblocks
  CALL c_f_pointer(actualPlan_bres_calc%nelems,pnelems,(/pnelemsSize/))
  pnthrcolSize = actualPlan_bres_calc%nblocks
  CALL c_f_pointer(actualPlan_bres_calc%nthrcol,pnthrcol,(/pnthrcolSize/))
  pthrcolSize = set%setPtr%size
  CALL c_f_pointer(actualPlan_bres_calc%thrcol,pthrcol,(/pthrcolSize/))
  
  IF (.not. allocated(opGblDat1Devicebres_calc)) THEN
    allocate(opGblDat1Devicebres_calc(opArg1%dim))
  END IF
  opGblDat1Devicebres_calc(1:opArg1%dim) = opDat1Host(1:opArg1%dim)
  istat = cudaEventRecord(endTimeHost,0)
  istat = cudaEventSynchronize(endTimeHost)
  istat = cudaEventElapsedTime(accumulatorHostTime,startTimeHost,endTimeHost)
  
  loopTimeHostbres_calc = loopTimeHostbres_calc + accumulatorHostTime
  istat = cudaEventRecord(startTimeKernel,0)
  
  blockOffset = 0
  
  threadsPerBlock = getBlockSize(userSubroutine//C_NULL_CHAR,set%setPtr%size)
  DO i2 = 0, actualPlan_bres_calc%ncolors - 1, 1
    IF (i2 .EQ. actualPlan_bres_calc%ncolors_core) THEN
      CALL op_mpi_wait_all_cuda(numberOfOpDats,opArgArray)
    END IF
    
    blocksPerGrid = ncolblk(i2 + 1)
    dynamicSharedMemorySize = reductionSize(opArgArray,numberOfOpDats) * threadsPerBlock
    
    CALL op_cuda_bres_calc <<<blocksPerGrid,threadsPerBlock,dynamicSharedMemorySize>>> (&
    & opDat2Devicebres_calc, &
    & opMap2Devicebres_calc, &
    & opDat4Devicebres_calc, &
    & opMap4Devicebres_calc, &
    & opDat5Devicebres_calc, &
    & opMap5Devicebres_calc, &
    & opDat6Devicebres_calc, &
    & opMap6Devicebres_calc, &
    & opDat7Devicebres_calc, &
    & pblkMap, &
    & poffset,pnelems,pnthrcol,pthrcol,set%setPtr%size+set%setPtr%exec_size, blockOffset)
    
    blockOffset = blockOffset + blocksPerGrid
  END DO
  
  
  IF ((n_upper .EQ. 0) .OR. (n_upper .EQ. set%setPtr%core_size)) THEN
    CALL op_mpi_wait_all_cuda(numberOfOpDats,opArgArray)
  END IF
  
  
  istat = cudaEventRecord(endTimeKernel,0)
  istat = cudaEventSynchronize(endTimeKernel)
  istat = cudaEventElapsedTime(accumulatorKernelTime,startTimeKernel,endTimeKernel)
  loopTimeKernelbres_calc = loopTimeKernelbres_calc + accumulatorKernelTime
  
  
  CALL op_mpi_set_dirtybit_cuda(numberOfOpDats,opArgArray)
  
  KT_double = REAL(accumulatorKernelTime / 1000.00)
  returnSetKernelTiming = setKernelTime(3 , userSubroutine//C_NULL_CHAR, &
  & KT_double, actualPlan_bres_calc%transfer,actualPlan_bres_calc%transfer2)
  calledTimes = calledTimes + 1
END SUBROUTINE
END MODULE
