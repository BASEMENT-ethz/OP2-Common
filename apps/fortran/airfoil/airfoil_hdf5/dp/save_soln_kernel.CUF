!
! auto-generated by op2.py on 2013-06-13 14:57
!

MODULE SAVE_SOLN_MODULE
USE OP2_CONSTANTS
USE OP2_FORTRAN_DECLARATIONS
USE OP2_FORTRAN_RT_SUPPORT
USE ISO_C_BINDING
USE CUDAFOR
USE CUDACONFIGURATIONPARAMS


#ifdef _OPENMP
  USE OMP_LIB
#endif

! save_solnvariable declarations

REAL(kind=4) :: loopTimeHostsave_soln
REAL(kind=4) :: loopTimeKernelsave_soln
INTEGER(kind=4) :: numberCalledsave_soln


CONTAINS

! cpu user function
#include "save_soln.inc"

attributes (device) &
SUBROUTINE save_soln_gpu(q,qold)
  IMPLICIT NONE

  REAL(kind=8), DIMENSION(4), INTENT(IN) :: q
  REAL(kind=8), DIMENSION(4) :: qold
  INTEGER(kind=4) :: i

  DO i = 1, 4
    qold(i) = q(i)
  END DO
END SUBROUTINE


! CUDA kernel function
attributes (global) SUBROUTINE op_cuda_save_soln( &
  & opDat1Devicesave_soln, &
  & opDat2Devicesave_soln, &
  & setSize)

  IMPLICIT NONE

! local variables
  real(8), DEVICE, INTENT(IN) :: opDat1Devicesave_soln(*)
  real(8), DEVICE :: opDat2Devicesave_soln(*)

  INTEGER(kind=4), VALUE :: setSize
  INTEGER(kind=4) :: i1


  DO i1 = threadIdx%x - 1 + (blockIdx%x - 1) * blockDim%x, setSize - 1, blockDim%x * gridDim%x

! kernel call

    CALL save_soln_gpu( &
    & opDat1Devicesave_soln(i1 * (4) + 1: i1 * (4) + 4), &
    & opDat2Devicesave_soln(i1 * (4) + 1: i1 * (4) + 4) &
    & )

  END DO


END SUBROUTINE

attributes (host) SUBROUTINE save_soln_host( userSubroutine, set, &
  & opArg1, &
  & opArg2 )

  IMPLICIT NONE
  character(len=9), INTENT(IN) :: userSubroutine
  TYPE ( op_set ) , INTENT(IN) :: set

  TYPE ( op_arg ) , INTENT(IN) :: opArg1
  TYPE ( op_arg ) , INTENT(IN) :: opArg2

  IF (getHybridGPU()) THEN
    CALL save_soln_host_gpu( userSubroutine, set, &
    & opArg1, &
    & opArg2 )
  ELSE
    CALL save_soln_host_cpu( userSubroutine, set, &
    & opArg1, &
    & opArg2 )
  END IF
END SUBROUTINE


! Stub for GPU execution

attributes (host) SUBROUTINE save_soln_host_gpu( userSubroutine, set, &
  & opArg1, &
  & opArg2 )

  IMPLICIT NONE
  character(len=9), INTENT(IN) :: userSubroutine
  TYPE ( op_set ) , INTENT(IN) :: set

  TYPE ( op_arg ) , INTENT(IN) :: opArg1
  TYPE ( op_arg ) , INTENT(IN) :: opArg2

  TYPE ( op_arg ) , DIMENSION(2) :: opArgArray
  INTEGER(kind=4) :: numberOfOpDats
  INTEGER(kind=4) :: n_upper
  INTEGER(kind=4) :: returnSetKernelTiming


  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat1Devicesave_soln
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat2Devicesave_soln

  INTEGER(kind=4) :: opDat1Cardinality
  INTEGER(kind=4) :: opDat2Cardinality

  INTEGER(kind=4) :: blocksPerGrid
  INTEGER(kind=4) :: threadsPerBlock
  INTEGER(kind=4) :: dynamicSharedMemorySize
  INTEGER(kind=4) :: threadSynchRet
  INTEGER(kind=4), SAVE :: calledTimes
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: i2
  INTEGER(kind=4) :: i10
  INTEGER(kind=4) :: i20

  INTEGER(kind=4) :: istat
  REAL(kind=4) :: accumulatorHostTime
  REAL(kind=4) :: accumulatorKernelTime
  REAL(kind=8) :: KT_double
  TYPE ( cudaEvent )  :: startTimeHost
  TYPE ( cudaEvent )  :: endTimeHost
  TYPE ( cudaEvent )  :: startTimeKernel
  TYPE ( cudaEvent )  :: endTimeKernel

  numberOfOpDats = 2

  opArgArray(1) = opArg1
  opArgArray(2) = opArg2

  n_upper = op_mpi_halo_exchanges_cuda(set%setCPtr,numberOfOpDats,opArgArray)

  istat = cudaEventCreate(startTimeHost)
  istat = cudaEventCreate(endTimeHost)
  istat = cudaEventCreate(startTimeKernel)
  istat = cudaEventCreate(endTimeKernel)

  numberCalledsave_soln = numberCalledsave_soln + 1
  istat = cudaEventRecord(startTimeHost,0)


  blocksPerGrid = 200
  threadsPerBlock = getBlockSize(userSubroutine//C_NULL_CHAR,set%setPtr%size)
  dynamicSharedMemorySize = reductionSize(opArgArray,numberOfOpDats) * threadsPerBlock

  opDat1Cardinality = opArg1%dim * getSetSizeFromOpArg(opArg1)
  opDat2Cardinality = opArg2%dim * getSetSizeFromOpArg(opArg2)


  CALL c_f_pointer(opArg1%data_d,opDat1Devicesave_soln,(/opDat1Cardinality/))
  CALL c_f_pointer(opArg2%data_d,opDat2Devicesave_soln,(/opDat2Cardinality/))

  istat = cudaEventRecord(endTimeHost,0)
  istat = cudaEventSynchronize(endTimeHost)
  istat = cudaEventElapsedTime(accumulatorHostTime,startTimeHost,endTimeHost)

  loopTimeHostsave_soln = loopTimeHostsave_soln + accumulatorHostTime
  istat = cudaEventRecord(startTimeKernel,0)

  CALL op_cuda_save_soln <<<blocksPerGrid,threadsPerBlock,dynamicSharedMemorySize>>>( &
  & opDat1Devicesave_soln, &
  & opDat2Devicesave_soln, &
  set%setPtr%size)

  IF ((n_upper .EQ. 0) .OR. (n_upper .EQ. set%setPtr%core_size)) THEN
    CALL op_mpi_wait_all_cuda(numberOfOpDats,opArgArray)
  END IF


  istat = cudaEventRecord(endTimeKernel,0)
  istat = cudaEventSynchronize(endTimeKernel)
  istat = cudaEventElapsedTime(accumulatorKernelTime,startTimeKernel,endTimeKernel)
  loopTimeKernelsave_soln = loopTimeKernelsave_soln + accumulatorKernelTime


  CALL op_mpi_set_dirtybit_cuda(numberOfOpDats,opArgArray)

  KT_double = REAL(accumulatorKernelTime / 1000.00)
  returnSetKernelTiming = setKernelTime(0 , userSubroutine//C_NULL_CHAR, &
  & KT_double, 0.00000,0.00000)
  calledTimes = calledTimes + 1
END SUBROUTINE


! Stub for CPU execution

SUBROUTINE save_soln_host_cpu( userSubroutine, set, &
  & opArg1, &
  & opArg2 )

  IMPLICIT NONE
  character(kind=c_char,len=*), INTENT(IN) :: userSubroutine
  type ( op_set ) , INTENT(IN) :: set

  type ( op_arg ) , INTENT(IN) :: opArg1
  type ( op_arg ) , INTENT(IN) :: opArg2

  type ( op_arg ) , DIMENSION(2) :: opArgArray
  INTEGER(kind=4) :: numberOfOpDats
  INTEGER(kind=4) :: n_upper
  type ( op_set_core ) , POINTER :: opSetCore

  real(8), POINTER, DIMENSION(:) :: opDat1Local
  INTEGER(kind=4) :: opDat1Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat2Local
  INTEGER(kind=4) :: opDat2Cardinality

  INTEGER(kind=4) :: threadID
  INTEGER(kind=4) :: numberOfThreads
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayStart
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayEnd
  REAL(kind=8) :: startTimeHost
  REAL(kind=8) :: endTimeHost
  REAL(kind=8) :: startTimeKernel
  REAL(kind=8) :: endTimeKernel
  REAL(kind=8) :: accumulatorHostTime
  REAL(kind=8) :: accumulatorKernelTime
  INTEGER(kind=4) :: returnSetKernelTiming
  INTEGER(kind=4) :: sliceStart
  INTEGER(kind=4) :: sliceEnd


  INTEGER(kind=4) :: i1,i2,n

  numberOfOpDats = 2

  opArgArray(1) = opArg1
  opArgArray(2) = opArg2

  n_upper = op_mpi_halo_exchanges(set%setCPtr,numberOfOpDats,opArgArray)
  numberCalledsave_soln = numberCalledsave_soln+ 1

  call date_and_time(values=timeArrayStart)
  startTimeHost = 1.00000 * timeArrayStart(8) + &
  & 1000.00 * timeArrayStart(7) + &
  & 60000 * timeArrayStart(6) + &
  & 3600000 * timeArrayStart(5)


#ifdef _OPENMP
  numberOfThreads = omp_get_max_threads()
#else
  numberOfThreads = 1
#endif

    opSetCore => set%setPtr

    opDat1Cardinality = opArg1%dim * getSetSizeFromOpArg(opArg1)
    opDat2Cardinality = opArg2%dim * getSetSizeFromOpArg(opArg2)
    CALL c_f_pointer(opArg1%data,opDat1Local,(/opDat1Cardinality/))
    CALL c_f_pointer(opArg2%data,opDat2Local,(/opDat2Cardinality/))



    call date_and_time(values=timeArrayEnd)
    endTimeHost = 1.00000 * timeArrayEnd(8) + &
    & 1000 * timeArrayEnd(7)  + &
    & 60000 * timeArrayEnd(6) + &
    & 3600000 * timeArrayEnd(5)

    accumulatorHostTime = endTimeHost - startTimeHost
    loopTimeHostsave_soln = loopTimeHostsave_soln + accumulatorHostTime

    call date_and_time(values=timeArrayStart)
    startTimeKernel = 1.00000 * timeArrayStart(8) + &
    & 1000 * timeArrayStart(7) + &
    & 60000 * timeArrayStart(6) + &
    & 3600000 * timeArrayStart(5)

    !$OMP PARALLEL DO private (sliceStart,sliceEnd,i1,threadID)
    DO i1 = 0, numberOfThreads - 1, 1
      sliceStart = opSetCore%size * i1 / numberOfThreads
      sliceEnd = opSetCore%size * (i1 + 1) / numberOfThreads
      threadID = omp_get_thread_num()
! kernel call
      DO n = sliceStart, sliceEnd - 1, 1
      CALL save_soln( &
        & opDat1Local(1 + n * (4) : n * (4) + 4), &
        & opDat2Local(1 + n * (4) : n * (4) + 4) &
        & )
      END DO
    END DO
    !$OMP END PARALLEL DO
    IF ((n_upper .EQ. 0) .OR. (n_upper .EQ. opSetCore%core_size)) THEN
      CALL op_mpi_wait_all(numberOfOpDats,opArgArray)
    END IF


    call date_and_time(values=timeArrayEnd)
    endTimeKernel = 1.00000 * timeArrayEnd(8) + &
    & 1000 * timeArrayEnd(7) + &
    & 60000 * timeArrayEnd(6) + &
    & 3600000 * timeArrayEnd(5)

    accumulatorKernelTime = endTimeKernel - startTimeKernel
    loopTimeKernelsave_soln = loopTimeKernelsave_soln + accumulatorKernelTime

    call date_and_time(values=timeArrayStart)
    startTimeHost = 1.00000 * timeArrayStart(8) + &
    & 1000.00 * timeArrayStart(7) + &
    & 60000 * timeArrayStart(6) + &
    & 3600000 * timeArrayStart(5)

    CALL op_mpi_set_dirtybit(numberOfOpDats,opArgArray)

    call date_and_time(values=timeArrayEnd)
    endTimeHost = 1.00000 * timeArrayEnd(8) + &
    1000 * timeArrayEnd(7) + &
    60000 * timeArrayEnd(6) + &
    3600000 * timeArrayEnd(5)

    accumulatorHostTime = endTimeHost - startTimeHost
    loopTimeHostsave_soln = loopTimeHostsave_soln + accumulatorHostTime

    returnSetKernelTiming = setKernelTime(0 , userSubroutine//C_NULL_CHAR, &
    & accumulatorKernelTime / 1000.00,0.00000,0.00000)
  END SUBROUTINE
  END MODULE
