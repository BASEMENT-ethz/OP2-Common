!
! auto-generated by op2.py on 2013-04-11 12:35
!

MODULE ADT_CALC_MODULE
USE OP2_FORTRAN_DECLARATIONS
USE OP2_FORTRAN_RT_SUPPORT
USE ISO_C_BINDING
USE OP2_CONSTANTS
USE CUDAFOR
USE CUDACONFIGURATIONPARAMS


! variable declarations
real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat1Deviceadt_calc
INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: opMap1Deviceadt_calc
real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat5Deviceadt_calc
real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat6Deviceadt_calc


REAL(kind=4) :: loopTimeHostadt_calc
REAL(kind=4) :: loopTimeKerneladt_calc
INTEGER(kind=4) :: numberCalledadt_calc

TYPE ( c_ptr )  :: planRet_adt_calc

CONTAINS

! user function
attributes (device) &
#include "adt_calc.inc"


! CUDA kernel function
attributes (global) SUBROUTINE op_cuda_adt_calc( &
  & pblkMap, &
  & poffset, &
  & pnelems, &
  & pnthrcol, &
  & pthrcol, &
  & setSize, &
  & blockOffset)

  IMPLICIT NONE

! local variables
  INTEGER(kind=4), DIMENSION(0:*), DEVICE :: pblkMap
  INTEGER(kind=4), DIMENSION(0:*), DEVICE :: poffset
  INTEGER(kind=4), DIMENSION(0:*), DEVICE :: pnelems
  INTEGER(kind=4), DIMENSION(0:*), DEVICE :: pnthrcol
  INTEGER(kind=4), DIMENSION(0:*), DEVICE :: pthrcol
  INTEGER(kind=4), VALUE :: blockOffset
  INTEGER(kind=4), VALUE :: setSize


  INTEGER(kind=4), SHARED :: numOfColours
  INTEGER(kind=4), SHARED :: numberOfActiveThreadsCeiling
  INTEGER(kind=4), SHARED :: blockID
  INTEGER(kind=4), SHARED :: threadBlockOffset
  INTEGER(kind=4), SHARED :: numberOfActiveThreads
  INTEGER(kind=4) :: colour1
  INTEGER(kind=4) :: colour2
  INTEGER(kind=4) :: n1
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: i2
  IF (threadIdx%x - 1 .EQ. 0) THEN
    blockID = pblkMap(blockIdx%x - 1 + blockOffset)
    numberOfActiveThreads = pnelems(blockID)
    numberOfActiveThreadsCeiling = blockDim%x * (1 + (numberOfActiveThreads - 1) / blockDim%x)
    numOfColours = pnthrcol(blockID)
    threadBlockOffset = poffset(blockID)

  END IF

  CALL syncthreads()

  i1 = threadIdx%x - 1

  DO WHILE (i1 < numberOfActiveThreadsCeiling )
    colour2 = -1
    IF (i1 < numberOfActiveThreads) THEN

! kernel call
      CALL adt_calc( &
      & opDat1Deviceadt_calc(1 + opMap1Deviceadt_calc(1 + i1 + threadBlockOffset + setSize * 0) * (2):     opMap1Deviceadt_calc(1 + i1 + threadBlockOffset + setSize * 0) * (2) + 2), &
      & opDat1Deviceadt_calc(1 + opMap1Deviceadt_calc(1 + i1 + threadBlockOffset + setSize * 1) * (2):     opMap1Deviceadt_calc(1 + i1 + threadBlockOffset + setSize * 1) * (2) + 2), &
      & opDat1Deviceadt_calc(1 + opMap1Deviceadt_calc(1 + i1 + threadBlockOffset + setSize * 2) * (2):     opMap1Deviceadt_calc(1 + i1 + threadBlockOffset + setSize * 2) * (2) + 2), &
      & opDat1Deviceadt_calc(1 + opMap1Deviceadt_calc(1 + i1 + threadBlockOffset + setSize * 3) * (2):     opMap1Deviceadt_calc(1 + i1 + threadBlockOffset + setSize * 3) * (2) + 2), &
      & opDat5Deviceadt_calc((i1 + threadBlockOffset) * (4) +1:(i1 + threadBlockOffset) * (4) + (4)), &
      & opDat6Deviceadt_calc((i1 + threadBlockOffset) * (1) +1) &
      & )
      colour2 = pthrcol(i1 + threadBlockOffset)
    END IF
    DO colour1 = 0, numOfColours - 1, 1
      IF (colour2 .EQ. colour1) THEN
      END IF
      CALL syncthreads()
    END DO
    i1 = i1 + blockDim%x
  END DO



END SUBROUTINE

attributes (host) SUBROUTINE adt_calc_host( userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4, &
  & opArg5, &
  & opArg6 )

  IMPLICIT NONE
  character(len=8), INTENT(IN) :: userSubroutine
  TYPE ( op_set ) , INTENT(IN) :: set

  TYPE ( op_arg ) , INTENT(IN) :: opArg1
  TYPE ( op_arg ) , INTENT(IN) :: opArg2
  TYPE ( op_arg ) , INTENT(IN) :: opArg3
  TYPE ( op_arg ) , INTENT(IN) :: opArg4
  TYPE ( op_arg ) , INTENT(IN) :: opArg5
  TYPE ( op_arg ) , INTENT(IN) :: opArg6

  TYPE ( op_arg ) , DIMENSION(6) :: opArgArray
  INTEGER(kind=4) :: numberOfOpDats
  INTEGER(kind=4) :: n_upper
  INTEGER(kind=4) :: returnSetKernelTiming


  INTEGER(kind=4) :: opDat1Cardinality
  INTEGER(kind=4) :: opMap1Cardinality
  INTEGER(kind=4) :: opDat5Cardinality
  INTEGER(kind=4) :: opDat6Cardinality

  TYPE ( op_plan ) , POINTER :: actualPlan_adt_calc

  INTEGER(kind=4) :: blocksPerGrid
  INTEGER(kind=4) :: threadsPerBlock
  INTEGER(kind=4) :: dynamicSharedMemorySize
  INTEGER(kind=4) :: threadSynchRet
  INTEGER(kind=4), DIMENSION(1:6) :: opDatArray
  INTEGER(kind=4), DIMENSION(1:6) :: mappingIndicesArray
  INTEGER(kind=4), DIMENSION(1:6) :: mappingArray
  INTEGER(kind=4), DIMENSION(1:6) :: accessDescriptorArray
  INTEGER(kind=4), DIMENSION(1:6) :: indirectionDescriptorArray

  INTEGER(kind=4) :: mappingArray1Size

  INTEGER(kind=4) :: numberOfIndirectOpDats
  INTEGER(kind=4) :: blockOffset
  INTEGER(kind=4) :: pblkMapSize
  INTEGER(kind=4) :: poffsetSize
  INTEGER(kind=4) :: pnelemsSize
  INTEGER(kind=4) :: pnthrcolSize
  INTEGER(kind=4) :: pthrcolSize
  INTEGER(kind=4), POINTER, DIMENSION(:) :: ncolblk
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: pblkMap
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: poffset
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: pnelems
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: pnthrcol
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: pthrcol
  INTEGER(kind=4) :: partitionSize
  INTEGER(kind=4) :: blockSize
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: i2
  INTEGER(kind=4), SAVE :: calledTimes

  INTEGER(kind=4) :: istat
  REAL(kind=4) :: accumulatorHostTime
  REAL(kind=4) :: accumulatorKernelTime
  REAL(kind=8) :: KT_double
  TYPE ( cudaEvent )  :: startTimeHost
  TYPE ( cudaEvent )  :: endTimeHost
  TYPE ( cudaEvent )  :: startTimeKernel
  TYPE ( cudaEvent )  :: endTimeKernel

  numberOfOpDats = 6

  opArgArray(1) = opArg1
  opArgArray(2) = opArg2
  opArgArray(3) = opArg3
  opArgArray(4) = opArg4
  opArgArray(5) = opArg5
  opArgArray(6) = opArg6

  n_upper = op_mpi_halo_exchanges_cuda(set%setCPtr,numberOfOpDats,opArgArray)

  istat = cudaEventCreate(startTimeHost)
  istat = cudaEventCreate(endTimeHost)
  istat = cudaEventCreate(startTimeKernel)
  istat = cudaEventCreate(endTimeKernel)

  numberCalledadt_calc = numberCalledadt_calc + 1
  istat = cudaEventRecord(startTimeHost,0)

  indirectionDescriptorArray(1) = 0
  indirectionDescriptorArray(2) = 0
  indirectionDescriptorArray(3) = 0
  indirectionDescriptorArray(4) = 0
  indirectionDescriptorArray(5) = -1
  indirectionDescriptorArray(6) = -1

  numberOfIndirectOpDats = 1

  partitionSize = getPartitionSize(userSubroutine//C_NULL_CHAR,set%setPtr%size)

  planRet_adt_calc = FortranPlanCaller( &
  & userSubroutine//C_NULL_CHAR, &
  & set%setCPtr, &
  & partitionSize, &
  & numberOfOpDats, &
  & opArgArray, &
  & numberOfIndirectOpDats, &
  & indirectionDescriptorArray)

  opDat1Cardinality = opArg1%dim * getSetSizeFromOpArg(opArg1)
  opMap1Cardinality = set%setPtr%size * getMapDimFromOpArg(opArg1)
  opDat5Cardinality = opArg5%dim * getSetSizeFromOpArg(opArg5)
  opDat6Cardinality = opArg6%dim * getSetSizeFromOpArg(opArg6)


  CALL c_f_pointer(opArg1%data_d,opDat1Deviceadt_calc,(/opDat1Cardinality/))
  CALL c_f_pointer(opArg1%map_data_d,opMap1Deviceadt_calc,(/opMap1Cardinality/))
  CALL c_f_pointer(opArg5%data_d,opDat5Deviceadt_calc,(/opDat5Cardinality/))
  CALL c_f_pointer(opArg6%data_d,opDat6Deviceadt_calc,(/opDat6Cardinality/))

  CALL c_f_pointer(planRet_adt_calc,actualPlan_adt_calc)
  CALL c_f_pointer(actualPlan_adt_calc%ncolblk,ncolblk,(/set%setPtr%size/))
  pblkMapSize = actualPlan_adt_calc%nblocks
  CALL c_f_pointer(actualPlan_adt_calc%blkmap,pblkMap,(/pblkMapSize/))
  poffsetSize = actualPlan_adt_calc%nblocks
  CALL c_f_pointer(actualPlan_adt_calc%offset,poffset,(/poffsetSize/))
  pnelemsSize = actualPlan_adt_calc%nblocks
  CALL c_f_pointer(actualPlan_adt_calc%nelems,pnelems,(/pnelemsSize/))
  pnthrcolSize = actualPlan_adt_calc%nblocks
  CALL c_f_pointer(actualPlan_adt_calc%nthrcol,pnthrcol,(/pnthrcolSize/))
  pthrcolSize = set%setPtr%size
  CALL c_f_pointer(actualPlan_adt_calc%thrcol,pthrcol,(/pthrcolSize/))

  istat = cudaEventRecord(endTimeHost,0)
  istat = cudaEventSynchronize(endTimeHost)
  istat = cudaEventElapsedTime(accumulatorHostTime,startTimeHost,endTimeHost)

  loopTimeHostadt_calc = loopTimeHostadt_calc + accumulatorHostTime
  istat = cudaEventRecord(startTimeKernel,0)

  blockOffset = 0

  threadsPerBlock = getBlockSize(userSubroutine//C_NULL_CHAR,set%setPtr%size)
  DO i2 = 0, actualPlan_adt_calc%ncolors - 1, 1
    IF (i2 .EQ. actualPlan_adt_calc%ncolors_core) THEN
      CALL op_mpi_wait_all_cuda(numberOfOpDats,opArgArray)
    END IF

    blocksPerGrid = ncolblk(i2 + 1)
    dynamicSharedMemorySize = reductionSize(opArgArray,numberOfOpDats) * threadsPerBlock

    CALL op_cuda_adt_calc <<<blocksPerGrid,threadsPerBlock,dynamicSharedMemorySize>>> &
    & (pblkMap, &
    & poffset,pnelems,pnthrcol,pthrcol,set%setPtr%size, blockOffset)

    threadSynchRet = cudaThreadSynchronize()
    blockOffset = blockOffset + blocksPerGrid
  END DO

  istat = cudaEventRecord(endTimeKernel,0)
  istat = cudaEventSynchronize(endTimeKernel)
  istat = cudaEventElapsedTime(accumulatorKernelTime,startTimeKernel,endTimeKernel)
  loopTimeKerneladt_calc = loopTimeKerneladt_calc + accumulatorKernelTime

  istat = cudaEventRecord(startTimeHost,0)
  istat = cudaEventRecord(endTimeHost,0)
  istat = cudaEventSynchronize(endTimeHost)
  istat = cudaEventElapsedTime(accumulatorHostTime,startTimeHost,endTimeHost)
  loopTimeHostadt_calc = loopTimeHostadt_calc + accumulatorHostTime

  KT_double = REAL(accumulatorKernelTime / 1000.00)
  returnSetKernelTiming = setKernelTime(1 , userSubroutine//C_NULL_CHAR, &
  & KT_double, actualPlan_adt_calc%transfer,actualPlan_adt_calc%transfer2)
END SUBROUTINE
END MODULE ADT_CALC_MODULE
