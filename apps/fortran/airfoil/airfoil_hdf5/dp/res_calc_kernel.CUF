!
! auto-generated by op2.py on 2013-03-06 10:59
!

MODULE RES_CALC_MODULE
USE OP2_FORTRAN_DECLARATIONS
USE OP2_FORTRAN_RT_SUPPORT
USE ISO_C_BINDING
USE OP2_CONSTANTS
USE CUDAFOR
USE CUDACONFIGURATIONPARAMS


! variable declarations
TYPE  :: res_calc_opDatDimensions
  INTEGER(kind=4) :: opDat1Dimension
  INTEGER(kind=4) :: opDat2Dimension
  INTEGER(kind=4) :: opDat3Dimension
  INTEGER(kind=4) :: opDat4Dimension
  INTEGER(kind=4) :: opDat5Dimension
  INTEGER(kind=4) :: opDat6Dimension
  INTEGER(kind=4) :: opDat7Dimension
  INTEGER(kind=4) :: opDat8Dimension
END TYPE res_calc_opDatDimensions

TYPE  :: res_calc_opDatCardinalities
  INTEGER(kind=4) :: opDat1Cardinality
  INTEGER(kind=4) :: opDat3Cardinality
  INTEGER(kind=4) :: opDat5Cardinality
  INTEGER(kind=4) :: opDat7Cardinality
  INTEGER(kind=4) :: ind_maps1Size
  INTEGER(kind=4) :: ind_maps3Size
  INTEGER(kind=4) :: ind_maps5Size
  INTEGER(kind=4) :: ind_maps7Size
  INTEGER(kind=4) :: mappingArray1Size
  INTEGER(kind=4) :: mappingArray2Size
  INTEGER(kind=4) :: mappingArray3Size
  INTEGER(kind=4) :: mappingArray4Size
  INTEGER(kind=4) :: mappingArray5Size
  INTEGER(kind=4) :: mappingArray6Size
  INTEGER(kind=4) :: mappingArray7Size
  INTEGER(kind=4) :: mappingArray8Size
  INTEGER(kind=4) :: pblkMapSize
  INTEGER(kind=4) :: pindOffsSize
  INTEGER(kind=4) :: pindSizesSize
  INTEGER(kind=4) :: pnelemsSize
  INTEGER(kind=4) :: pnthrcolSize
  INTEGER(kind=4) :: poffsetSize
  INTEGER(kind=4) :: pthrcolSize
END TYPE res_calc_opDatCardinalities

REAL(kind=4) :: loopTimeHostres_calc
REAL(kind=4) :: loopTimeKernelres_calc
INTEGER(kind=4) :: numberCalledres_calc

real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat1Deviceres_calc
real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat3Deviceres_calc
real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat5Deviceres_calc
real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat7Deviceres_calc
TYPE ( c_ptr )  :: planRet_res_calc
INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: ind_maps1_res_calc
INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: ind_maps2_res_calc
INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: ind_maps3_res_calc
INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: ind_maps4_res_calc
INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: ind_maps5_res_calc
INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: ind_maps6_res_calc
INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: ind_maps7_res_calc
INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: ind_maps8_res_calc
INTEGER(kind=2), DIMENSION(:), DEVICE, ALLOCATABLE :: mappingArray1_res_calc
INTEGER(kind=2), DIMENSION(:), DEVICE, ALLOCATABLE :: mappingArray2_res_calc
INTEGER(kind=2), DIMENSION(:), DEVICE, ALLOCATABLE :: mappingArray3_res_calc
INTEGER(kind=2), DIMENSION(:), DEVICE, ALLOCATABLE :: mappingArray4_res_calc
INTEGER(kind=2), DIMENSION(:), DEVICE, ALLOCATABLE :: mappingArray5_res_calc
INTEGER(kind=2), DIMENSION(:), DEVICE, ALLOCATABLE :: mappingArray6_res_calc
INTEGER(kind=2), DIMENSION(:), DEVICE, ALLOCATABLE :: mappingArray7_res_calc
INTEGER(kind=2), DIMENSION(:), DEVICE, ALLOCATABLE :: mappingArray8_res_calc

CONTAINS

! user function
attributes (device) &
#include "res_calc.inc"


! CUDA kernel function
attributes (global) SUBROUTINE op_cuda_res_calc( &
  & opDatDimensions, &
  & opDatCardinalities, &
  & pindSizes, &
  & pindOffs, &
  & pblkMap, &
  & poffset, &
  & pnelems, &
  & pnthrcol, &
  & pthrcol, &
  & blockOffset)

  IMPLICIT NONE

! local variables
  TYPE ( res_calc_opDatDimensions ) , DEVICE :: opDatDimensions
  TYPE ( res_calc_opDatCardinalities ) , DEVICE :: opDatCardinalities
  INTEGER(kind=4), DIMENSION(0:opDatCardinalities%pindSizesSize - 1), DEVICE :: pindSizes
  INTEGER(kind=4), DIMENSION(0:opDatCardinalities%pindOffsSize - 1), DEVICE :: pindOffs
  INTEGER(kind=4), DIMENSION(0:opDatCardinalities%pblkMapSize - 1), DEVICE :: pblkMap
  INTEGER(kind=4), DIMENSION(0:opDatCardinalities%poffsetSize - 1), DEVICE :: poffset
  INTEGER(kind=4), DIMENSION(0:opDatCardinalities%pnelemsSize - 1), DEVICE :: pnelems
  INTEGER(kind=4), DIMENSION(0:opDatCardinalities%pnthrcolSize - 1), DEVICE :: pnthrcol
  INTEGER(kind=4), DIMENSION(0:opDatCardinalities%pthrcolSize - 1), DEVICE :: pthrcol
  INTEGER(kind=4), VALUE :: blockOffset

  REAL(kind=8), DIMENSION(0:4-1) :: opDat7Local
  INTEGER(kind=4) :: opDat7Map
  REAL(kind=8), DIMENSION(0:4-1) :: opDat8Local
  INTEGER(kind=4) :: opDat8Map

  INTEGER(kind=4) :: opDat1nBytes
  INTEGER(kind=4) :: opDat3nBytes
  INTEGER(kind=4) :: opDat5nBytes
  INTEGER(kind=4) :: opDat7nBytes

  INTEGER(kind=4) :: opDat1RoundUp
  INTEGER(kind=4) :: opDat3RoundUp
  INTEGER(kind=4) :: opDat5RoundUp
  INTEGER(kind=4) :: opDat7RoundUp

  INTEGER(kind=4), SHARED :: opDat1SharedIndirectionSize
  INTEGER(kind=4), SHARED :: opDat3SharedIndirectionSize
  INTEGER(kind=4), SHARED :: opDat5SharedIndirectionSize
  INTEGER(kind=4), SHARED :: opDat7SharedIndirectionSize

  REAL(kind=8), DIMENSION(0:*), SHARED :: sharedFloat8
  INTEGER(kind=4) :: sharedOffsetFloat8
  INTEGER(kind=4), SHARED :: numOfColours
  INTEGER(kind=4), SHARED :: numberOfActiveThreadsCeiling
  INTEGER(kind=4), SHARED :: sharedMemoryOffset
  INTEGER(kind=4), SHARED :: blockID
  INTEGER(kind=4), SHARED :: numberOfActiveThreads
  INTEGER(kind=4) :: moduloResult
  INTEGER(kind=4) :: nbytes
  INTEGER(kind=4) :: colour1
  INTEGER(kind=4) :: colour2
  INTEGER(kind=4) :: n1
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: i2
  IF (threadIdx%x - 1 .EQ. 0) THEN
    blockID = pblkMap(blockIdx%x - 1 + blockOffset)
    numberOfActiveThreads = pnelems(blockID)
    numberOfActiveThreadsCeiling = blockDim%x * (1 + (numberOfActiveThreads - 1) / blockDim%x)
    numOfColours = pnthrcol(blockID)
    sharedMemoryOffset = poffset(blockID)

    opDat1SharedIndirectionSize = pindSizes(0 + blockID * 4)
    opDat3SharedIndirectionSize = pindSizes(1 + blockID * 4)
    opDat5SharedIndirectionSize = pindSizes(2 + blockID * 4)
    opDat7SharedIndirectionSize = pindSizes(3 + blockID * 4)
  END IF

  CALL syncthreads()

  opDat1RoundUp = opDat1SharedIndirectionSize * opDatDimensions%opDat1Dimension
  opDat3RoundUp = opDat3SharedIndirectionSize * opDatDimensions%opDat3Dimension
  opDat5RoundUp = opDat5SharedIndirectionSize * opDatDimensions%opDat5Dimension
  opDat7RoundUp = opDat7SharedIndirectionSize * opDatDimensions%opDat7Dimension

  opDat1nBytes = 0
  opDat3nBytes = opDat1nBytes * 8 / 8 + opDat1RoundUp * 8 / 8
  opDat5nBytes = opDat3nBytes * 8 / 8 + opDat3RoundUp * 8 / 8
  opDat7nBytes = opDat5nBytes * 8 / 8 + opDat5RoundUp * 8 / 8

  i1 = threadIdx%x - 1
  n1 = opDat1SharedIndirectionSize * opDatDimensions%opDat1Dimension
  DO WHILE (i1 < n1 )
    moduloResult = mod(i1,opDatDimensions%opDat1Dimension)
    sharedFloat8(opDat1nBytes + i1) = opDat1Deviceres_calc( &
    & moduloResult + ind_maps1_res_calc(0 + (pindOffs(0 + blockID * 4) + i1 / &
    & opDatDimensions%opDat1Dimension) + 1) * &
    & opDatDimensions%opDat1Dimension + 1)
    i1 = i1 + blockDim%x
  END DO

  i1 = threadIdx%x - 1
  n1 = opDat3SharedIndirectionSize * opDatDimensions%opDat3Dimension
  DO WHILE (i1 < n1 )
    moduloResult = mod(i1,opDatDimensions%opDat3Dimension)
    sharedFloat8(opDat3nBytes + i1) = opDat3Deviceres_calc( &
    & moduloResult + ind_maps3_res_calc(0 + (pindOffs(1 + blockID * 4) + i1 / &
    & opDatDimensions%opDat3Dimension) + 1) * &
    & opDatDimensions%opDat3Dimension + 1)
    i1 = i1 + blockDim%x
  END DO

  i1 = threadIdx%x - 1
  n1 = opDat5SharedIndirectionSize * opDatDimensions%opDat5Dimension
  DO WHILE (i1 < n1 )
    moduloResult = mod(i1,opDatDimensions%opDat5Dimension)
    sharedFloat8(opDat5nBytes + i1) = opDat5Deviceres_calc( &
    & moduloResult + ind_maps5_res_calc(0 + (pindOffs(2 + blockID * 4) + i1 / &
    & opDatDimensions%opDat5Dimension) + 1) * &
    & opDatDimensions%opDat5Dimension + 1)
    i1 = i1 + blockDim%x
  END DO

  i1 = threadIdx%x - 1
  n1 = opDat7SharedIndirectionSize * opDatDimensions%opDat7Dimension
  DO WHILE (i1 < n1 )
    sharedFloat8(opDat7nBytes + i1) = 0
    i1 = i1 + blockDim%x
  END DO

  CALL syncthreads()
  i1 = threadIdx%x - 1

  DO WHILE (i1 < numberOfActiveThreadsCeiling )
    colour2 = -1
    IF (i1 < numberOfActiveThreads) THEN
      DO i2 = 0, opDatDimensions%opDat7Dimension - 1, 1
        opDat7Local(i2) = 0
      END DO
      DO i2 = 0, opDatDimensions%opDat8Dimension - 1, 1
        opDat8Local(i2) = 0
      END DO

! kernel call
      CALL res_calc( &
      & sharedFloat8(opDat1nBytes + mappingArray1_res_calc(i1 + sharedMemoryOffset + 1) * opDatDimensions%opDat1Dimension), &
      & sharedFloat8(opDat1nBytes + mappingArray2_res_calc(i1 + sharedMemoryOffset + 1) * opDatDimensions%opDat2Dimension), &
      & sharedFloat8(opDat3nBytes + mappingArray3_res_calc(i1 + sharedMemoryOffset + 1) * opDatDimensions%opDat3Dimension), &
      & sharedFloat8(opDat3nBytes + mappingArray4_res_calc(i1 + sharedMemoryOffset + 1) * opDatDimensions%opDat4Dimension), &
      & sharedFloat8(opDat5nBytes + mappingArray5_res_calc(i1 + sharedMemoryOffset + 1) * opDatDimensions%opDat5Dimension), &
      & sharedFloat8(opDat5nBytes + mappingArray6_res_calc(i1 + sharedMemoryOffset + 1) * opDatDimensions%opDat6Dimension), &
      & opDat7Local, &
      & opDat8Local &
      & )
      colour2 = pthrcol(i1 + sharedMemoryOffset)
    END IF

    opDat7Map = mappingArray7_res_calc(i1 + sharedMemoryOffset + 1)
    opDat8Map = mappingArray8_res_calc(i1 + sharedMemoryOffset + 1)

    DO colour1 = 0, numOfColours - 1, 1
      IF (colour2 .EQ. colour1) THEN
        DO i2 = 0, opDatDimensions%opDat7Dimension - 1, 1
          sharedFloat8(opDat7nBytes + (i2 + opDat7Map * opDatDimensions%opDat7Dimension)) = &
          & sharedFloat8(opDat7nBytes + (i2 + opDat7Map * opDatDimensions%opDat7Dimension)) + opDat7Local(i2)
        END DO

        DO i2 = 0, opDatDimensions%opDat8Dimension - 1, 1
          sharedFloat8(opDat7nBytes + (i2 + opDat8Map * opDatDimensions%opDat8Dimension)) = &
          & sharedFloat8(opDat7nBytes + (i2 + opDat8Map * opDatDimensions%opDat8Dimension)) + opDat8Local(i2)
        END DO

      END IF
      CALL syncthreads()
    END DO
    i1 = i1 + blockDim%x
  END DO

  CALL syncthreads()
  i1 = threadIdx%x - 1

  DO WHILE (i1 < opDat7SharedIndirectionSize * opDatDimensions%opDat7Dimension )
    moduloResult = mod(i1,opDatDimensions%opDat7Dimension)
    opDat7Deviceres_calc(moduloResult + ind_maps7_res_calc &
    & (0 + (pindOffs(3 + blockID * 4) + i1 / opDatDimensions%opDat7Dimension) + 1) * &
    & opDatDimensions%opDat7Dimension + 1) = &
    & opDat7Deviceres_calc(moduloResult + ind_maps7_res_calc &
    & (0 + (pindOffs(3 + blockID * 4) + i1 / opDatDimensions%opDat7Dimension) + 1) * &
    & opDatDimensions%opDat7Dimension + 1) + &
    & sharedFloat8(opDat7nBytes + i1)
    i1 = i1 + blockDim%x
  END DO


END SUBROUTINE

attributes (host) SUBROUTINE res_calc_host( userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4, &
  & opArg5, &
  & opArg6, &
  & opArg7, &
  & opArg8 )

  IMPLICIT NONE
  character(len=8), INTENT(IN) :: userSubroutine
  TYPE ( op_set ) , INTENT(IN) :: set

  TYPE ( op_arg ) , INTENT(IN) :: opArg1
  TYPE ( op_arg ) , INTENT(IN) :: opArg2
  TYPE ( op_arg ) , INTENT(IN) :: opArg3
  TYPE ( op_arg ) , INTENT(IN) :: opArg4
  TYPE ( op_arg ) , INTENT(IN) :: opArg5
  TYPE ( op_arg ) , INTENT(IN) :: opArg6
  TYPE ( op_arg ) , INTENT(IN) :: opArg7
  TYPE ( op_arg ) , INTENT(IN) :: opArg8

  TYPE ( op_arg ) , DIMENSION(8) :: opArgArray
  INTEGER(kind=4) :: numberOfOpDats
  INTEGER(kind=4) :: returnMPIHaloExchange
  INTEGER(kind=4) :: returnSetKernelTiming

  TYPE ( res_calc_opDatDimensions ) , DEVICE :: opDatDimensions
  TYPE ( res_calc_opDatCardinalities ) , DEVICE :: opDatCardinalities

  INTEGER(kind=4) :: opDat1Cardinality
  INTEGER(kind=4) :: opDat3Cardinality
  INTEGER(kind=4) :: opDat5Cardinality
  INTEGER(kind=4) :: opDat7Cardinality

  TYPE ( op_plan ) , POINTER :: actualPlan_res_calc
  TYPE ( c_devptr ) , POINTER, DIMENSION(:) :: pindMaps
  TYPE ( c_devptr ) , POINTER, DIMENSION(:) :: pmaps

  INTEGER(kind=4) :: pindMapsSize
  INTEGER(kind=4) :: blocksPerGrid
  INTEGER(kind=4) :: threadsPerBlock
  INTEGER(kind=4) :: dynamicSharedMemorySize
  INTEGER(kind=4) :: threadSynchRet
  INTEGER(kind=4), DIMENSION(1:8) :: opDatArray
  INTEGER(kind=4), DIMENSION(1:8) :: mappingIndicesArray
  INTEGER(kind=4), DIMENSION(1:8) :: mappingArray
  INTEGER(kind=4), DIMENSION(1:8) :: accessDescriptorArray
  INTEGER(kind=4), DIMENSION(1:8) :: indirectionDescriptorArray

  INTEGER(kind=4) :: mappingArray1Size
  INTEGER(kind=4) :: mappingArray2Size
  INTEGER(kind=4) :: mappingArray3Size
  INTEGER(kind=4) :: mappingArray4Size
  INTEGER(kind=4) :: mappingArray5Size
  INTEGER(kind=4) :: mappingArray6Size
  INTEGER(kind=4) :: mappingArray7Size
  INTEGER(kind=4) :: mappingArray8Size

  INTEGER(kind=4) :: numberOfIndirectOpDats
  INTEGER(kind=4) :: blockOffset
  INTEGER(kind=4) :: pindSizesSize
  INTEGER(kind=4) :: pindOffsSize
  INTEGER(kind=4) :: pblkMapSize
  INTEGER(kind=4) :: poffsetSize
  INTEGER(kind=4) :: pnelemsSize
  INTEGER(kind=4) :: pnthrcolSize
  INTEGER(kind=4) :: pthrcolSize
  INTEGER(kind=4), POINTER, DIMENSION(:) :: ncolblk
  INTEGER(kind=4), POINTER, DIMENSION(:) :: pnindirect
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: pindSizes
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: pindOffs
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: pblkMap
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: poffset
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: pnelems
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: pnthrcol
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: pthrcol
  INTEGER(kind=4) :: partitionSize
  INTEGER(kind=4) :: blockSize
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: i2
  INTEGER(kind=4), SAVE :: calledTimes
  INTEGER(kind=4) :: returnDumpOpDat

  INTEGER(kind=4) :: istat
  REAL(kind=4) :: accumulatorHostTime
  REAL(kind=4) :: accumulatorKernelTime
  REAL(kind=8) :: KT_double
  TYPE ( cudaEvent )  :: startTimeHost
  TYPE ( cudaEvent )  :: endTimeHost
  TYPE ( cudaEvent )  :: startTimeKernel
  TYPE ( cudaEvent )  :: endTimeKernel

  numberOfOpDats = 8

  opArgArray(1) = opArg1
  opArgArray(2) = opArg2
  opArgArray(3) = opArg3
  opArgArray(4) = opArg4
  opArgArray(5) = opArg5
  opArgArray(6) = opArg6
  opArgArray(7) = opArg7
  opArgArray(8) = opArg8

  returnMPIHaloExchange = op_mpi_halo_exchanges(set%setCPtr,numberOfOpDats,opArgArray)
  IF (returnMPIHaloExchange .EQ. 0) THEN
    CALL op_mpi_wait_all(numberOfOpDats,opArgArray)
    CALL op_mpi_set_dirtybit(numberOfOpDats,opArgArray)
    RETURN
  END IF

  istat = cudaEventCreate(startTimeHost)
  istat = cudaEventCreate(endTimeHost)
  istat = cudaEventCreate(startTimeKernel)
  istat = cudaEventCreate(endTimeKernel)

  numberCalledres_calc = numberCalledres_calc + 1
  istat = cudaEventRecord(startTimeHost,0)

  indirectionDescriptorArray(1) = 0
  indirectionDescriptorArray(2) = 0
  indirectionDescriptorArray(3) = 1
  indirectionDescriptorArray(4) = 1
  indirectionDescriptorArray(5) = 2
  indirectionDescriptorArray(6) = 2
  indirectionDescriptorArray(7) = 3
  indirectionDescriptorArray(8) = 3

  numberOfIndirectOpDats = 4

  partitionSize = getPartitionSize(userSubroutine//C_NULL_CHAR,set%setPtr%size)

  planRet_res_calc = FortranPlanCaller( &
  & userSubroutine//C_NULL_CHAR, &
  & set%setCPtr, &
  & partitionSize, &
  & numberOfOpDats, &
  & opArgArray, &
  & numberOfIndirectOpDats, &
  & indirectionDescriptorArray)

  opDatCardinalities%opDat1Cardinality = opArg1%dim * getSetSizeFromOpArg(opArg1)
  opDatCardinalities%opDat3Cardinality = opArg3%dim * getSetSizeFromOpArg(opArg3)
  opDatCardinalities%opDat5Cardinality = opArg5%dim * getSetSizeFromOpArg(opArg5)
  opDatCardinalities%opDat7Cardinality = opArg7%dim * getSetSizeFromOpArg(opArg7)

  opDatDimensions%opDat1Dimension = opArg1%dim
  opDatDimensions%opDat2Dimension = opArg2%dim
  opDatDimensions%opDat3Dimension = opArg3%dim
  opDatDimensions%opDat4Dimension = opArg4%dim
  opDatDimensions%opDat5Dimension = opArg5%dim
  opDatDimensions%opDat6Dimension = opArg6%dim
  opDatDimensions%opDat7Dimension = opArg7%dim
  opDatDimensions%opDat8Dimension = opArg8%dim

  opDat1Cardinality = opArg1%dim * getSetSizeFromOpArg(opArg1)
  opDat3Cardinality = opArg3%dim * getSetSizeFromOpArg(opArg3)
  opDat5Cardinality = opArg5%dim * getSetSizeFromOpArg(opArg5)
  opDat7Cardinality = opArg7%dim * getSetSizeFromOpArg(opArg7)

  CALL c_f_pointer(opArg1%data_d,opDat1Deviceres_calc,(/opDat1Cardinality/))
  CALL c_f_pointer(opArg3%data_d,opDat3Deviceres_calc,(/opDat3Cardinality/))
  CALL c_f_pointer(opArg5%data_d,opDat5Deviceres_calc,(/opDat5Cardinality/))
  CALL c_f_pointer(opArg7%data_d,opDat7Deviceres_calc,(/opDat7Cardinality/))

  CALL c_f_pointer(planRet_res_calc,actualPlan_res_calc)
  CALL c_f_pointer(actualPlan_res_calc%ind_maps,pindMaps,(/numberOfIndirectOpDats/))
  CALL c_f_pointer(actualPlan_res_calc%ncolblk,ncolblk,(/set%setPtr%size/))

  pindSizesSize = actualPlan_res_calc%nblocks * numberOfIndirectOpDats
  CALL c_f_pointer(actualPlan_res_calc%ind_sizes,pindSizes,(/pindSizesSize/))

  pindOffsSize = pindSizesSize
  CALL c_f_pointer(actualPlan_res_calc%ind_offs,pindOffs,(/pindOffsSize/))

  pblkMapSize = actualPlan_res_calc%nblocks
  CALL c_f_pointer(actualPlan_res_calc%blkmap,pblkMap,(/pblkMapSize/))

  poffsetSize = actualPlan_res_calc%nblocks
  CALL c_f_pointer(actualPlan_res_calc%offset,poffset,(/poffsetSize/))

  pnelemsSize = actualPlan_res_calc%nblocks
  CALL c_f_pointer(actualPlan_res_calc%nelems,pnelems,(/pnelemsSize/))

  pnthrcolSize = actualPlan_res_calc%nblocks
  CALL c_f_pointer(actualPlan_res_calc%nthrcol,pnthrcol,(/pnthrcolSize/))

  pthrcolSize = set%setPtr%size
  CALL c_f_pointer(actualPlan_res_calc%thrcol,pthrcol,(/pthrcolSize/))
  CALL c_f_pointer(actualPlan_res_calc%nindirect,pnindirect,(/numberOfIndirectOpDats/))

  CALL c_f_pointer(pindMaps(1),ind_maps1_res_calc,pnindirect(1))
  CALL c_f_pointer(pindMaps(2),ind_maps3_res_calc,pnindirect(2))
  CALL c_f_pointer(pindMaps(3),ind_maps5_res_calc,pnindirect(3))
  CALL c_f_pointer(pindMaps(4),ind_maps7_res_calc,pnindirect(4))
  CALL c_f_pointer(actualPlan_res_calc%maps,pmaps,(/numberOfOpDats/))

  IF (indirectionDescriptorArray(1) >= 0) THEN
    mappingArray1Size = set%setPtr%size
    CALL c_f_pointer(pmaps(1),mappingArray1_res_calc,(/mappingArray1Size/))
  END IF

  IF (indirectionDescriptorArray(2) >= 0) THEN
    mappingArray2Size = set%setPtr%size
    CALL c_f_pointer(pmaps(2),mappingArray2_res_calc,(/mappingArray2Size/))
  END IF

  IF (indirectionDescriptorArray(3) >= 0) THEN
    mappingArray3Size = set%setPtr%size
    CALL c_f_pointer(pmaps(3),mappingArray3_res_calc,(/mappingArray3Size/))
  END IF

  IF (indirectionDescriptorArray(4) >= 0) THEN
    mappingArray4Size = set%setPtr%size
    CALL c_f_pointer(pmaps(4),mappingArray4_res_calc,(/mappingArray4Size/))
  END IF

  IF (indirectionDescriptorArray(5) >= 0) THEN
    mappingArray5Size = set%setPtr%size
    CALL c_f_pointer(pmaps(5),mappingArray5_res_calc,(/mappingArray5Size/))
  END IF

  IF (indirectionDescriptorArray(6) >= 0) THEN
    mappingArray6Size = set%setPtr%size
    CALL c_f_pointer(pmaps(6),mappingArray6_res_calc,(/mappingArray6Size/))
  END IF

  IF (indirectionDescriptorArray(7) >= 0) THEN
    mappingArray7Size = set%setPtr%size
    CALL c_f_pointer(pmaps(7),mappingArray7_res_calc,(/mappingArray7Size/))
  END IF

  IF (indirectionDescriptorArray(8) >= 0) THEN
    mappingArray8Size = set%setPtr%size
    CALL c_f_pointer(pmaps(8),mappingArray8_res_calc,(/mappingArray8Size/))
  END IF

  opDatCardinalities%ind_maps1Size = pnindirect(1)
  opDatCardinalities%ind_maps3Size = pnindirect(2)
  opDatCardinalities%ind_maps5Size = pnindirect(3)
  opDatCardinalities%ind_maps7Size = pnindirect(4)

  opDatCardinalities%mappingArray1Size = mappingArray1Size
  opDatCardinalities%mappingArray2Size = mappingArray2Size
  opDatCardinalities%mappingArray3Size = mappingArray3Size
  opDatCardinalities%mappingArray4Size = mappingArray4Size
  opDatCardinalities%mappingArray5Size = mappingArray5Size
  opDatCardinalities%mappingArray6Size = mappingArray6Size
  opDatCardinalities%mappingArray7Size = mappingArray7Size
  opDatCardinalities%mappingArray8Size = mappingArray8Size

  opDatCardinalities%pblkMapSize = pblkMapSize
  opDatCardinalities%pindOffsSize = pindOffsSize
  opDatCardinalities%pindSizesSize = pindSizesSize
  opDatCardinalities%pnelemsSize = pnelemsSize
  opDatCardinalities%pnthrcolSize = pnthrcolSize
  opDatCardinalities%poffsetSize = poffsetSize
  opDatCardinalities%pthrcolSize = pthrcolSize

  istat = cudaEventRecord(endTimeHost,0)
  istat = cudaEventSynchronize(endTimeHost)
  istat = cudaEventElapsedTime(accumulatorHostTime,startTimeHost,endTimeHost)

  loopTimeHostres_calc = loopTimeHostres_calc + accumulatorHostTime
  istat = cudaEventRecord(startTimeKernel,0)

  blockOffset = 0

  threadsPerBlock = getBlockSize(userSubroutine//C_NULL_CHAR,set%setPtr%size)
  DO i2 = 0, actualPlan_res_calc%ncolors - 1, 1
    blocksPerGrid = ncolblk(i2 + 1)
    dynamicSharedMemorySize = actualPlan_res_calc%nshared

    CALL op_cuda_res_calc <<<blocksPerGrid,threadsPerBlock,dynamicSharedMemorySize>>> &
    & (opDatDimensions,opDatCardinalities,pindSizes,pindOffs,pblkMap, &
    & poffset,pnelems,pnthrcol,pthrcol,blockOffset)

    threadSynchRet = cudaThreadSynchronize()
    blockOffset = blockOffset + blocksPerGrid
  END DO

  istat = cudaEventRecord(endTimeKernel,0)
  istat = cudaEventSynchronize(endTimeKernel)
  istat = cudaEventElapsedTime(accumulatorKernelTime,startTimeKernel,endTimeKernel)
  loopTimeKernelres_calc = loopTimeKernelres_calc + accumulatorKernelTime

  istat = cudaEventRecord(startTimeHost,0)
  istat = cudaEventRecord(endTimeHost,0)
  istat = cudaEventSynchronize(endTimeHost)
  istat = cudaEventElapsedTime(accumulatorHostTime,startTimeHost,endTimeHost)
  loopTimeHostres_calc = loopTimeHostres_calc + accumulatorHostTime

  KT_double = REAL(accumulatorKernelTime / 1000.00)
  returnSetKernelTiming = setKernelTime(2 , userSubroutine//C_NULL_CHAR, &
  & KT_double, actualPlan_res_calc%transfer,actualPlan_res_calc%transfer2)
END SUBROUTINE
END MODULE RES_CALC_MODULE
