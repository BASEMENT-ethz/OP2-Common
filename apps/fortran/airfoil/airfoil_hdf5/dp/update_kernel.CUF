!
! auto-generated by op2.py on 2013-04-11 12:35
!

MODULE UPDATE_MODULE
USE OP2_FORTRAN_DECLARATIONS
USE OP2_FORTRAN_RT_SUPPORT
USE ISO_C_BINDING
USE OP2_CONSTANTS
USE CUDAFOR
USE CUDACONFIGURATIONPARAMS


! variable declarations
real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat1Deviceupdate
real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat2Deviceupdate
real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat3Deviceupdate
real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat4Deviceupdate


REAL(kind=4) :: loopTimeHostupdate
REAL(kind=4) :: loopTimeKernelupdate
INTEGER(kind=4) :: numberCalledupdate


CONTAINS

! user function
attributes (device) &
#include "update.inc"


! Reduction cuda kernel
  attributes (device) SUBROUTINE ReductionFloat8(reductionResult,inputValue,reductionOperation)
  REAL(kind=8), DIMENSION(:), DEVICE :: reductionResult
  REAL(kind=8), DIMENSION(1:1) :: inputValue
  INTEGER(kind=4), VALUE :: reductionOperation
  REAL(kind=8), DIMENSION(0:*), SHARED :: sharedDouble8
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: threadID
  threadID = threadIdx%x - 1
  i1 = ishft(blockDim%x,-1)
  CALL syncthreads()
  sharedDouble8(threadID) = inputValue(1)
  DO WHILE (i1 > 0 )
    CALL syncthreads()
    IF (threadID < i1) THEN
      SELECT CASE(reductionOperation)
      CASE (0)
      sharedDouble8(threadID) = sharedDouble8(threadID) + sharedDouble8(threadID + i1)
      CASE (1)
      IF (sharedDouble8(threadID + i1) < sharedDouble8(threadID)) THEN
        sharedDouble8(threadID) = sharedDouble8(threadID + i1)
      END IF
      CASE (2)
      IF (sharedDouble8(threadID + i1) > sharedDouble8(threadID)) THEN
        sharedDouble8(threadID) = sharedDouble8(threadID + i1)
      END IF
      END SELECT
    END IF
    i1 = ishft(i1,-1)
  END DO
  CALL syncthreads()
  IF (threadID .EQ. 0) THEN
    SELECT CASE(reductionOperation)
    CASE (0)
    reductionResult(1) = reductionResult(1) + sharedDouble8(0)
    CASE (1)
    IF (sharedDouble8(0) < reductionResult(1)) THEN
      reductionResult(1) = sharedDouble8(0)
    END IF
    CASE (2)
    IF (sharedDouble8(0) > reductionResult(1)) THEN
      reductionResult(1) = sharedDouble8(0)
    END IF
    END SELECT
  END IF
  CALL syncthreads()
  END SUBROUTINE

! CUDA kernel function
  attributes (global) SUBROUTINE op_cuda_update( &
    & reductionArrayDevice5,   &
    & setSize)

    IMPLICIT NONE

! local variables
    real(8), DIMENSION(:), DEVICE :: reductionArrayDevice5
    real(8) :: opGblDat5
    INTEGER(kind=4), VALUE :: setSize
    INTEGER(kind=4) :: i1
    DO i1 = threadIdx%x - 1 + (blockIdx%x - 1) * blockDim%x, setSize - 1, blockDim%x * gridDim%x

! kernel call

      CALL update( &
      & opDat1Deviceupdate(i1 * (4) + 1: i1 * (4) + 4), &
      & opDat2Deviceupdate(i1 * (4) + 1: i1 * (4) + 4), &
      & opDat3Deviceupdate(i1 * (4) + 1: i1 * (4) + 4), &
      & opDat4Deviceupdate(i1 + 1), &
      & opGblDat5 &
      & )

    END DO

    CALL ReductionFloat8(reductionArrayDevice5(blockIdx%x - 1 + 1:),opGblDat5,0)

  END SUBROUTINE

  attributes (host) SUBROUTINE update_host( userSubroutine, set, &
    & opArg1, &
    & opArg2, &
    & opArg3, &
    & opArg4, &
    & opArg5 )

    IMPLICIT NONE
    character(len=6), INTENT(IN) :: userSubroutine
    TYPE ( op_set ) , INTENT(IN) :: set

    TYPE ( op_arg ) , INTENT(IN) :: opArg1
    TYPE ( op_arg ) , INTENT(IN) :: opArg2
    TYPE ( op_arg ) , INTENT(IN) :: opArg3
    TYPE ( op_arg ) , INTENT(IN) :: opArg4
    TYPE ( op_arg ) , INTENT(IN) :: opArg5

    TYPE ( op_arg ) , DIMENSION(5) :: opArgArray
    INTEGER(kind=4) :: numberOfOpDats
    INTEGER(kind=4) :: n_upper
    INTEGER(kind=4) :: returnSetKernelTiming


    INTEGER(kind=4) :: opDat1Cardinality
    INTEGER(kind=4) :: opDat2Cardinality
    INTEGER(kind=4) :: opDat3Cardinality
    INTEGER(kind=4) :: opDat4Cardinality
    INTEGER(kind=4) :: opDat5Cardinality

    INTEGER(kind=4) :: blocksPerGrid
    INTEGER(kind=4) :: threadsPerBlock
    INTEGER(kind=4) :: dynamicSharedMemorySize
    INTEGER(kind=4) :: threadSynchRet
    INTEGER(kind=4), SAVE :: calledTimes
    INTEGER(kind=4) :: i1
    INTEGER(kind=4) :: i2
    INTEGER(kind=4) :: i10
    INTEGER(kind=4) :: i20

    INTEGER(kind=4) :: istat
    REAL(kind=4) :: accumulatorHostTime
    REAL(kind=4) :: accumulatorKernelTime
    REAL(kind=8) :: KT_double
    TYPE ( cudaEvent )  :: startTimeHost
    TYPE ( cudaEvent )  :: endTimeHost
    TYPE ( cudaEvent )  :: startTimeKernel
    TYPE ( cudaEvent )  :: endTimeKernel
    real(8), DIMENSION(:), ALLOCATABLE :: reductionArrayHost5
    real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: reductionArrayDevice5
    real(8), POINTER :: opDat5Host
    INTEGER(kind=4) :: reductionCardinality5

    numberOfOpDats = 5

    opArgArray(1) = opArg1
    opArgArray(2) = opArg2
    opArgArray(3) = opArg3
    opArgArray(4) = opArg4
    opArgArray(5) = opArg5

    n_upper = op_mpi_halo_exchanges_cuda(set%setCPtr,numberOfOpDats,opArgArray)

    istat = cudaEventCreate(startTimeHost)
    istat = cudaEventCreate(endTimeHost)
    istat = cudaEventCreate(startTimeKernel)
    istat = cudaEventCreate(endTimeKernel)

    numberCalledupdate = numberCalledupdate + 1
    istat = cudaEventRecord(startTimeHost,0)


    blocksPerGrid = 200
    threadsPerBlock = getBlockSize(userSubroutine//C_NULL_CHAR,set%setPtr%size)
    dynamicSharedMemorySize = reductionSize(opArgArray,numberOfOpDats) * threadsPerBlock

    opDat1Cardinality = opArg1%dim * getSetSizeFromOpArg(opArg1)
    opDat2Cardinality = opArg2%dim * getSetSizeFromOpArg(opArg2)
    opDat3Cardinality = opArg3%dim * getSetSizeFromOpArg(opArg3)
    opDat4Cardinality = opArg4%dim * getSetSizeFromOpArg(opArg4)
    opDat5Cardinality = opArg5%dim


    CALL c_f_pointer(opArg1%data_d,opDat1Deviceupdate,(/opDat1Cardinality/))
    CALL c_f_pointer(opArg2%data_d,opDat2Deviceupdate,(/opDat2Cardinality/))
    CALL c_f_pointer(opArg3%data_d,opDat3Deviceupdate,(/opDat3Cardinality/))
    CALL c_f_pointer(opArg4%data_d,opDat4Deviceupdate,(/opDat4Cardinality/))
    CALL c_f_pointer(opArg5%data,opDat5Host)

    reductionCardinality5 = blocksPerGrid * 1
    allocate( reductionArrayHost5(reductionCardinality5) )
    allocate( reductionArrayDevice5(reductionCardinality5) )

    DO i10 = 0, reductionCardinality5 - 1, 1
      reductionArrayHost5(i10+1) = 0.00000
    END DO

    reductionArrayDevice5 = reductionArrayHost5
    istat = cudaEventRecord(endTimeHost,0)
    istat = cudaEventSynchronize(endTimeHost)
    istat = cudaEventElapsedTime(accumulatorHostTime,startTimeHost,endTimeHost)

    loopTimeHostupdate = loopTimeHostupdate + accumulatorHostTime
    istat = cudaEventRecord(startTimeKernel,0)

    CALL op_cuda_update <<<blocksPerGrid,threadsPerBlock,dynamicSharedMemorySize>>>( &
    reductionArrayDevice5, &
    set%setPtr%size)

    threadSynchRet = cudaThreadSynchronize()
    istat = cudaEventRecord(endTimeKernel,0)
    istat = cudaEventSynchronize(endTimeKernel)
    istat = cudaEventElapsedTime(accumulatorKernelTime,startTimeKernel,endTimeKernel)
    loopTimeKernelupdate = loopTimeKernelupdate + accumulatorKernelTime


    IF ((n_upper .EQ. 0) .OR. (n_upper .EQ. set%setPtr%core_size)) THEN
      CALL op_mpi_wait_all_cuda(numberOfOpDats,opArgArray)
    END IF


    CALL op_mpi_set_dirtybit_cuda(numberOfOpDats,opArgArray)

    istat = cudaEventRecord(startTimeHost,0)
    reductionArrayHost5 = reductionArrayDevice5

    DO i10 = 0, reductionCardinality5 - 1, 1
      opDat5Host = reductionArrayHost5(i10+1) + opDat5Host
    END DO

    deallocate( reductionArrayHost5 )
    deallocate( reductionArrayDevice5 )
    CALL op_mpi_reduce_double(opArg5,opArg5%data)

    calledTimes = calledTimes + 1
    istat = cudaEventRecord(endTimeHost,0)
    istat = cudaEventSynchronize(endTimeHost)
    istat = cudaEventElapsedTime(accumulatorHostTime,startTimeHost,endTimeHost)
    loopTimeHostupdate = loopTimeHostupdate + accumulatorHostTime
    KT_double = REAL(accumulatorKernelTime / 1000.00)
    returnSetKernelTiming = setKernelTime(4 , userSubroutine//C_NULL_CHAR, &
    & KT_double, 0.00000,0.00000)
  END SUBROUTINE
  END MODULE UPDATE_MODULE
