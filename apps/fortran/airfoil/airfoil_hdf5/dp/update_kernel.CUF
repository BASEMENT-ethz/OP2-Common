!
! auto-generated by op2.py on 2013-04-18 15:02
!

MODULE UPDATE_MODULE
USE OP2_FORTRAN_DECLARATIONS
USE OP2_FORTRAN_RT_SUPPORT
USE ISO_C_BINDING
USE OP2_CONSTANTS
USE CUDAFOR
USE CUDACONFIGURATIONPARAMS


! updatevariable declarations

real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: reductionArrayDevice5update
REAL(kind=4) :: loopTimeHostupdate
REAL(kind=4) :: loopTimeKernelupdate
INTEGER(kind=4) :: numberCalledupdate


CONTAINS

! Multidimensional reduction cuda kernel
  attributes (device) SUBROUTINE ReductionFloat8Mdim(reductionResult,inputValue,reductionOperation,dim)
  REAL(kind=8), DIMENSION(:), DEVICE :: reductionResult
  REAL(kind=8), DIMENSION(:) :: inputValue
  INTEGER(kind=4), VALUE :: reductionOperation
  INTEGER(kind=4), VALUE :: dim
  REAL(kind=8), DIMENSION(0:*), SHARED :: sharedDouble8
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: d
  INTEGER(kind=4) :: threadID
  threadID = threadIdx%x - 1
  i1 = ishft(blockDim%x,-1)
  CALL syncthreads()
  sharedDouble8(threadID*dim:threadID*dim+dim-1) = inputValue(1:dim)
  DO WHILE (i1 > 0 )
    CALL syncthreads()
    IF (threadID < i1) THEN
      DO i2 = 0, dim - 1, 1
        sharedDouble8(threadID*dim + i2) = sharedDouble8(threadID*dim + i2) + sharedDouble8((threadID + i1)*dim + i2)
      END DO
    END IF
    i1 = ishft(i1,-1)
  END DO
  CALL syncthreads()
  IF (threadID .EQ. 0) THEN
    reductionResult(1:dim) = reductionResult(1:dim) + sharedDouble8(0:dim-1)
  END IF
  CALL syncthreads()
  END SUBROUTINE
  
attributes (device) &
#include "update.inc"
  
  
! CUDA kernel function
  attributes (global) SUBROUTINE op_cuda_update( &
    & opDat1Deviceupdate, &
    & opDat2Deviceupdate, &
    & opDat3Deviceupdate, &
    & opDat4Deviceupdate, &
    & reductionArrayDevice5,   &
    & setSize)
    
    IMPLICIT NONE
    
! local variables
    real(8), DEVICE, INTENT(IN) :: opDat1Deviceupdate(*)
    real(8), DEVICE :: opDat2Deviceupdate(*)
    real(8), DEVICE :: opDat3Deviceupdate(*)
    real(8), DEVICE, INTENT(IN) :: opDat4Deviceupdate(*)
    
    real(8), DIMENSION(:), DEVICE :: reductionArrayDevice5
    real(8), DIMENSION(0:2-1) :: opGblDat5Deviceupdate
    INTEGER(kind=4), VALUE :: setSize
    INTEGER(kind=4) :: i1
    
    opGblDat5Deviceupdate = 0
    
    DO i1 = threadIdx%x - 1 + (blockIdx%x - 1) * blockDim%x, setSize - 1, blockDim%x * gridDim%x
      
! kernel call
      
      CALL update( &
      & opDat1Deviceupdate(i1 * (4) + 1: i1 * (4) + 4), &
      & opDat2Deviceupdate(i1 * (4) + 1: i1 * (4) + 4), &
      & opDat3Deviceupdate(i1 * (4) + 1: i1 * (4) + 4), &
      & opDat4Deviceupdate(i1 + 1), &
      & opGblDat5Deviceupdate &
      & )
      
    END DO
    
    CALL ReductionFloat8Mdim(reductionArrayDevice5((blockIdx%x - 1)*(2) + 1:),opGblDat5Deviceupdate,0,2)
    
  END SUBROUTINE

attributes (host) SUBROUTINE update_host( userSubroutine, set, &
    & opArg1, &
    & opArg2, &
    & opArg3, &
    & opArg4, &
    & opArg5 )
    
    IMPLICIT NONE
    character(len=6), INTENT(IN) :: userSubroutine
    TYPE ( op_set ) , INTENT(IN) :: set
    
    TYPE ( op_arg ) , INTENT(IN) :: opArg1
    TYPE ( op_arg ) , INTENT(IN) :: opArg2
    TYPE ( op_arg ) , INTENT(IN) :: opArg3
    TYPE ( op_arg ) , INTENT(IN) :: opArg4
    TYPE ( op_arg ) , INTENT(IN) :: opArg5
	if (getHybridGPU()) then
	    CALL update_host_gpu(userSubroutine, set, &
	  & opArg1, &
	  & opArg2, &
	  & opArg3, &
	  & opArg4, &
	  & opArg5 )
	  else
	    CALL update_host_cpu(userSubroutine, set, &
	  & opArg1, &
	  & opArg2, &
	  & opArg3, &
	  & opArg4, &
	  & opArg5 )
	  end if
	
END SUBROUTINE

attributes (host) SUBROUTINE update_cpu(qold,q,res,adt,rms)
  IMPLICIT NONE
  REAL(kind=8), DIMENSION(4), INTENT(IN) :: qold
  REAL(kind=8), DIMENSION(4) :: q
  REAL(kind=8), DIMENSION(4) :: res
  REAL(kind=8), INTENT(IN) :: adt
  REAL(kind=8), DIMENSION(2) :: rms
!  REAL(kind=8) :: rms
  REAL(kind=8) :: del,adti
  INTEGER(kind=4) :: i
  adti = 1.0 / adt

  DO i = 1, 4
    del = adti * res(i)
    q(i) = qold(i) - del
    res(i) = 0.0
    rms(2) = rms(2) + del * del
  END DO
END SUBROUTINE

attributes (host) SUBROUTINE update_host_cpu( userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4, &
  & opArg5 )

  IMPLICIT NONE
  character(kind=c_char,len=*), INTENT(IN) :: userSubroutine
  type ( op_set ) , INTENT(IN) :: set

  type ( op_arg ) , INTENT(IN) :: opArg1
  type ( op_arg ) , INTENT(IN) :: opArg2
  type ( op_arg ) , INTENT(IN) :: opArg3
  type ( op_arg ) , INTENT(IN) :: opArg4
  type ( op_arg ) , INTENT(IN) :: opArg5

  type ( op_arg ) , DIMENSION(5) :: opArgArray
  INTEGER(kind=4) :: numberOfOpDats
  INTEGER(kind=4) :: n_upper
  type ( op_set_core ) , POINTER :: opSetCore

  real(8), POINTER, DIMENSION(:) :: opDat1Local
  INTEGER(kind=4) :: opDat1Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat2Local
  INTEGER(kind=4) :: opDat2Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat3Local
  INTEGER(kind=4) :: opDat3Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat4Local
  INTEGER(kind=4) :: opDat4Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat5Local

  INTEGER(kind=4) :: i1

  numberOfOpDats = 5

  opArgArray(1) = opArg1
  opArgArray(2) = opArg2
  opArgArray(3) = opArg3
  opArgArray(4) = opArg4
  opArgArray(5) = opArg5

  n_upper = op_mpi_halo_exchanges(set%setCPtr,numberOfOpDats,opArgArray)

  opSetCore => set%setPtr

  opDat1Cardinality = opArg1%dim * getSetSizeFromOpArg(opArg1)
  opDat2Cardinality = opArg2%dim * getSetSizeFromOpArg(opArg2)
  opDat3Cardinality = opArg3%dim * getSetSizeFromOpArg(opArg3)
  opDat4Cardinality = opArg4%dim * getSetSizeFromOpArg(opArg4)
  CALL c_f_pointer(opArg1%data,opDat1Local,(/opDat1Cardinality/))
  CALL c_f_pointer(opArg2%data,opDat2Local,(/opDat2Cardinality/))
  CALL c_f_pointer(opArg3%data,opDat3Local,(/opDat3Cardinality/))
  CALL c_f_pointer(opArg4%data,opDat4Local,(/opDat4Cardinality/))
  CALL c_f_pointer(opArg5%data,opDat5Local, (/opArg5%dim/))


  DO i1 = 0, n_upper-1, 1

! kernel call
  CALL update_cpu( &
    & opDat1Local(1 + i1 * (4) : i1 * (4) + 4), &
    & opDat2Local(1 + i1 * (4) : i1 * (4) + 4), &
    & opDat3Local(1 + i1 * (4) : i1 * (4) + 4), &
    & opDat4Local(1 + i1), &
    & opDat5Local(1:2) &
    & )
  END DO

  IF ((n_upper .EQ. 0) .OR. (n_upper .EQ. opSetCore%core_size)) THEN
    CALL op_mpi_wait_all(numberOfOpDats,opArgArray)
  END IF


  CALL op_mpi_set_dirtybit(numberOfOpDats,opArgArray)

  CALL op_mpi_reduce_double(opArg5,opArg5%data)

END SUBROUTINE

  attributes (host) SUBROUTINE update_host_gpu( userSubroutine, set, &
    & opArg1, &
    & opArg2, &
    & opArg3, &
    & opArg4, &
    & opArg5 )
    
    IMPLICIT NONE
    character(len=6), INTENT(IN) :: userSubroutine
    TYPE ( op_set ) , INTENT(IN) :: set
    
    TYPE ( op_arg ) , INTENT(IN) :: opArg1
    TYPE ( op_arg ) , INTENT(IN) :: opArg2
    TYPE ( op_arg ) , INTENT(IN) :: opArg3
    TYPE ( op_arg ) , INTENT(IN) :: opArg4
    TYPE ( op_arg ) , INTENT(IN) :: opArg5
    
    TYPE ( op_arg ) , DIMENSION(5) :: opArgArray
    INTEGER(kind=4) :: numberOfOpDats
    INTEGER(kind=4) :: n_upper
    INTEGER(kind=4) :: returnSetKernelTiming
    
    
    real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat1Deviceupdate
    real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat2Deviceupdate
    real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat3Deviceupdate
    real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat4Deviceupdate
    
    INTEGER(kind=4) :: opDat1Cardinality
    INTEGER(kind=4) :: opDat2Cardinality
    INTEGER(kind=4) :: opDat3Cardinality
    INTEGER(kind=4) :: opDat4Cardinality
    INTEGER(kind=4) :: opDat5Cardinality
    
    INTEGER(kind=4) :: blocksPerGrid
    INTEGER(kind=4) :: threadsPerBlock
    INTEGER(kind=4) :: dynamicSharedMemorySize
    INTEGER(kind=4) :: threadSynchRet
    INTEGER(kind=4), SAVE :: calledTimes
    INTEGER(kind=4) :: i1
    INTEGER(kind=4) :: i2
    INTEGER(kind=4) :: i10
    INTEGER(kind=4) :: i20
    
    INTEGER(kind=4) :: istat
    REAL(kind=4) :: accumulatorHostTime
    REAL(kind=4) :: accumulatorKernelTime
    REAL(kind=8) :: KT_double
    TYPE ( cudaEvent )  :: startTimeHost
    TYPE ( cudaEvent )  :: endTimeHost
    TYPE ( cudaEvent )  :: startTimeKernel
    TYPE ( cudaEvent )  :: endTimeKernel
    real(8), DIMENSION(:), POINTER :: opDat5Host
    real(8), DIMENSION(:), ALLOCATABLE :: reductionArrayHost5
    INTEGER(kind=4) :: reductionCardinality5
    
    numberOfOpDats = 5
    
    opArgArray(1) = opArg1
    opArgArray(2) = opArg2
    opArgArray(3) = opArg3
    opArgArray(4) = opArg4
    opArgArray(5) = opArg5
    
    n_upper = op_mpi_halo_exchanges_cuda(set%setCPtr,numberOfOpDats,opArgArray)
    
    istat = cudaEventCreate(startTimeHost)
    istat = cudaEventCreate(endTimeHost)
    istat = cudaEventCreate(startTimeKernel)
    istat = cudaEventCreate(endTimeKernel)
    
    numberCalledupdate = numberCalledupdate + 1
    istat = cudaEventRecord(startTimeHost,0)
    
    
    blocksPerGrid = 200
    threadsPerBlock = getBlockSize(userSubroutine//C_NULL_CHAR,set%setPtr%size)
    dynamicSharedMemorySize = reductionSize(opArgArray,numberOfOpDats) * threadsPerBlock
    
    opDat1Cardinality = opArg1%dim * getSetSizeFromOpArg(opArg1)
    opDat2Cardinality = opArg2%dim * getSetSizeFromOpArg(opArg2)
    opDat3Cardinality = opArg3%dim * getSetSizeFromOpArg(opArg3)
    opDat4Cardinality = opArg4%dim * getSetSizeFromOpArg(opArg4)
    opDat5Cardinality = opArg5%dim
    
    
    CALL c_f_pointer(opArg1%data_d,opDat1Deviceupdate,(/opDat1Cardinality/))
    CALL c_f_pointer(opArg2%data_d,opDat2Deviceupdate,(/opDat2Cardinality/))
    CALL c_f_pointer(opArg3%data_d,opDat3Deviceupdate,(/opDat3Cardinality/))
    CALL c_f_pointer(opArg4%data_d,opDat4Deviceupdate,(/opDat4Cardinality/))
    CALL c_f_pointer(opArg5%data,opDat5Host,(/opDat5Cardinality/))
    
    reductionCardinality5 = blocksPerGrid * 1
    allocate( reductionArrayHost5(reductionCardinality5* (2)) )
    IF (.not. allocated(reductionArrayDevice5update)) THEN
      allocate( reductionArrayDevice5update(reductionCardinality5* (2)) )
    END IF
    
    DO i10 = 0, reductionCardinality5 - 1, 1
      reductionArrayHost5(i10 * (2) + 1 : i10 * (2) + (2)) = 0.0
    END DO
    
    reductionArrayDevice5update = reductionArrayHost5
    istat = cudaEventRecord(endTimeHost,0)
    istat = cudaEventSynchronize(endTimeHost)
    istat = cudaEventElapsedTime(accumulatorHostTime,startTimeHost,endTimeHost)
    
    loopTimeHostupdate = loopTimeHostupdate + accumulatorHostTime
    istat = cudaEventRecord(startTimeKernel,0)
    
    CALL op_cuda_update <<<blocksPerGrid,threadsPerBlock,dynamicSharedMemorySize>>>( &
    & opDat1Deviceupdate, &
    & opDat2Deviceupdate, &
    & opDat3Deviceupdate, &
    & opDat4Deviceupdate, &
    reductionArrayDevice5update, &
    set%setPtr%size)
    
    IF ((n_upper .EQ. 0) .OR. (n_upper .EQ. set%setPtr%core_size)) THEN
      CALL op_mpi_wait_all_cuda(numberOfOpDats,opArgArray)
    END IF
    
    
    istat = cudaEventRecord(endTimeKernel,0)
    istat = cudaEventSynchronize(endTimeKernel)
    istat = cudaEventElapsedTime(accumulatorKernelTime,startTimeKernel,endTimeKernel)
    loopTimeKernelupdate = loopTimeKernelupdate + accumulatorKernelTime
    
    
    CALL op_mpi_set_dirtybit_cuda(numberOfOpDats,opArgArray)
    
    istat = cudaEventRecord(startTimeHost,0)
    reductionArrayHost5 = reductionArrayDevice5update
    
    DO i10 = 0, reductionCardinality5 - 1, 1
      opDat5Host(1:2) = opDat5Host(1:2) + reductionArrayHost5(i10 * (2) + 1 : i10 * (2) + (2))
    END DO
    
    deallocate( reductionArrayHost5 )
    CALL op_mpi_reduce_double(opArg5,opArg5%data)
    
    istat = cudaEventRecord(endTimeHost,0)
    istat = cudaEventSynchronize(endTimeHost)
    istat = cudaEventElapsedTime(accumulatorHostTime,startTimeHost,endTimeHost)
    loopTimeHostupdate = loopTimeHostupdate + accumulatorHostTime
    KT_double = REAL(accumulatorKernelTime / 1000.00)
    returnSetKernelTiming = setKernelTime(4 , userSubroutine//C_NULL_CHAR, &
    & KT_double, 0.00000,0.00000)
    calledTimes = calledTimes + 1
  END SUBROUTINE
  END MODULE
