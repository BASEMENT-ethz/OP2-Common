!
! auto-generated by op2.py on 2015-01-26 22:23
!

MODULE GEOMETRY_CALC_MODULE
USE OP2_CONSTANTS
USE kinds_mod,    ONLY: ink,rlk
USE parameters_mod,ONLY: LI
USE OP2_FORTRAN_DECLARATIONS
USE OP2_FORTRAN_RT_SUPPORT
USE ISO_C_BINDING
USE CUDAFOR
USE CUDACONFIGURATIONPARAMS


#ifdef _OPENMP
  USE OMP_LIB
#endif

! geometry_calcvariable declarations



#define OP2_SOA(var,dim,stride) var((dim-1)*stride+1)

CONTAINS

!DEC$ ATTRIBUTES FORCEINLINE :: geometry_calc
attributes (host) subroutine geometry_calc(a1,a2,a3,b1,b2,b3,elx,ely,cnwt,elvol)

    USE kinds_mod,ONLY: rlk
    USE parameters_mod,ONLY: ONEBYNINE

    implicit none

    REAL(KIND=rlk), DIMENSION(4), INTENT(IN) :: elx,ely
    REAL(KIND=rlk), DIMENSION(4), INTENT(OUT) :: cnwt
    REAL(KIND=rlk), INTENT(OUT) :: a1,a2,a3,b1,b2,b3,elvol

    a1=0.25_rlk*(-elx(1)+elx(2)+elx(3)-elx(4))
    a2=0.25_rlk*( elx(1)-elx(2)+elx(3)-elx(4))
    a3=0.25_rlk*(-elx(1)-elx(2)+elx(3)+elx(4))
    b1=0.25_rlk*(-ely(1)+ely(2)+ely(3)-ely(4))
    b2=0.25_rlk*( ely(1)-ely(2)+ely(3)-ely(4))
    b3=0.25_rlk*(-ely(1)-ely(2)+ely(3)+ely(4))
    cnwt(1)=ONEBYNINE*                            &
&               ((3.0_rlk*b3-b2)*(3.0_rlk*a1-a2)  &
&               -(3.0_rlk*a3-a2)*(3.0_rlk*b1-b2))
    cnwt(2)=ONEBYNINE*                            &
&               ((3.0_rlk*b3+b2)*(3.0_rlk*a1-a2)  &
&               -(3.0_rlk*a3+a2)*(3.0_rlk*b1-b2))
    cnwt(3)=ONEBYNINE*                            &
&               ((3.0_rlk*b3+b2)*(3.0_rlk*a1+a2)  &
                -(3.0_rlk*a3+a2)*(3.0_rlk*b1+b2))
    cnwt(4)=ONEBYNINE*                            &
&               ((3.0_rlk*b3-b2)*(3.0_rlk*a1+a2)  &
                -(3.0_rlk*a3-a2)*(3.0_rlk*b1+b2))
    elvol=4.0_rlk*(a1*b3-a3*b1)

  END SUBROUTINE geometry_calc

attributes (device) subroutine geometry_calc_gpu(a1,a2,a3,b1,b2,b3,elx,ely,cnwt,elvol)

    USE kinds_mod,ONLY: rlk
    USE parameters_mod,ONLY: ONEBYNINE

    implicit none

    REAL(KIND=rlk), DIMENSION(4), INTENT(IN) :: elx,ely
    REAL(KIND=rlk), DIMENSION(4), INTENT(OUT) :: cnwt
    REAL(KIND=rlk), INTENT(OUT) :: a1,a2,a3,b1,b2,b3,elvol

    a1=0.25_rlk*(-OP2_SOA(elx,1, elements_stride_OP2)+OP2_SOA(elx,2, elements_stride_OP2)+OP2_SOA(elx,3, elements_stride_OP2)-OP2_SOA(elx,4, elements_stride_OP2))
    a2=0.25_rlk*( OP2_SOA(elx,1, elements_stride_OP2)-OP2_SOA(elx,2, elements_stride_OP2)+OP2_SOA(elx,3, elements_stride_OP2)-OP2_SOA(elx,4, elements_stride_OP2))
    a3=0.25_rlk*(-OP2_SOA(elx,1, elements_stride_OP2)-OP2_SOA(elx,2, elements_stride_OP2)+OP2_SOA(elx,3, elements_stride_OP2)+OP2_SOA(elx,4, elements_stride_OP2))
    b1=0.25_rlk*(-OP2_SOA(ely,1, elements_stride_OP2)+OP2_SOA(ely,2, elements_stride_OP2)+OP2_SOA(ely,3, elements_stride_OP2)-OP2_SOA(ely,4, elements_stride_OP2))
    b2=0.25_rlk*( OP2_SOA(ely,1, elements_stride_OP2)-OP2_SOA(ely,2, elements_stride_OP2)+OP2_SOA(ely,3, elements_stride_OP2)-OP2_SOA(ely,4, elements_stride_OP2))
    b3=0.25_rlk*(-OP2_SOA(ely,1, elements_stride_OP2)-OP2_SOA(ely,2, elements_stride_OP2)+OP2_SOA(ely,3, elements_stride_OP2)+OP2_SOA(ely,4, elements_stride_OP2))
    OP2_SOA(cnwt,1, elements_stride_OP2)=ONEBYNINE*                            &
&               ((3.0_rlk*b3-b2)*(3.0_rlk*a1-a2)  &
&               -(3.0_rlk*a3-a2)*(3.0_rlk*b1-b2))
    OP2_SOA(cnwt,2, elements_stride_OP2)=ONEBYNINE*                            &
&               ((3.0_rlk*b3+b2)*(3.0_rlk*a1-a2)  &
&               -(3.0_rlk*a3+a2)*(3.0_rlk*b1-b2))
    OP2_SOA(cnwt,3, elements_stride_OP2)=ONEBYNINE*                            &
&               ((3.0_rlk*b3+b2)*(3.0_rlk*a1+a2)  &
                -(3.0_rlk*a3+a2)*(3.0_rlk*b1+b2))
    OP2_SOA(cnwt,4, elements_stride_OP2)=ONEBYNINE*                            &
&               ((3.0_rlk*b3-b2)*(3.0_rlk*a1+a2)  &
                -(3.0_rlk*a3-a2)*(3.0_rlk*b1+b2))
    elvol=4.0_rlk*(a1*b3-a3*b1)

  END SUBROUTINE geometry_calc_gpu


! CUDA kernel function
attributes (global) SUBROUTINE op_cuda_geometry_calc( &
  &  soa_stride,      &
  & opDat1Devicegeometry_calc, &
  & opDat2Devicegeometry_calc, &
  & opDat3Devicegeometry_calc, &
  & opDat4Devicegeometry_calc, &
  & opDat5Devicegeometry_calc, &
  & opDat6Devicegeometry_calc, &
  & opDat7Devicegeometry_calc, &
  & opDat8Devicegeometry_calc, &
  & opDat9Devicegeometry_calc, &
  & opDat10Devicegeometry_calc, &
  & setSize)

  IMPLICIT NONE

! local variables
  real(8), DEVICE :: opDat1Devicegeometry_calc(*)
  real(8), DEVICE :: opDat2Devicegeometry_calc(*)
  real(8), DEVICE :: opDat3Devicegeometry_calc(*)
  real(8), DEVICE :: opDat4Devicegeometry_calc(*)
  real(8), DEVICE :: opDat5Devicegeometry_calc(*)
  real(8), DEVICE :: opDat6Devicegeometry_calc(*)
  real(8), DEVICE, INTENT(IN) :: opDat7Devicegeometry_calc(*)
  real(8), DEVICE, INTENT(IN) :: opDat8Devicegeometry_calc(*)
  real(8), DEVICE :: opDat9Devicegeometry_calc(*)
  real(8), DEVICE :: opDat10Devicegeometry_calc(*)


  INTEGER(kind=4), VALUE :: soa_stride
  INTEGER(kind=4), VALUE :: setSize
  INTEGER(kind=4) :: i1


  DO i1 = threadIdx%x - 1 + (blockIdx%x - 1) * blockDim%x, setSize - 1, blockDim%x * gridDim%x

! kernel call

    CALL geometry_calc_gpu( &
    & opDat1Devicegeometry_calc(i1 + 1), &
    & opDat2Devicegeometry_calc(i1 + 1), &
    & opDat3Devicegeometry_calc(i1 + 1), &
    & opDat4Devicegeometry_calc(i1 + 1), &
    & opDat5Devicegeometry_calc(i1 + 1), &
    & opDat6Devicegeometry_calc(i1 + 1), &
    & opDat7Devicegeometry_calc(1 + i1), &
    & opDat8Devicegeometry_calc(1 + i1), &
    & opDat9Devicegeometry_calc(1 + i1), &
    & opDat10Devicegeometry_calc(i1 + 1) &
    & )
  END DO


END SUBROUTINE

attributes (host) SUBROUTINE geometry_calc_host( userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4, &
  & opArg5, &
  & opArg6, &
  & opArg7, &
  & opArg8, &
  & opArg9, &
  & opArg10 )

  IMPLICIT NONE
  character(len=13), INTENT(IN) :: userSubroutine
  TYPE ( op_set ) , INTENT(IN) :: set

  TYPE ( op_arg ) , INTENT(IN) :: opArg1
  TYPE ( op_arg ) , INTENT(IN) :: opArg2
  TYPE ( op_arg ) , INTENT(IN) :: opArg3
  TYPE ( op_arg ) , INTENT(IN) :: opArg4
  TYPE ( op_arg ) , INTENT(IN) :: opArg5
  TYPE ( op_arg ) , INTENT(IN) :: opArg6
  TYPE ( op_arg ) , INTENT(IN) :: opArg7
  TYPE ( op_arg ) , INTENT(IN) :: opArg8
  TYPE ( op_arg ) , INTENT(IN) :: opArg9
  TYPE ( op_arg ) , INTENT(IN) :: opArg10

  IF (getHybridGPU()) THEN
    CALL geometry_calc_host_gpu( userSubroutine, set, &
    & opArg1, &
    & opArg2, &
    & opArg3, &
    & opArg4, &
    & opArg5, &
    & opArg6, &
    & opArg7, &
    & opArg8, &
    & opArg9, &
    & opArg10 )
  ELSE
    CALL geometry_calc_host_cpu( userSubroutine, set, &
    & opArg1, &
    & opArg2, &
    & opArg3, &
    & opArg4, &
    & opArg5, &
    & opArg6, &
    & opArg7, &
    & opArg8, &
    & opArg9, &
    & opArg10 )
  END IF
END SUBROUTINE


! Stub for GPU execution

attributes (host) SUBROUTINE geometry_calc_host_gpu( userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4, &
  & opArg5, &
  & opArg6, &
  & opArg7, &
  & opArg8, &
  & opArg9, &
  & opArg10 )

  IMPLICIT NONE
  character(len=13), INTENT(IN) :: userSubroutine
  TYPE ( op_set ) , INTENT(IN) :: set

  TYPE ( op_arg ) , INTENT(IN) :: opArg1
  TYPE ( op_arg ) , INTENT(IN) :: opArg2
  TYPE ( op_arg ) , INTENT(IN) :: opArg3
  TYPE ( op_arg ) , INTENT(IN) :: opArg4
  TYPE ( op_arg ) , INTENT(IN) :: opArg5
  TYPE ( op_arg ) , INTENT(IN) :: opArg6
  TYPE ( op_arg ) , INTENT(IN) :: opArg7
  TYPE ( op_arg ) , INTENT(IN) :: opArg8
  TYPE ( op_arg ) , INTENT(IN) :: opArg9
  TYPE ( op_arg ) , INTENT(IN) :: opArg10

  TYPE ( op_arg ) , DIMENSION(10) :: opArgArray
  INTEGER(kind=4) :: numberOfOpDats
  INTEGER(kind=4) :: n_upper
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayStart
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayEnd
  REAL(kind=8) :: startTime
  REAL(kind=8) :: endTime
  INTEGER(kind=4) :: returnSetKernelTiming


  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat1Devicegeometry_calc
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat2Devicegeometry_calc
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat3Devicegeometry_calc
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat4Devicegeometry_calc
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat5Devicegeometry_calc
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat6Devicegeometry_calc
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat7Devicegeometry_calc
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat8Devicegeometry_calc
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat9Devicegeometry_calc
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat10Devicegeometry_calc

  INTEGER(kind=4) :: opDat1Cardinality
  INTEGER(kind=4) :: opDat2Cardinality
  INTEGER(kind=4) :: opDat3Cardinality
  INTEGER(kind=4) :: opDat4Cardinality
  INTEGER(kind=4) :: opDat5Cardinality
  INTEGER(kind=4) :: opDat6Cardinality
  INTEGER(kind=4) :: opDat7Cardinality
  INTEGER(kind=4) :: opDat8Cardinality
  INTEGER(kind=4) :: opDat9Cardinality
  INTEGER(kind=4) :: opDat10Cardinality

  INTEGER(kind=4) :: blocksPerGrid
  INTEGER(kind=4) :: threadsPerBlock
  INTEGER(kind=4) :: dynamicSharedMemorySize
  INTEGER(kind=4) :: threadSynchRet
  INTEGER(kind=4), SAVE :: calledTimes
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: i2
  INTEGER(kind=4) :: i10
  INTEGER(kind=4) :: i20
  REAL(kind=4) :: dataTransfer

  INTEGER(kind=4) :: istat

  numberOfOpDats = 10

  opArgArray(1) = opArg1
  opArgArray(2) = opArg2
  opArgArray(3) = opArg3
  opArgArray(4) = opArg4
  opArgArray(5) = opArg5
  opArgArray(6) = opArg6
  opArgArray(7) = opArg7
  opArgArray(8) = opArg8
  opArgArray(9) = opArg9
  opArgArray(10) = opArg10

  returnSetKernelTiming = setKernelTime(15 , userSubroutine//C_NULL_CHAR, &
  & 0.d0, 0.00000,0.00000, 0)
  call op_timers_core(startTime)

  n_upper = op_mpi_halo_exchanges_cuda(set%setCPtr,numberOfOpDats,opArgArray)


  blocksPerGrid = 600
  threadsPerBlock = getBlockSize(userSubroutine//C_NULL_CHAR,set%setPtr%size)
  dynamicSharedMemorySize = reductionSize(opArgArray,numberOfOpDats) * threadsPerBlock

  opDat1Cardinality = opArg1%dim * getSetSizeFromOpArg(opArg1)
  opDat2Cardinality = opArg2%dim * getSetSizeFromOpArg(opArg2)
  opDat3Cardinality = opArg3%dim * getSetSizeFromOpArg(opArg3)
  opDat4Cardinality = opArg4%dim * getSetSizeFromOpArg(opArg4)
  opDat5Cardinality = opArg5%dim * getSetSizeFromOpArg(opArg5)
  opDat6Cardinality = opArg6%dim * getSetSizeFromOpArg(opArg6)
  opDat7Cardinality = opArg7%dim * getSetSizeFromOpArg(opArg7)
  opDat8Cardinality = opArg8%dim * getSetSizeFromOpArg(opArg8)
  opDat9Cardinality = opArg9%dim * getSetSizeFromOpArg(opArg9)
  opDat10Cardinality = opArg10%dim * getSetSizeFromOpArg(opArg10)


  CALL c_f_pointer(opArg1%data_d,opDat1Devicegeometry_calc,(/opDat1Cardinality/))
  CALL c_f_pointer(opArg2%data_d,opDat2Devicegeometry_calc,(/opDat2Cardinality/))
  CALL c_f_pointer(opArg3%data_d,opDat3Devicegeometry_calc,(/opDat3Cardinality/))
  CALL c_f_pointer(opArg4%data_d,opDat4Devicegeometry_calc,(/opDat4Cardinality/))
  CALL c_f_pointer(opArg5%data_d,opDat5Devicegeometry_calc,(/opDat5Cardinality/))
  CALL c_f_pointer(opArg6%data_d,opDat6Devicegeometry_calc,(/opDat6Cardinality/))
  CALL c_f_pointer(opArg7%data_d,opDat7Devicegeometry_calc,(/opDat7Cardinality/))
  CALL c_f_pointer(opArg8%data_d,opDat8Devicegeometry_calc,(/opDat8Cardinality/))
  CALL c_f_pointer(opArg9%data_d,opDat9Devicegeometry_calc,(/opDat9Cardinality/))
  CALL c_f_pointer(opArg10%data_d,opDat10Devicegeometry_calc,(/opDat10Cardinality/))


  CALL op_cuda_geometry_calc <<<blocksPerGrid,threadsPerBlock,dynamicSharedMemorySize>>>( &
  & getSetSizeFromOpArg(opArg7), &
  & opDat1Devicegeometry_calc, &
  & opDat2Devicegeometry_calc, &
  & opDat3Devicegeometry_calc, &
  & opDat4Devicegeometry_calc, &
  & opDat5Devicegeometry_calc, &
  & opDat6Devicegeometry_calc, &
  & opDat7Devicegeometry_calc, &
  & opDat8Devicegeometry_calc, &
  & opDat9Devicegeometry_calc, &
  & opDat10Devicegeometry_calc, &
  set%setPtr%size)

  IF ((n_upper .EQ. 0) .OR. (n_upper .EQ. set%setPtr%core_size)) THEN
    CALL op_mpi_wait_all_cuda(numberOfOpDats,opArgArray)
  END IF


  CALL op_mpi_set_dirtybit_cuda(numberOfOpDats,opArgArray)

  istat = cudaDeviceSynchronize()
  call op_timers_core(endTime)

  dataTransfer = 0.0
  dataTransfer = dataTransfer + opArg1%size * getSetSizeFromOpArg(opArg1) * 2.d0
  dataTransfer = dataTransfer + opArg2%size * getSetSizeFromOpArg(opArg2) * 2.d0
  dataTransfer = dataTransfer + opArg3%size * getSetSizeFromOpArg(opArg3) * 2.d0
  dataTransfer = dataTransfer + opArg4%size * getSetSizeFromOpArg(opArg4) * 2.d0
  dataTransfer = dataTransfer + opArg5%size * getSetSizeFromOpArg(opArg5) * 2.d0
  dataTransfer = dataTransfer + opArg6%size * getSetSizeFromOpArg(opArg6) * 2.d0
  dataTransfer = dataTransfer + opArg7%size * getSetSizeFromOpArg(opArg7)
  dataTransfer = dataTransfer + opArg8%size * getSetSizeFromOpArg(opArg8)
  dataTransfer = dataTransfer + opArg9%size * getSetSizeFromOpArg(opArg9) * 2.d0
  dataTransfer = dataTransfer + opArg10%size * getSetSizeFromOpArg(opArg10) * 2.d0
  returnSetKernelTiming = setKernelTime(15 , userSubroutine//C_NULL_CHAR, &
  & endTime-startTime, dataTransfer, 0.00000, 1)
  calledTimes = calledTimes + 1
END SUBROUTINE


! Stub for CPU execution

SUBROUTINE op_wrap_geometry_calc( &
  & opDat1Local, &
  & opDat2Local, &
  & opDat3Local, &
  & opDat4Local, &
  & opDat5Local, &
  & opDat6Local, &
  & opDat7Local, &
  & opDat8Local, &
  & opDat9Local, &
  & opDat10Local, &
  & bottom,top)
  real(8) opDat1Local(1,*)
  real(8) opDat2Local(1,*)
  real(8) opDat3Local(1,*)
  real(8) opDat4Local(1,*)
  real(8) opDat5Local(1,*)
  real(8) opDat6Local(1,*)
  real(8) opDat7Local(4,*)
  real(8) opDat8Local(4,*)
  real(8) opDat9Local(4,*)
  real(8) opDat10Local(1,*)
  INTEGER(kind=4) bottom,top,i1

  DO i1 = bottom, top - 1, 1
! kernel call
  CALL geometry_calc( &
    & opDat1Local(1,i1+1), &
    & opDat2Local(1,i1+1), &
    & opDat3Local(1,i1+1), &
    & opDat4Local(1,i1+1), &
    & opDat5Local(1,i1+1), &
    & opDat6Local(1,i1+1), &
    & opDat7Local(1,i1+1), &
    & opDat8Local(1,i1+1), &
    & opDat9Local(1,i1+1), &
    & opDat10Local(1,i1+1) &
    & )
  END DO
END SUBROUTINE
SUBROUTINE geometry_calc_host_cpu( userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4, &
  & opArg5, &
  & opArg6, &
  & opArg7, &
  & opArg8, &
  & opArg9, &
  & opArg10 )

  IMPLICIT NONE
  character(kind=c_char,len=*), INTENT(IN) :: userSubroutine
  type ( op_set ) , INTENT(IN) :: set

  type ( op_arg ) , INTENT(IN) :: opArg1
  type ( op_arg ) , INTENT(IN) :: opArg2
  type ( op_arg ) , INTENT(IN) :: opArg3
  type ( op_arg ) , INTENT(IN) :: opArg4
  type ( op_arg ) , INTENT(IN) :: opArg5
  type ( op_arg ) , INTENT(IN) :: opArg6
  type ( op_arg ) , INTENT(IN) :: opArg7
  type ( op_arg ) , INTENT(IN) :: opArg8
  type ( op_arg ) , INTENT(IN) :: opArg9
  type ( op_arg ) , INTENT(IN) :: opArg10

  type ( op_arg ) , DIMENSION(10) :: opArgArray
  INTEGER(kind=4) :: numberOfOpDats
  INTEGER(kind=4) :: n_upper
  type ( op_set_core ) , POINTER :: opSetCore

  real(8), POINTER, DIMENSION(:) :: opDat1Local
  INTEGER(kind=4) :: opDat1Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat2Local
  INTEGER(kind=4) :: opDat2Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat3Local
  INTEGER(kind=4) :: opDat3Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat4Local
  INTEGER(kind=4) :: opDat4Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat5Local
  INTEGER(kind=4) :: opDat5Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat6Local
  INTEGER(kind=4) :: opDat6Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat7Local
  INTEGER(kind=4) :: opDat7Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat8Local
  INTEGER(kind=4) :: opDat8Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat9Local
  INTEGER(kind=4) :: opDat9Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat10Local
  INTEGER(kind=4) :: opDat10Cardinality

  INTEGER(kind=4) :: threadID
  INTEGER(kind=4) :: numberOfThreads
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayStart
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayEnd
  REAL(kind=8) :: startTime
  REAL(kind=8) :: endTime
  INTEGER(kind=4) :: returnSetKernelTiming
  INTEGER(kind=4) :: sliceStart
  INTEGER(kind=4) :: sliceEnd
  REAL(kind=4) :: dataTransfer


  INTEGER(kind=4) :: i1,i2,n

  numberOfOpDats = 10

  opArgArray(1) = opArg1
  opArgArray(2) = opArg2
  opArgArray(3) = opArg3
  opArgArray(4) = opArg4
  opArgArray(5) = opArg5
  opArgArray(6) = opArg6
  opArgArray(7) = opArg7
  opArgArray(8) = opArg8
  opArgArray(9) = opArg9
  opArgArray(10) = opArg10

  returnSetKernelTiming = setKernelTime(15 , userSubroutine//C_NULL_CHAR, &
  & 0.d0, 0.00000,0.00000, 0)
  call op_timers_core(startTime)

  n_upper = op_mpi_halo_exchanges(set%setCPtr,numberOfOpDats,opArgArray)


#ifdef _OPENMP
  numberOfThreads = omp_get_max_threads()
#else
  numberOfThreads = 1
#endif

    opSetCore => set%setPtr

    opDat1Cardinality = opArg1%dim * getSetSizeFromOpArg(opArg1)
    opDat2Cardinality = opArg2%dim * getSetSizeFromOpArg(opArg2)
    opDat3Cardinality = opArg3%dim * getSetSizeFromOpArg(opArg3)
    opDat4Cardinality = opArg4%dim * getSetSizeFromOpArg(opArg4)
    opDat5Cardinality = opArg5%dim * getSetSizeFromOpArg(opArg5)
    opDat6Cardinality = opArg6%dim * getSetSizeFromOpArg(opArg6)
    opDat7Cardinality = opArg7%dim * getSetSizeFromOpArg(opArg7)
    opDat8Cardinality = opArg8%dim * getSetSizeFromOpArg(opArg8)
    opDat9Cardinality = opArg9%dim * getSetSizeFromOpArg(opArg9)
    opDat10Cardinality = opArg10%dim * getSetSizeFromOpArg(opArg10)
    CALL c_f_pointer(opArg1%data,opDat1Local,(/opDat1Cardinality/))
    CALL c_f_pointer(opArg2%data,opDat2Local,(/opDat2Cardinality/))
    CALL c_f_pointer(opArg3%data,opDat3Local,(/opDat3Cardinality/))
    CALL c_f_pointer(opArg4%data,opDat4Local,(/opDat4Cardinality/))
    CALL c_f_pointer(opArg5%data,opDat5Local,(/opDat5Cardinality/))
    CALL c_f_pointer(opArg6%data,opDat6Local,(/opDat6Cardinality/))
    CALL c_f_pointer(opArg7%data,opDat7Local,(/opDat7Cardinality/))
    CALL c_f_pointer(opArg8%data,opDat8Local,(/opDat8Cardinality/))
    CALL c_f_pointer(opArg9%data,opDat9Local,(/opDat9Cardinality/))
    CALL c_f_pointer(opArg10%data,opDat10Local,(/opDat10Cardinality/))


    !$OMP PARALLEL DO private (sliceStart,sliceEnd,i1,threadID)
    DO i1 = 0, numberOfThreads - 1, 1
      sliceStart = opSetCore%size * i1 / numberOfThreads
      sliceEnd = opSetCore%size * (i1 + 1) / numberOfThreads
      threadID = omp_get_thread_num()
! kernel call
      CALL op_wrap_geometry_calc( &
      & opDat1Local, &
      & opDat2Local, &
      & opDat3Local, &
      & opDat4Local, &
      & opDat5Local, &
      & opDat6Local, &
      & opDat7Local, &
      & opDat8Local, &
      & opDat9Local, &
      & opDat10Local, &
      & sliceStart, sliceEnd)
    END DO
    !$OMP END PARALLEL DO
    IF ((n_upper .EQ. 0) .OR. (n_upper .EQ. opSetCore%core_size)) THEN
      CALL op_mpi_wait_all(numberOfOpDats,opArgArray)
    END IF

    CALL op_mpi_set_dirtybit(numberOfOpDats,opArgArray)

    call op_timers_core(endTime)

    dataTransfer = 0.0
    dataTransfer = dataTransfer + opArg1%size * getSetSizeFromOpArg(opArg1) * 2.d0
    dataTransfer = dataTransfer + opArg2%size * getSetSizeFromOpArg(opArg2) * 2.d0
    dataTransfer = dataTransfer + opArg3%size * getSetSizeFromOpArg(opArg3) * 2.d0
    dataTransfer = dataTransfer + opArg4%size * getSetSizeFromOpArg(opArg4) * 2.d0
    dataTransfer = dataTransfer + opArg5%size * getSetSizeFromOpArg(opArg5) * 2.d0
    dataTransfer = dataTransfer + opArg6%size * getSetSizeFromOpArg(opArg6) * 2.d0
    dataTransfer = dataTransfer + opArg7%size * getSetSizeFromOpArg(opArg7)
    dataTransfer = dataTransfer + opArg8%size * getSetSizeFromOpArg(opArg8)
    dataTransfer = dataTransfer + opArg9%size * getSetSizeFromOpArg(opArg9) * 2.d0
    dataTransfer = dataTransfer + opArg10%size * getSetSizeFromOpArg(opArg10) * 2.d0
    returnSetKernelTiming = setKernelTime(15 , userSubroutine//C_NULL_CHAR, &
    & endTime-startTime, dataTransfer, 0.00000, 1)
  END SUBROUTINE
  END MODULE
