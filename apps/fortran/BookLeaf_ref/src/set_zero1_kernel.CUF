!
! auto-generated by op2.py on 2015-01-26 22:23
!

MODULE SET_ZERO1_MODULE
USE OP2_CONSTANTS
USE kinds_mod,    ONLY: ink,rlk
USE parameters_mod,ONLY: LI
USE OP2_FORTRAN_DECLARATIONS
USE OP2_FORTRAN_RT_SUPPORT
USE ISO_C_BINDING
USE CUDAFOR
USE CUDACONFIGURATIONPARAMS


#ifdef _OPENMP
  USE OMP_LIB
#endif

! set_zero1variable declarations




CONTAINS

!DEC$ ATTRIBUTES FORCEINLINE :: set_zero1
attributes (host) subroutine set_zero1(a)

    USE kinds_mod,ONLY: rlk

    implicit none

    REAL(KIND=rlk), INTENT(OUT) :: a

    a = 0.0_rlk

  END SUBROUTINE set_zero1

attributes (device) subroutine set_zero1_gpu(a)

    USE kinds_mod,ONLY: rlk

    implicit none

    REAL(KIND=rlk), INTENT(OUT) :: a

    a = 0.0_rlk

  END SUBROUTINE set_zero1_gpu


! CUDA kernel function
attributes (global) SUBROUTINE op_cuda_set_zero1( &
  & opDat1Deviceset_zero1, &
  & setSize)

  IMPLICIT NONE

! local variables
  real(8), DEVICE :: opDat1Deviceset_zero1(*)


  INTEGER(kind=4), VALUE :: setSize
  INTEGER(kind=4) :: i1


  DO i1 = threadIdx%x - 1 + (blockIdx%x - 1) * blockDim%x, setSize - 1, blockDim%x * gridDim%x

! kernel call

    CALL set_zero1_gpu( &
    & opDat1Deviceset_zero1(i1 + 1) &
    & )
  END DO


END SUBROUTINE

attributes (host) SUBROUTINE set_zero1_host( userSubroutine, set, &
  & opArg1 )

  IMPLICIT NONE
  character(len=9), INTENT(IN) :: userSubroutine
  TYPE ( op_set ) , INTENT(IN) :: set

  TYPE ( op_arg ) , INTENT(IN) :: opArg1

  IF (getHybridGPU()) THEN
    CALL set_zero1_host_gpu( userSubroutine, set, &
    & opArg1 )
  ELSE
    CALL set_zero1_host_cpu( userSubroutine, set, &
    & opArg1 )
  END IF
END SUBROUTINE


! Stub for GPU execution

attributes (host) SUBROUTINE set_zero1_host_gpu( userSubroutine, set, &
  & opArg1 )

  IMPLICIT NONE
  character(len=9), INTENT(IN) :: userSubroutine
  TYPE ( op_set ) , INTENT(IN) :: set

  TYPE ( op_arg ) , INTENT(IN) :: opArg1

  TYPE ( op_arg ) , DIMENSION(1) :: opArgArray
  INTEGER(kind=4) :: numberOfOpDats
  INTEGER(kind=4) :: n_upper
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayStart
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayEnd
  REAL(kind=8) :: startTime
  REAL(kind=8) :: endTime
  INTEGER(kind=4) :: returnSetKernelTiming


  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat1Deviceset_zero1

  INTEGER(kind=4) :: opDat1Cardinality

  INTEGER(kind=4) :: blocksPerGrid
  INTEGER(kind=4) :: threadsPerBlock
  INTEGER(kind=4) :: dynamicSharedMemorySize
  INTEGER(kind=4) :: threadSynchRet
  INTEGER(kind=4), SAVE :: calledTimes
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: i2
  INTEGER(kind=4) :: i10
  INTEGER(kind=4) :: i20
  REAL(kind=4) :: dataTransfer

  INTEGER(kind=4) :: istat

  numberOfOpDats = 1

  opArgArray(1) = opArg1

  returnSetKernelTiming = setKernelTime(2 , userSubroutine//C_NULL_CHAR, &
  & 0.d0, 0.00000,0.00000, 0)
  call op_timers_core(startTime)

  n_upper = op_mpi_halo_exchanges_cuda(set%setCPtr,numberOfOpDats,opArgArray)


  blocksPerGrid = 600
  threadsPerBlock = getBlockSize(userSubroutine//C_NULL_CHAR,set%setPtr%size)
  dynamicSharedMemorySize = reductionSize(opArgArray,numberOfOpDats) * threadsPerBlock

  opDat1Cardinality = opArg1%dim * getSetSizeFromOpArg(opArg1)


  CALL c_f_pointer(opArg1%data_d,opDat1Deviceset_zero1,(/opDat1Cardinality/))


  CALL op_cuda_set_zero1 <<<blocksPerGrid,threadsPerBlock,dynamicSharedMemorySize>>>( &
  & opDat1Deviceset_zero1, &
  set%setPtr%size)

  IF ((n_upper .EQ. 0) .OR. (n_upper .EQ. set%setPtr%core_size)) THEN
    CALL op_mpi_wait_all_cuda(numberOfOpDats,opArgArray)
  END IF


  CALL op_mpi_set_dirtybit_cuda(numberOfOpDats,opArgArray)

  istat = cudaDeviceSynchronize()
  call op_timers_core(endTime)

  dataTransfer = 0.0
  dataTransfer = dataTransfer + opArg1%size * getSetSizeFromOpArg(opArg1) * 2.d0
  returnSetKernelTiming = setKernelTime(2 , userSubroutine//C_NULL_CHAR, &
  & endTime-startTime, dataTransfer, 0.00000, 1)
  calledTimes = calledTimes + 1
END SUBROUTINE


! Stub for CPU execution

SUBROUTINE op_wrap_set_zero1( &
  & opDat1Local, &
  & bottom,top)
  real(8) opDat1Local(1,*)
  INTEGER(kind=4) bottom,top,i1

  DO i1 = bottom, top - 1, 1
! kernel call
  CALL set_zero1( &
    & opDat1Local(1,i1+1) &
    & )
  END DO
END SUBROUTINE
SUBROUTINE set_zero1_host_cpu( userSubroutine, set, &
  & opArg1 )

  IMPLICIT NONE
  character(kind=c_char,len=*), INTENT(IN) :: userSubroutine
  type ( op_set ) , INTENT(IN) :: set

  type ( op_arg ) , INTENT(IN) :: opArg1

  type ( op_arg ) , DIMENSION(1) :: opArgArray
  INTEGER(kind=4) :: numberOfOpDats
  INTEGER(kind=4) :: n_upper
  type ( op_set_core ) , POINTER :: opSetCore

  real(8), POINTER, DIMENSION(:) :: opDat1Local
  INTEGER(kind=4) :: opDat1Cardinality

  INTEGER(kind=4) :: threadID
  INTEGER(kind=4) :: numberOfThreads
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayStart
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayEnd
  REAL(kind=8) :: startTime
  REAL(kind=8) :: endTime
  INTEGER(kind=4) :: returnSetKernelTiming
  INTEGER(kind=4) :: sliceStart
  INTEGER(kind=4) :: sliceEnd
  REAL(kind=4) :: dataTransfer


  INTEGER(kind=4) :: i1,i2,n

  numberOfOpDats = 1

  opArgArray(1) = opArg1

  returnSetKernelTiming = setKernelTime(2 , userSubroutine//C_NULL_CHAR, &
  & 0.d0, 0.00000,0.00000, 0)
  call op_timers_core(startTime)

  n_upper = op_mpi_halo_exchanges(set%setCPtr,numberOfOpDats,opArgArray)


#ifdef _OPENMP
  numberOfThreads = omp_get_max_threads()
#else
  numberOfThreads = 1
#endif

    opSetCore => set%setPtr

    opDat1Cardinality = opArg1%dim * getSetSizeFromOpArg(opArg1)
    CALL c_f_pointer(opArg1%data,opDat1Local,(/opDat1Cardinality/))


    !$OMP PARALLEL DO private (sliceStart,sliceEnd,i1,threadID)
    DO i1 = 0, numberOfThreads - 1, 1
      sliceStart = opSetCore%size * i1 / numberOfThreads
      sliceEnd = opSetCore%size * (i1 + 1) / numberOfThreads
      threadID = omp_get_thread_num()
! kernel call
      CALL op_wrap_set_zero1( &
      & opDat1Local, &
      & sliceStart, sliceEnd)
    END DO
    !$OMP END PARALLEL DO
    IF ((n_upper .EQ. 0) .OR. (n_upper .EQ. opSetCore%core_size)) THEN
      CALL op_mpi_wait_all(numberOfOpDats,opArgArray)
    END IF

    CALL op_mpi_set_dirtybit(numberOfOpDats,opArgArray)

    call op_timers_core(endTime)

    dataTransfer = 0.0
    dataTransfer = dataTransfer + opArg1%size * getSetSizeFromOpArg(opArg1) * 2.d0
    returnSetKernelTiming = setKernelTime(2 , userSubroutine//C_NULL_CHAR, &
    & endTime-startTime, dataTransfer, 0.00000, 1)
  END SUBROUTINE
  END MODULE
