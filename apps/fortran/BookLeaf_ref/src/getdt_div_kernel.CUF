!
! auto-generated by op2.py on 2015-01-26 22:23
!

MODULE GETDT_DIV_MODULE
USE OP2_CONSTANTS
USE kinds_mod,    ONLY: ink,rlk
USE parameters_mod,ONLY: LI
USE OP2_FORTRAN_DECLARATIONS
USE OP2_FORTRAN_RT_SUPPORT
USE ISO_C_BINDING
USE CUDAFOR
USE CUDACONFIGURATIONPARAMS


#ifdef _OPENMP
  USE OMP_LIB
#endif

! getdt_divvariable declarations

real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: reductionArrayDevice8getdt_div


#define OP2_SOA(var,dim,stride) var((dim-1)*stride+1)

CONTAINS

! Reduction cuda kernel
  attributes (device) SUBROUTINE ReductionFloat8(reductionResult,inputValue,reductionOperation)
  REAL(kind=8), DIMENSION(:), DEVICE :: reductionResult
  REAL(kind=8) :: inputValue
  INTEGER(kind=4), VALUE :: reductionOperation
  REAL(kind=8), DIMENSION(0:*), SHARED :: sharedDouble8
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: threadID
  threadID = threadIdx%x - 1
  i1 = ishft(blockDim%x,-1)
  CALL syncthreads()
  sharedDouble8(threadID) = inputValue
  DO WHILE (i1 > 0 )
    CALL syncthreads()
    IF (threadID < i1) THEN
      SELECT CASE(reductionOperation)
      CASE (0)
      sharedDouble8(threadID) = sharedDouble8(threadID) + sharedDouble8(threadID + i1)
      CASE (1)
      IF (sharedDouble8(threadID + i1) < sharedDouble8(threadID)) THEN
        sharedDouble8(threadID) = sharedDouble8(threadID + i1)
      END IF
      CASE (2)
      IF (sharedDouble8(threadID + i1) > sharedDouble8(threadID)) THEN
        sharedDouble8(threadID) = sharedDouble8(threadID + i1)
      END IF
      END SELECT
    END IF
    i1 = ishft(i1,-1)
  END DO
  CALL syncthreads()
  IF (threadID .EQ. 0) THEN
    SELECT CASE(reductionOperation)
    CASE (0)
    reductionResult(1) = reductionResult(1) + sharedDouble8(0)
    CASE (1)
    IF (sharedDouble8(0) < reductionResult(1)) THEN
      reductionResult(1) = sharedDouble8(0)
    END IF
    CASE (2)
    IF (sharedDouble8(0) > reductionResult(1)) THEN
      reductionResult(1) = sharedDouble8(0)
    END IF
    END SELECT
  END IF
  CALL syncthreads()
  END SUBROUTINE

  attributes (device) SUBROUTINE ReductionInt4(reductionResult,inputValue,reductionOperation)
  INTEGER(kind=4), DIMENSION(:), DEVICE :: reductionResult
  INTEGER(kind=4) :: inputValue
  INTEGER(kind=4), VALUE :: reductionOperation
  INTEGER(kind=4), DIMENSION(0:*), SHARED :: sharedInt4
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: threadID
  threadID = threadIdx%x - 1
  i1 = ishft(blockDim%x,-1)
  CALL syncthreads()
  sharedInt4(threadID) = inputValue
  DO WHILE (i1 > 0 )
    CALL syncthreads()
    IF (threadID < i1) THEN
      SELECT CASE(reductionOperation)
      CASE (0)
      sharedInt4(threadID) = sharedInt4(threadID) + sharedInt4(threadID + i1)
      CASE (1)
      IF (sharedInt4(threadID + i1) < sharedInt4(threadID)) THEN
        sharedInt4(threadID) = sharedInt4(threadID + i1)
      END IF
      CASE (2)
      IF (sharedInt4(threadID + i1) > sharedInt4(threadID)) THEN
        sharedInt4(threadID) = sharedInt4(threadID + i1)
      END IF
      END SELECT
    END IF
    i1 = ishft(i1,-1)
  END DO
  CALL syncthreads()
  IF (threadID .EQ. 0) THEN
    SELECT CASE(reductionOperation)
    CASE (0)
    reductionResult(1) = reductionResult(1) + sharedInt4(0)
    CASE (1)
    IF (sharedInt4(0) < reductionResult(1)) THEN
      reductionResult(1) = sharedInt4(0)
    END IF
    CASE (2)
    IF (sharedInt4(0) > reductionResult(1)) THEN
      reductionResult(1) = sharedInt4(0)
    END IF
    END SELECT
  END IF
  CALL syncthreads()
  END SUBROUTINE

!DEC$ ATTRIBUTES FORCEINLINE :: getdt_div
attributes (host) subroutine getdt_div(elu,elv,a1,a3,b1,b3,elvol,w2)

    USE kinds_mod,ONLY: rlk
    USE parameters_mod,ONLY: N_SHAPE

    implicit none

    REAL(KIND=rlk), INTENT(IN) :: a1,a3,b1,b3,elvol
    REAL(KIND=rlk), DIMENSION(N_SHAPE), INTENT(IN) :: elu,elv
    REAL(KIND=rlk), INTENT(INOUT) :: w2

    REAL(KIND=rlk) :: w1

    w1=elu(1)*(-b3+b1)+elv(1)*( a3-a1)+   &
&        elu(2)*( b3+b1)+elv(2)*(-a3-a1)+   &
&        elu(3)*( b3-b1)+elv(3)*(-a3+a1)+   &
&        elu(4)*(-b3-b1)+elv(4)*( a3+a1)
    w1=ABS(w1)/elvol
    IF (w1.GT.w2) w2=w1

  END SUBROUTINE getdt_div

attributes (device) subroutine getdt_div_gpu(elu,elv,a1,a3,b1,b3,elvol,w2)

    USE kinds_mod,ONLY: rlk
    USE parameters_mod,ONLY: N_SHAPE

    implicit none

    REAL(KIND=rlk), INTENT(IN) :: a1,a3,b1,b3,elvol
    REAL(KIND=rlk), DIMENSION(N_SHAPE), INTENT(IN) :: elu,elv
    REAL(KIND=rlk), INTENT(INOUT) :: w2

    REAL(KIND=rlk) :: w1

    w1=OP2_SOA(elu,1, elements_stride_OP2)*(-b3+b1)+OP2_SOA(elv,1, elements_stride_OP2)*( a3-a1)+   &
&        OP2_SOA(elu,2, elements_stride_OP2)*( b3+b1)+OP2_SOA(elv,2, elements_stride_OP2)*(-a3-a1)+   &
&        OP2_SOA(elu,3, elements_stride_OP2)*( b3-b1)+OP2_SOA(elv,3, elements_stride_OP2)*(-a3+a1)+   &
&        OP2_SOA(elu,4, elements_stride_OP2)*(-b3-b1)+OP2_SOA(elv,4, elements_stride_OP2)*( a3+a1)
    w1=ABS(w1)/elvol
    IF (w1.GT.w2) w2=w1

  END SUBROUTINE getdt_div_gpu


! CUDA kernel function
  attributes (global) SUBROUTINE op_cuda_getdt_div( &
    &  soa_stride,      &
    & opDat1Devicegetdt_div, &
    & opDat2Devicegetdt_div, &
    & opDat3Devicegetdt_div, &
    & opDat4Devicegetdt_div, &
    & opDat5Devicegetdt_div, &
    & opDat6Devicegetdt_div, &
    & opDat7Devicegetdt_div, &
    & reductionArrayDevice8,   &
    & setSize)

    IMPLICIT NONE

! local variables
    real(8), DEVICE, INTENT(IN) :: opDat1Devicegetdt_div(*)
    real(8), DEVICE, INTENT(IN) :: opDat2Devicegetdt_div(*)
    real(8), DEVICE, INTENT(IN) :: opDat3Devicegetdt_div(*)
    real(8), DEVICE, INTENT(IN) :: opDat4Devicegetdt_div(*)
    real(8), DEVICE, INTENT(IN) :: opDat5Devicegetdt_div(*)
    real(8), DEVICE, INTENT(IN) :: opDat6Devicegetdt_div(*)
    real(8), DEVICE, INTENT(IN) :: opDat7Devicegetdt_div(*)

    real(8), DIMENSION(:), DEVICE :: reductionArrayDevice8
    real(8) :: opGblDat8Devicegetdt_div

    INTEGER(kind=4), VALUE :: soa_stride
    INTEGER(kind=4), VALUE :: setSize
    INTEGER(kind=4) :: i1

    opGblDat8Devicegetdt_div = reductionArrayDevice8(blockIdx%x - 1 + 1)

    DO i1 = threadIdx%x - 1 + (blockIdx%x - 1) * blockDim%x, setSize - 1, blockDim%x * gridDim%x

! kernel call

      CALL getdt_div_gpu( &
      & opDat1Devicegetdt_div(1 + i1), &
      & opDat2Devicegetdt_div(1 + i1), &
      & opDat3Devicegetdt_div(i1 + 1), &
      & opDat4Devicegetdt_div(i1 + 1), &
      & opDat5Devicegetdt_div(i1 + 1), &
      & opDat6Devicegetdt_div(i1 + 1), &
      & opDat7Devicegetdt_div(i1 + 1), &
      & opGblDat8Devicegetdt_div &
      & )
    END DO

    CALL ReductionFloat8(reductionArrayDevice8(blockIdx%x - 1 + 1:),opGblDat8Devicegetdt_div,2)

  END SUBROUTINE

  attributes (host) SUBROUTINE getdt_div_host( userSubroutine, set, &
    & opArg1, &
    & opArg2, &
    & opArg3, &
    & opArg4, &
    & opArg5, &
    & opArg6, &
    & opArg7, &
    & opArg8 )

    IMPLICIT NONE
    character(len=9), INTENT(IN) :: userSubroutine
    TYPE ( op_set ) , INTENT(IN) :: set

    TYPE ( op_arg ) , INTENT(IN) :: opArg1
    TYPE ( op_arg ) , INTENT(IN) :: opArg2
    TYPE ( op_arg ) , INTENT(IN) :: opArg3
    TYPE ( op_arg ) , INTENT(IN) :: opArg4
    TYPE ( op_arg ) , INTENT(IN) :: opArg5
    TYPE ( op_arg ) , INTENT(IN) :: opArg6
    TYPE ( op_arg ) , INTENT(IN) :: opArg7
    TYPE ( op_arg ) , INTENT(IN) :: opArg8

    IF (getHybridGPU()) THEN
      CALL getdt_div_host_gpu( userSubroutine, set, &
      & opArg1, &
      & opArg2, &
      & opArg3, &
      & opArg4, &
      & opArg5, &
      & opArg6, &
      & opArg7, &
      & opArg8 )
    ELSE
      CALL getdt_div_host_cpu( userSubroutine, set, &
      & opArg1, &
      & opArg2, &
      & opArg3, &
      & opArg4, &
      & opArg5, &
      & opArg6, &
      & opArg7, &
      & opArg8 )
    END IF
  END SUBROUTINE


! Stub for GPU execution

  attributes (host) SUBROUTINE getdt_div_host_gpu( userSubroutine, set, &
    & opArg1, &
    & opArg2, &
    & opArg3, &
    & opArg4, &
    & opArg5, &
    & opArg6, &
    & opArg7, &
    & opArg8 )

    IMPLICIT NONE
    character(len=9), INTENT(IN) :: userSubroutine
    TYPE ( op_set ) , INTENT(IN) :: set

    TYPE ( op_arg ) , INTENT(IN) :: opArg1
    TYPE ( op_arg ) , INTENT(IN) :: opArg2
    TYPE ( op_arg ) , INTENT(IN) :: opArg3
    TYPE ( op_arg ) , INTENT(IN) :: opArg4
    TYPE ( op_arg ) , INTENT(IN) :: opArg5
    TYPE ( op_arg ) , INTENT(IN) :: opArg6
    TYPE ( op_arg ) , INTENT(IN) :: opArg7
    TYPE ( op_arg ) , INTENT(IN) :: opArg8

    TYPE ( op_arg ) , DIMENSION(8) :: opArgArray
    INTEGER(kind=4) :: numberOfOpDats
    INTEGER(kind=4) :: n_upper
    INTEGER(kind=4), DIMENSION(1:8) :: timeArrayStart
    INTEGER(kind=4), DIMENSION(1:8) :: timeArrayEnd
    REAL(kind=8) :: startTime
    REAL(kind=8) :: endTime
    INTEGER(kind=4) :: returnSetKernelTiming


    real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat1Devicegetdt_div
    real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat2Devicegetdt_div
    real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat3Devicegetdt_div
    real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat4Devicegetdt_div
    real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat5Devicegetdt_div
    real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat6Devicegetdt_div
    real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat7Devicegetdt_div

    INTEGER(kind=4) :: opDat1Cardinality
    INTEGER(kind=4) :: opDat2Cardinality
    INTEGER(kind=4) :: opDat3Cardinality
    INTEGER(kind=4) :: opDat4Cardinality
    INTEGER(kind=4) :: opDat5Cardinality
    INTEGER(kind=4) :: opDat6Cardinality
    INTEGER(kind=4) :: opDat7Cardinality
    INTEGER(kind=4) :: opDat8Cardinality

    INTEGER(kind=4) :: blocksPerGrid
    INTEGER(kind=4) :: threadsPerBlock
    INTEGER(kind=4) :: dynamicSharedMemorySize
    INTEGER(kind=4) :: threadSynchRet
    INTEGER(kind=4), SAVE :: calledTimes
    INTEGER(kind=4) :: i1
    INTEGER(kind=4) :: i2
    INTEGER(kind=4) :: i10
    INTEGER(kind=4) :: i20
    REAL(kind=4) :: dataTransfer

    INTEGER(kind=4) :: istat
    real(8), POINTER :: opDat8Host
    real(8), DIMENSION(:), ALLOCATABLE :: reductionArrayHost8
    INTEGER(kind=4) :: reductionCardinality8

    numberOfOpDats = 8

    opArgArray(1) = opArg1
    opArgArray(2) = opArg2
    opArgArray(3) = opArg3
    opArgArray(4) = opArg4
    opArgArray(5) = opArg5
    opArgArray(6) = opArg6
    opArgArray(7) = opArg7
    opArgArray(8) = opArg8

    returnSetKernelTiming = setKernelTime(9 , userSubroutine//C_NULL_CHAR, &
    & 0.d0, 0.00000,0.00000, 0)
    call op_timers_core(startTime)

    n_upper = op_mpi_halo_exchanges_cuda(set%setCPtr,numberOfOpDats,opArgArray)


    blocksPerGrid = 600
    threadsPerBlock = getBlockSize(userSubroutine//C_NULL_CHAR,set%setPtr%size)
    dynamicSharedMemorySize = reductionSize(opArgArray,numberOfOpDats) * threadsPerBlock

    opDat1Cardinality = opArg1%dim * getSetSizeFromOpArg(opArg1)
    opDat2Cardinality = opArg2%dim * getSetSizeFromOpArg(opArg2)
    opDat3Cardinality = opArg3%dim * getSetSizeFromOpArg(opArg3)
    opDat4Cardinality = opArg4%dim * getSetSizeFromOpArg(opArg4)
    opDat5Cardinality = opArg5%dim * getSetSizeFromOpArg(opArg5)
    opDat6Cardinality = opArg6%dim * getSetSizeFromOpArg(opArg6)
    opDat7Cardinality = opArg7%dim * getSetSizeFromOpArg(opArg7)
    opDat8Cardinality = opArg8%dim


    CALL c_f_pointer(opArg1%data_d,opDat1Devicegetdt_div,(/opDat1Cardinality/))
    CALL c_f_pointer(opArg2%data_d,opDat2Devicegetdt_div,(/opDat2Cardinality/))
    CALL c_f_pointer(opArg3%data_d,opDat3Devicegetdt_div,(/opDat3Cardinality/))
    CALL c_f_pointer(opArg4%data_d,opDat4Devicegetdt_div,(/opDat4Cardinality/))
    CALL c_f_pointer(opArg5%data_d,opDat5Devicegetdt_div,(/opDat5Cardinality/))
    CALL c_f_pointer(opArg6%data_d,opDat6Devicegetdt_div,(/opDat6Cardinality/))
    CALL c_f_pointer(opArg7%data_d,opDat7Devicegetdt_div,(/opDat7Cardinality/))
    CALL c_f_pointer(opArg8%data,opDat8Host)

    reductionCardinality8 = blocksPerGrid * 1
    allocate( reductionArrayHost8(reductionCardinality8* (1)) )
    IF (.not. allocated(reductionArrayDevice8getdt_div)) THEN
      allocate( reductionArrayDevice8getdt_div(reductionCardinality8* (1)) )
    END IF

    DO i10 = 0, reductionCardinality8 - 1, 1
      reductionArrayHost8(i10+1) = opDat8Host
    END DO

    reductionArrayDevice8getdt_div = reductionArrayHost8

    CALL op_cuda_getdt_div <<<blocksPerGrid,threadsPerBlock,dynamicSharedMemorySize>>>( &
    & getSetSizeFromOpArg(opArg1), &
    & opDat1Devicegetdt_div, &
    & opDat2Devicegetdt_div, &
    & opDat3Devicegetdt_div, &
    & opDat4Devicegetdt_div, &
    & opDat5Devicegetdt_div, &
    & opDat6Devicegetdt_div, &
    & opDat7Devicegetdt_div, &
    reductionArrayDevice8getdt_div, &
    set%setPtr%size)

    IF ((n_upper .EQ. 0) .OR. (n_upper .EQ. set%setPtr%core_size)) THEN
      CALL op_mpi_wait_all_cuda(numberOfOpDats,opArgArray)
    END IF


    CALL op_mpi_set_dirtybit_cuda(numberOfOpDats,opArgArray)

    reductionArrayHost8 = reductionArrayDevice8getdt_div

    DO i10 = 0, reductionCardinality8 - 1, 1
      opDat8Host = MAX(opDat8Host , reductionArrayHost8(i10+1))
    END DO

    deallocate( reductionArrayHost8 )
    CALL op_mpi_reduce_double(opArg8,opArg8%data)

    istat = cudaDeviceSynchronize()
    call op_timers_core(endTime)

    dataTransfer = 0.0
    dataTransfer = dataTransfer + opArg1%size * getSetSizeFromOpArg(opArg1)
    dataTransfer = dataTransfer + opArg2%size * getSetSizeFromOpArg(opArg2)
    dataTransfer = dataTransfer + opArg3%size * getSetSizeFromOpArg(opArg3)
    dataTransfer = dataTransfer + opArg4%size * getSetSizeFromOpArg(opArg4)
    dataTransfer = dataTransfer + opArg5%size * getSetSizeFromOpArg(opArg5)
    dataTransfer = dataTransfer + opArg6%size * getSetSizeFromOpArg(opArg6)
    dataTransfer = dataTransfer + opArg7%size * getSetSizeFromOpArg(opArg7)
    dataTransfer = dataTransfer + opArg8%size * 2.d0
    returnSetKernelTiming = setKernelTime(9 , userSubroutine//C_NULL_CHAR, &
    & endTime-startTime, dataTransfer, 0.00000, 1)
    calledTimes = calledTimes + 1
  END SUBROUTINE


! Stub for CPU execution

  SUBROUTINE op_wrap_getdt_div( &
    & opDat1Local, &
    & opDat2Local, &
    & opDat3Local, &
    & opDat4Local, &
    & opDat5Local, &
    & opDat6Local, &
    & opDat7Local, &
    & opDat8Local, &
    & bottom,top)
    real(8) opDat1Local(4,*)
    real(8) opDat2Local(4,*)
    real(8) opDat3Local(1,*)
    real(8) opDat4Local(1,*)
    real(8) opDat5Local(1,*)
    real(8) opDat6Local(1,*)
    real(8) opDat7Local(1,*)
    real(8) opDat8Local(1)
    INTEGER(kind=4) bottom,top,i1

    DO i1 = bottom, top - 1, 1
! kernel call
    CALL getdt_div( &
      & opDat1Local(1,i1+1), &
      & opDat2Local(1,i1+1), &
      & opDat3Local(1,i1+1), &
      & opDat4Local(1,i1+1), &
      & opDat5Local(1,i1+1), &
      & opDat6Local(1,i1+1), &
      & opDat7Local(1,i1+1), &
      & opDat8Local(1) &
      & )
    END DO
  END SUBROUTINE
  SUBROUTINE getdt_div_host_cpu( userSubroutine, set, &
    & opArg1, &
    & opArg2, &
    & opArg3, &
    & opArg4, &
    & opArg5, &
    & opArg6, &
    & opArg7, &
    & opArg8 )

    IMPLICIT NONE
    character(kind=c_char,len=*), INTENT(IN) :: userSubroutine
    type ( op_set ) , INTENT(IN) :: set

    type ( op_arg ) , INTENT(IN) :: opArg1
    type ( op_arg ) , INTENT(IN) :: opArg2
    type ( op_arg ) , INTENT(IN) :: opArg3
    type ( op_arg ) , INTENT(IN) :: opArg4
    type ( op_arg ) , INTENT(IN) :: opArg5
    type ( op_arg ) , INTENT(IN) :: opArg6
    type ( op_arg ) , INTENT(IN) :: opArg7
    type ( op_arg ) , INTENT(IN) :: opArg8

    type ( op_arg ) , DIMENSION(8) :: opArgArray
    INTEGER(kind=4) :: numberOfOpDats
    INTEGER(kind=4) :: n_upper
    type ( op_set_core ) , POINTER :: opSetCore

    real(8), POINTER, DIMENSION(:) :: opDat1Local
    INTEGER(kind=4) :: opDat1Cardinality

    real(8), POINTER, DIMENSION(:) :: opDat2Local
    INTEGER(kind=4) :: opDat2Cardinality

    real(8), POINTER, DIMENSION(:) :: opDat3Local
    INTEGER(kind=4) :: opDat3Cardinality

    real(8), POINTER, DIMENSION(:) :: opDat4Local
    INTEGER(kind=4) :: opDat4Cardinality

    real(8), POINTER, DIMENSION(:) :: opDat5Local
    INTEGER(kind=4) :: opDat5Cardinality

    real(8), POINTER, DIMENSION(:) :: opDat6Local
    INTEGER(kind=4) :: opDat6Cardinality

    real(8), POINTER, DIMENSION(:) :: opDat7Local
    INTEGER(kind=4) :: opDat7Cardinality

    real(8), POINTER, DIMENSION(:) :: opDat8Local
    INTEGER(kind=4) :: threadID
    INTEGER(kind=4) :: numberOfThreads
    INTEGER(kind=4), DIMENSION(1:8) :: timeArrayStart
    INTEGER(kind=4), DIMENSION(1:8) :: timeArrayEnd
    REAL(kind=8) :: startTime
    REAL(kind=8) :: endTime
    INTEGER(kind=4) :: returnSetKernelTiming
    INTEGER(kind=4) :: sliceStart
    INTEGER(kind=4) :: sliceEnd
    REAL(kind=4) :: dataTransfer

    real(8), DIMENSION(:), ALLOCATABLE :: reductionArrayHost8

    INTEGER(kind=4) :: i1,i2,n

    numberOfOpDats = 8

    opArgArray(1) = opArg1
    opArgArray(2) = opArg2
    opArgArray(3) = opArg3
    opArgArray(4) = opArg4
    opArgArray(5) = opArg5
    opArgArray(6) = opArg6
    opArgArray(7) = opArg7
    opArgArray(8) = opArg8

    returnSetKernelTiming = setKernelTime(9 , userSubroutine//C_NULL_CHAR, &
    & 0.d0, 0.00000,0.00000, 0)
    call op_timers_core(startTime)

    n_upper = op_mpi_halo_exchanges(set%setCPtr,numberOfOpDats,opArgArray)


#ifdef _OPENMP
  numberOfThreads = omp_get_max_threads()
#else
  numberOfThreads = 1
#endif

      opSetCore => set%setPtr

      opDat1Cardinality = opArg1%dim * getSetSizeFromOpArg(opArg1)
      opDat2Cardinality = opArg2%dim * getSetSizeFromOpArg(opArg2)
      opDat3Cardinality = opArg3%dim * getSetSizeFromOpArg(opArg3)
      opDat4Cardinality = opArg4%dim * getSetSizeFromOpArg(opArg4)
      opDat5Cardinality = opArg5%dim * getSetSizeFromOpArg(opArg5)
      opDat6Cardinality = opArg6%dim * getSetSizeFromOpArg(opArg6)
      opDat7Cardinality = opArg7%dim * getSetSizeFromOpArg(opArg7)
      CALL c_f_pointer(opArg1%data,opDat1Local,(/opDat1Cardinality/))
      CALL c_f_pointer(opArg2%data,opDat2Local,(/opDat2Cardinality/))
      CALL c_f_pointer(opArg3%data,opDat3Local,(/opDat3Cardinality/))
      CALL c_f_pointer(opArg4%data,opDat4Local,(/opDat4Cardinality/))
      CALL c_f_pointer(opArg5%data,opDat5Local,(/opDat5Cardinality/))
      CALL c_f_pointer(opArg6%data,opDat6Local,(/opDat6Cardinality/))
      CALL c_f_pointer(opArg7%data,opDat7Local,(/opDat7Cardinality/))
      CALL c_f_pointer(opArg8%data,opDat8Local, (/opArg8%dim/))

      allocate( reductionArrayHost8(numberOfThreads * ((1-1)/64+1)*64) )
      DO i1 = 1, numberOfThreads+1 - 1, 1
        DO i2 = 1, 1+1 - 1, 1
          reductionArrayHost8((i1 - 1) * ((1-1)/64+1)*64 + i2) = opDat8Local(i2)
        END DO
      END DO

      !$OMP PARALLEL DO private (sliceStart,sliceEnd,i1,threadID)
      DO i1 = 0, numberOfThreads - 1, 1
        sliceStart = opSetCore%size * i1 / numberOfThreads
        sliceEnd = opSetCore%size * (i1 + 1) / numberOfThreads
        threadID = omp_get_thread_num()
! kernel call
        CALL op_wrap_getdt_div( &
        & opDat1Local, &
        & opDat2Local, &
        & opDat3Local, &
        & opDat4Local, &
        & opDat5Local, &
        & opDat6Local, &
        & opDat7Local, &
        & reductionArrayHost8(threadID * ((1-1)/64+1)*64 + 1), &
        & sliceStart, sliceEnd)
      END DO
      !$OMP END PARALLEL DO
      IF ((n_upper .EQ. 0) .OR. (n_upper .EQ. opSetCore%core_size)) THEN
        CALL op_mpi_wait_all(numberOfOpDats,opArgArray)
      END IF

      CALL op_mpi_set_dirtybit(numberOfOpDats,opArgArray)

      DO i1 = 1, numberOfThreads+1 - 1, 1
        opDat8Local = MAX(opDat8Local , reductionArrayHost8((i1 - 1) * ((1-1)/64+1)*64 + 1))
      END DO

      deallocate( reductionArrayHost8 )

      CALL op_mpi_reduce_double(opArg8,opArg8%data)

      call op_timers_core(endTime)

      dataTransfer = 0.0
      dataTransfer = dataTransfer + opArg1%size * getSetSizeFromOpArg(opArg1)
      dataTransfer = dataTransfer + opArg2%size * getSetSizeFromOpArg(opArg2)
      dataTransfer = dataTransfer + opArg3%size * getSetSizeFromOpArg(opArg3)
      dataTransfer = dataTransfer + opArg4%size * getSetSizeFromOpArg(opArg4)
      dataTransfer = dataTransfer + opArg5%size * getSetSizeFromOpArg(opArg5)
      dataTransfer = dataTransfer + opArg6%size * getSetSizeFromOpArg(opArg6)
      dataTransfer = dataTransfer + opArg7%size * getSetSizeFromOpArg(opArg7)
      dataTransfer = dataTransfer + opArg8%size * 2.d0
      returnSetKernelTiming = setKernelTime(9 , userSubroutine//C_NULL_CHAR, &
      & endTime-startTime, dataTransfer, 0.00000, 1)
    END SUBROUTINE
    END MODULE
