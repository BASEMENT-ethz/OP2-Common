!
! auto-generated by op2.py on 2015-01-26 22:23
!

MODULE GETQ_CHRISTIENSEN1_MODULE
USE OP2_CONSTANTS
USE kinds_mod,    ONLY: ink,rlk
USE parameters_mod,ONLY: LI
USE OP2_FORTRAN_DECLARATIONS
USE OP2_FORTRAN_RT_SUPPORT
USE ISO_C_BINDING
USE CUDAFOR
USE CUDACONFIGURATIONPARAMS


#ifdef _OPENMP
  USE OMP_LIB
#endif

! getq_christiensen1variable declarations


TYPE ( c_ptr )  :: planRet_getq_christiensen1

#define OP2_SOA(var,dim,stride) var((dim-1)*stride+1)

CONTAINS

!DEC$ ATTRIBUTES FORCEINLINE :: getq_christiensen1
attributes (host) subroutine getq_christiensen1(du,dv,dx,dy, &
&             du1,du2,du3,du4,dv1,dv2,dv3,dv4,&
&             dx1,dx2,dx3,dx4,dy1,dy2,dy3,dy4,&
&            ielsd,scratch,iside)
    USE kinds_mod,ONLY: rlk
    USE parameters_mod,ONLY: N_SHAPE
    USE reals_mod,    ONLY: zerocut

    implicit none

    REAL(KIND=rlk), DIMENSION(N_SHAPE), INTENT(IN) :: du,dv,dx,dy, &
&             du1,du2,du3,du4,dv1,dv2,dv3,dv4,&
&             dx1,dx2,dx3,dx4,dy1,dy2,dy3,dy4
    REAL(KIND=rlk), DIMENSION(N_SHAPE), INTENT(OUT) :: scratch
    INTEGER(KIND=ink), INTENT(INOUT) :: iside
    INTEGER(KIND=ink), DIMENSION(N_SHAPE), INTENT(IN) :: ielsd
    INTEGER(KIND=ink) :: is1,is2,ins
    REAL(KIND=rlk) :: w1,w2,w3,w4,den,uhat,vhat,xhat,yhat

    is1=MOD(iside+2_ink,N_SHAPE)+1_ink
    is2=iside+1_ink

    ! edge 1
    w1=du(is1)
    w2=dv(is1)
    w3=dx(is1)
    w4=dy(is1)
    den=SQRT(w1*w1+w2*w2)
    den=1.0_rlk/MAX(den,zerocut)
    uhat=w1*den
    vhat=w2*den
    den=SQRT(w3*w3+w4*w4)
    den=1.0_rlk/MAX(den,zerocut)
    xhat=w3*den
    yhat=w4*den
    den=w3*xhat+w4*yhat
    w1=(w1*uhat+w2*vhat)/SIGN(MAX(ABS(den),zerocut),den)
    w1=1.0_rlk/SIGN(MAX(ABS(w1),zerocut),w1)
    ins=ielsd(iside)
    ins=MOD(ins,N_SHAPE)+1_ink
    IF (iside.eq.1_ink) THEN
      den=dx1(ins)*xhat+dy1(ins)*yhat
      w2=(du1(ins)*uhat+dv1(ins)*vhat)/                        &
  &        SIGN(MAX(ABS(den),zerocut),den)
    ELSE
      den=dx2(ins)*xhat+dy2(ins)*yhat
      w2=(du2(ins)*uhat+dv2(ins)*vhat)/                        &
  &        SIGN(MAX(ABS(den),zerocut),den)
    ENDIF
    scratch(1)=w2*w1
    ins=ielsd(iside+2_ink)
    ins=MOD(ins+2_ink,N_SHAPE)+1_ink
    IF (iside.eq.1_ink) THEN
      den=dx3(ins)*xhat+dy3(ins)*yhat
      w3=(du3(ins)*uhat+dv3(ins)*vhat)/                        &
  &        SIGN(MAX(ABS(den),zerocut),den)
    ELSE
      den=dx4(ins)*xhat+dy4(ins)*yhat
      w3=(du4(ins)*uhat+dv4(ins)*vhat)/                        &
&          SIGN(MAX(ABS(den),zerocut),den)
    ENDIF
    scratch(2)=w3*w1
    ! edge 2
    w1=du(is2)
    w2=dv(is2)
    w3=dx(is2)
    w4=dy(is2)
    den=SQRT(w1*w1+w2*w2)
    den=1.0_rlk/MAX(den,zerocut)
    uhat=w1*den
    vhat=w2*den
    den=SQRT(w3*w3+w4*w4)
    den=1.0_rlk/MAX(den,zerocut)
    xhat=w3*den
    yhat=w4*den
    den=w3*xhat+w4*yhat
    w1=(w1*uhat+w2*vhat)/SIGN(MAX(ABS(den),zerocut),den)
    w1=1.0_rlk/SIGN(MAX(ABS(w1),zerocut),w1)
    ins=ielsd(iside)
    ins=MOD(ins+2_ink,N_SHAPE)+1_ink
    IF (iside.eq.1_ink) THEN
      den=dx1(ins)*xhat+dy1(ins)*yhat
      w2=(du1(ins)*uhat+dv1(ins)*vhat)/                         &
  &        SIGN(MAX(ABS(den),zerocut),den)
    ELSE
      den=dx2(ins)*xhat+dy2(ins)*yhat
      w2=(du2(ins)*uhat+dv2(ins)*vhat)/                         &
  &        SIGN(MAX(ABS(den),zerocut),den)
    ENDIF
    scratch(3)=w2*w1
    ins=ielsd(iside+2_ink)
    ins=MOD(ins,N_SHAPE)+1_ink
    IF (iside.eq.1_ink) THEN
      den=dx3(ins)*xhat+dy3(ins)*yhat
      w3=(du3(ins)*uhat+dv3(ins)*vhat)/                         &
  &        SIGN(MAX(ABS(den),zerocut),den)
    ELSE
      den=dx4(ins)*xhat+dy4(ins)*yhat
      w3=(du4(ins)*uhat+dv4(ins)*vhat)/                         &
  &        SIGN(MAX(ABS(den),zerocut),den)
    ENDIF
    scratch(4)=w3*w1

  END SUBROUTINE getq_christiensen1

attributes (device) subroutine getq_christiensen1_gpu(du,dv,dx,dy, &
&             du1,du2,du3,du4,dv1,dv2,dv3,dv4,&
&             dx1,dx2,dx3,dx4,dy1,dy2,dy3,dy4,&
&            ielsd,scratch,iside)
    USE kinds_mod,ONLY: rlk
    USE parameters_mod,ONLY: N_SHAPE
    USE reals_mod,    ONLY: zerocut

    implicit none

    REAL(KIND=rlk), DIMENSION(N_SHAPE), INTENT(IN) :: du,dv,dx,dy, &
&             du1,du2,du3,du4,dv1,dv2,dv3,dv4,&
&             dx1,dx2,dx3,dx4,dy1,dy2,dy3,dy4
    REAL(KIND=rlk), DIMENSION(N_SHAPE), INTENT(OUT) :: scratch
    INTEGER(KIND=ink), INTENT(INOUT) :: iside
    INTEGER(KIND=ink), DIMENSION(N_SHAPE), INTENT(IN) :: ielsd
    INTEGER(KIND=ink) :: is1,is2,ins
    REAL(KIND=rlk) :: w1,w2,w3,w4,den,uhat,vhat,xhat,yhat

    is1=MOD(iside+2_ink,N_SHAPE)+1_ink
    is2=iside+1_ink

    ! edge 1
    w1=OP2_SOA(du,is1, elements_stride_OP2)
    w2=OP2_SOA(dv,is1, elements_stride_OP2)
    w3=OP2_SOA(dx,is1, elements_stride_OP2)
    w4=OP2_SOA(dy,is1, elements_stride_OP2)
    den=SQRT(w1*w1+w2*w2)
    den=1.0_rlk/MAX(den,zerocut_OP2)
    uhat=w1*den
    vhat=w2*den
    den=SQRT(w3*w3+w4*w4)
    den=1.0_rlk/MAX(den,zerocut_OP2)
    xhat=w3*den
    yhat=w4*den
    den=w3*xhat+w4*yhat
    w1=(w1*uhat+w2*vhat)/SIGN(MAX(ABS(den),zerocut_OP2),den)
    w1=1.0_rlk/SIGN(MAX(ABS(w1),zerocut_OP2),w1)
    ins=OP2_SOA(ielsd,iside, elements_stride_OP2)
    ins=MOD(ins,N_SHAPE)+1_ink
    IF (iside.eq.1_ink) THEN
      den=OP2_SOA(dx1,ins, elements_stride_OP2)*xhat+OP2_SOA(dy1,ins, elements_stride_OP2)*yhat
      w2=(OP2_SOA(du1,ins, elements_stride_OP2)*uhat+OP2_SOA(dv1,ins, elements_stride_OP2)*vhat)/                        &
  &        SIGN(MAX(ABS(den),zerocut_OP2),den)
    ELSE
      den=OP2_SOA(dx2,ins, elements_stride_OP2)*xhat+OP2_SOA(dy2,ins, elements_stride_OP2)*yhat
      w2=(OP2_SOA(du2,ins, elements_stride_OP2)*uhat+OP2_SOA(dv2,ins, elements_stride_OP2)*vhat)/                        &
  &        SIGN(MAX(ABS(den),zerocut_OP2),den)
    ENDIF
    OP2_SOA(scratch,1, elements_stride_OP2)=w2*w1
    ins=OP2_SOA(ielsd,iside+2_ink, elements_stride_OP2)
    ins=MOD(ins+2_ink,N_SHAPE)+1_ink
    IF (iside.eq.1_ink) THEN
      den=OP2_SOA(dx3,ins, elements_stride_OP2)*xhat+OP2_SOA(dy3,ins, elements_stride_OP2)*yhat
      w3=(OP2_SOA(du3,ins, elements_stride_OP2)*uhat+OP2_SOA(dv3,ins, elements_stride_OP2)*vhat)/                        &
  &        SIGN(MAX(ABS(den),zerocut_OP2),den)
    ELSE
      den=OP2_SOA(dx4,ins, elements_stride_OP2)*xhat+OP2_SOA(dy4,ins, elements_stride_OP2)*yhat
      w3=(OP2_SOA(du4,ins, elements_stride_OP2)*uhat+OP2_SOA(dv4,ins, elements_stride_OP2)*vhat)/                        &
&          SIGN(MAX(ABS(den),zerocut_OP2),den)
    ENDIF
    OP2_SOA(scratch,2, elements_stride_OP2)=w3*w1
    ! edge 2
    w1=OP2_SOA(du,is2, elements_stride_OP2)
    w2=OP2_SOA(dv,is2, elements_stride_OP2)
    w3=OP2_SOA(dx,is2, elements_stride_OP2)
    w4=OP2_SOA(dy,is2, elements_stride_OP2)
    den=SQRT(w1*w1+w2*w2)
    den=1.0_rlk/MAX(den,zerocut_OP2)
    uhat=w1*den
    vhat=w2*den
    den=SQRT(w3*w3+w4*w4)
    den=1.0_rlk/MAX(den,zerocut_OP2)
    xhat=w3*den
    yhat=w4*den
    den=w3*xhat+w4*yhat
    w1=(w1*uhat+w2*vhat)/SIGN(MAX(ABS(den),zerocut_OP2),den)
    w1=1.0_rlk/SIGN(MAX(ABS(w1),zerocut_OP2),w1)
    ins=OP2_SOA(ielsd,iside, elements_stride_OP2)
    ins=MOD(ins+2_ink,N_SHAPE)+1_ink
    IF (iside.eq.1_ink) THEN
      den=OP2_SOA(dx1,ins, elements_stride_OP2)*xhat+OP2_SOA(dy1,ins, elements_stride_OP2)*yhat
      w2=(OP2_SOA(du1,ins, elements_stride_OP2)*uhat+OP2_SOA(dv1,ins, elements_stride_OP2)*vhat)/                         &
  &        SIGN(MAX(ABS(den),zerocut_OP2),den)
    ELSE
      den=OP2_SOA(dx2,ins, elements_stride_OP2)*xhat+OP2_SOA(dy2,ins, elements_stride_OP2)*yhat
      w2=(OP2_SOA(du2,ins, elements_stride_OP2)*uhat+OP2_SOA(dv2,ins, elements_stride_OP2)*vhat)/                         &
  &        SIGN(MAX(ABS(den),zerocut_OP2),den)
    ENDIF
    OP2_SOA(scratch,3, elements_stride_OP2)=w2*w1
    ins=OP2_SOA(ielsd,iside+2_ink, elements_stride_OP2)
    ins=MOD(ins,N_SHAPE)+1_ink
    IF (iside.eq.1_ink) THEN
      den=OP2_SOA(dx3,ins, elements_stride_OP2)*xhat+OP2_SOA(dy3,ins, elements_stride_OP2)*yhat
      w3=(OP2_SOA(du3,ins, elements_stride_OP2)*uhat+OP2_SOA(dv3,ins, elements_stride_OP2)*vhat)/                         &
  &        SIGN(MAX(ABS(den),zerocut_OP2),den)
    ELSE
      den=OP2_SOA(dx4,ins, elements_stride_OP2)*xhat+OP2_SOA(dy4,ins, elements_stride_OP2)*yhat
      w3=(OP2_SOA(du4,ins, elements_stride_OP2)*uhat+OP2_SOA(dv4,ins, elements_stride_OP2)*vhat)/                         &
  &        SIGN(MAX(ABS(den),zerocut_OP2),den)
    ENDIF
    OP2_SOA(scratch,4, elements_stride_OP2)=w3*w1

  END SUBROUTINE getq_christiensen1_gpu


! CUDA kernel function
attributes (global) SUBROUTINE op_cuda_getq_christiensen1( &
  &  soa_stride,      &
  & opDat5Devicegetq_christiensen1, &
  & opDat9Devicegetq_christiensen1, &
  & opDat13Devicegetq_christiensen1, &
  & opDat17Devicegetq_christiensen1, &
  & opDat5Map, &
  & opDat1Devicegetq_christiensen1, &
  & opDat2Devicegetq_christiensen1, &
  & opDat3Devicegetq_christiensen1, &
  & opDat4Devicegetq_christiensen1, &
  & opDat21Devicegetq_christiensen1, &
  & opDat22Devicegetq_christiensen1, &
  & opGblDat23Devicegetq_christiensen1,   &
  & pblkMap, &
  & poffset, &
  & pnelems, &
  & pnthrcol, &
  & pthrcol, &
  & setSize, &
  & blockOffset)

  IMPLICIT NONE

! local variables
  real(8), DEVICE :: opDat5Devicegetq_christiensen1(*)
  real(8), DEVICE :: opDat9Devicegetq_christiensen1(*)
  real(8), DEVICE :: opDat13Devicegetq_christiensen1(*)
  real(8), DEVICE :: opDat17Devicegetq_christiensen1(*)
  INTEGER(kind=4), DEVICE, INTENT(IN) :: opDat5Map(*)
  real(8), DEVICE, INTENT(IN) :: opDat1Devicegetq_christiensen1(*)
  real(8), DEVICE, INTENT(IN) :: opDat2Devicegetq_christiensen1(*)
  real(8), DEVICE, INTENT(IN) :: opDat3Devicegetq_christiensen1(*)
  real(8), DEVICE, INTENT(IN) :: opDat4Devicegetq_christiensen1(*)
  integer(4), DEVICE, INTENT(IN) :: opDat21Devicegetq_christiensen1(*)
  real(8), DEVICE :: opDat22Devicegetq_christiensen1(*)

  integer(4), VALUE :: opGblDat23Devicegetq_christiensen1
  INTEGER(kind=4) map5idx, map6idx, map7idx, map8idx

  INTEGER(kind=4), VALUE :: soa_stride
  INTEGER(kind=4), DIMENSION(0:*), DEVICE :: pblkMap
  INTEGER(kind=4), DIMENSION(0:*), DEVICE :: poffset
  INTEGER(kind=4), DIMENSION(0:*), DEVICE :: pnelems
  INTEGER(kind=4), DIMENSION(0:*), DEVICE :: pnthrcol
  INTEGER(kind=4), DIMENSION(0:*), DEVICE, INTENT(IN) :: pthrcol
  INTEGER(kind=4), VALUE :: blockOffset
  INTEGER(kind=4), VALUE :: setSize


  INTEGER(kind=4), SHARED :: numOfColours
  INTEGER(kind=4), SHARED :: numberOfActiveThreadsCeiling
  INTEGER(kind=4), SHARED :: blockID
  INTEGER(kind=4), SHARED :: threadBlockOffset
  INTEGER(kind=4), SHARED :: numberOfActiveThreads
  INTEGER(kind=4) :: colour1
  INTEGER(kind=4) :: colour2
  INTEGER(kind=4) :: n1
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: i2
  INTEGER(kind=4) :: i3


  IF (threadIdx%x - 1 .EQ. 0) THEN
    blockID = pblkMap(blockIdx%x - 1 + blockOffset)
    numberOfActiveThreads = pnelems(blockID)
    numberOfActiveThreadsCeiling = blockDim%x * (1 + (numberOfActiveThreads - 1) / blockDim%x)
    numOfColours = pnthrcol(blockID)
    threadBlockOffset = poffset(blockID)

  END IF

  CALL syncthreads()

  i1 = threadIdx%x - 1

  DO WHILE (i1 < numberOfActiveThreadsCeiling )
    IF (i1 < numberOfActiveThreads) THEN
      i3 = i1
      map5idx = opDat5Map(1 + i3 + threadBlockOffset + setSize * 0)
      map6idx = opDat5Map(1 + i3 + threadBlockOffset + setSize * 1)
      map7idx = opDat5Map(1 + i3 + threadBlockOffset + setSize * 2)
      map8idx = opDat5Map(1 + i3 + threadBlockOffset + setSize * 3)

! kernel call
      CALL getq_christiensen1_gpu( &
      & opDat1Devicegetq_christiensen1(1 + (i3 + threadBlockOffset)), &
      & opDat2Devicegetq_christiensen1(1 + (i3 + threadBlockOffset)), &
      & opDat3Devicegetq_christiensen1(1 + (i3 + threadBlockOffset)), &
      & opDat4Devicegetq_christiensen1(1 + (i3 + threadBlockOffset)), &
      & opDat5Devicegetq_christiensen1(1 + map5idx), &
      & opDat5Devicegetq_christiensen1(1 + map6idx), &
      & opDat5Devicegetq_christiensen1(1 + map7idx), &
      & opDat5Devicegetq_christiensen1(1 + map8idx), &
      & opDat9Devicegetq_christiensen1(1 + map5idx), &
      & opDat9Devicegetq_christiensen1(1 + map6idx), &
      & opDat9Devicegetq_christiensen1(1 + map7idx), &
      & opDat9Devicegetq_christiensen1(1 + map8idx), &
      & opDat13Devicegetq_christiensen1(1 + map5idx), &
      & opDat13Devicegetq_christiensen1(1 + map6idx), &
      & opDat13Devicegetq_christiensen1(1 + map7idx), &
      & opDat13Devicegetq_christiensen1(1 + map8idx), &
      & opDat17Devicegetq_christiensen1(1 + map5idx), &
      & opDat17Devicegetq_christiensen1(1 + map6idx), &
      & opDat17Devicegetq_christiensen1(1 + map7idx), &
      & opDat17Devicegetq_christiensen1(1 + map8idx), &
      & opDat21Devicegetq_christiensen1(1 + (i3 + threadBlockOffset)), &
      & opDat22Devicegetq_christiensen1(1 + (i3 + threadBlockOffset)), &
      & opGblDat23Devicegetq_christiensen1 &
      & )

    END IF
    i1 = i1 + blockDim%x
  END DO



END SUBROUTINE

attributes (host) SUBROUTINE getq_christiensen1_host( userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4, &
  & opArg5, &
  & opArg6, &
  & opArg7, &
  & opArg8, &
  & opArg9, &
  & opArg10, &
  & opArg11, &
  & opArg12, &
  & opArg13, &
  & opArg14, &
  & opArg15, &
  & opArg16, &
  & opArg17, &
  & opArg18, &
  & opArg19, &
  & opArg20, &
  & opArg21, &
  & opArg22, &
  & opArg23 )

  IMPLICIT NONE
  character(len=18), INTENT(IN) :: userSubroutine
  TYPE ( op_set ) , INTENT(IN) :: set

  TYPE ( op_arg ) , INTENT(IN) :: opArg1
  TYPE ( op_arg ) , INTENT(IN) :: opArg2
  TYPE ( op_arg ) , INTENT(IN) :: opArg3
  TYPE ( op_arg ) , INTENT(IN) :: opArg4
  TYPE ( op_arg ) , INTENT(IN) :: opArg5
  TYPE ( op_arg ) , INTENT(IN) :: opArg6
  TYPE ( op_arg ) , INTENT(IN) :: opArg7
  TYPE ( op_arg ) , INTENT(IN) :: opArg8
  TYPE ( op_arg ) , INTENT(IN) :: opArg9
  TYPE ( op_arg ) , INTENT(IN) :: opArg10
  TYPE ( op_arg ) , INTENT(IN) :: opArg11
  TYPE ( op_arg ) , INTENT(IN) :: opArg12
  TYPE ( op_arg ) , INTENT(IN) :: opArg13
  TYPE ( op_arg ) , INTENT(IN) :: opArg14
  TYPE ( op_arg ) , INTENT(IN) :: opArg15
  TYPE ( op_arg ) , INTENT(IN) :: opArg16
  TYPE ( op_arg ) , INTENT(IN) :: opArg17
  TYPE ( op_arg ) , INTENT(IN) :: opArg18
  TYPE ( op_arg ) , INTENT(IN) :: opArg19
  TYPE ( op_arg ) , INTENT(IN) :: opArg20
  TYPE ( op_arg ) , INTENT(IN) :: opArg21
  TYPE ( op_arg ) , INTENT(IN) :: opArg22
  TYPE ( op_arg ) , INTENT(IN) :: opArg23

  IF (getHybridGPU()) THEN
    CALL getq_christiensen1_host_gpu( userSubroutine, set, &
    & opArg1, &
    & opArg2, &
    & opArg3, &
    & opArg4, &
    & opArg5, &
    & opArg6, &
    & opArg7, &
    & opArg8, &
    & opArg9, &
    & opArg10, &
    & opArg11, &
    & opArg12, &
    & opArg13, &
    & opArg14, &
    & opArg15, &
    & opArg16, &
    & opArg17, &
    & opArg18, &
    & opArg19, &
    & opArg20, &
    & opArg21, &
    & opArg22, &
    & opArg23 )
  ELSE
    CALL getq_christiensen1_host_cpu( userSubroutine, set, &
    & opArg1, &
    & opArg2, &
    & opArg3, &
    & opArg4, &
    & opArg5, &
    & opArg6, &
    & opArg7, &
    & opArg8, &
    & opArg9, &
    & opArg10, &
    & opArg11, &
    & opArg12, &
    & opArg13, &
    & opArg14, &
    & opArg15, &
    & opArg16, &
    & opArg17, &
    & opArg18, &
    & opArg19, &
    & opArg20, &
    & opArg21, &
    & opArg22, &
    & opArg23 )
  END IF
END SUBROUTINE


! Stub for GPU execution

attributes (host) SUBROUTINE getq_christiensen1_host_gpu( userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4, &
  & opArg5, &
  & opArg6, &
  & opArg7, &
  & opArg8, &
  & opArg9, &
  & opArg10, &
  & opArg11, &
  & opArg12, &
  & opArg13, &
  & opArg14, &
  & opArg15, &
  & opArg16, &
  & opArg17, &
  & opArg18, &
  & opArg19, &
  & opArg20, &
  & opArg21, &
  & opArg22, &
  & opArg23 )

  IMPLICIT NONE
  character(len=18), INTENT(IN) :: userSubroutine
  TYPE ( op_set ) , INTENT(IN) :: set

  TYPE ( op_arg ) , INTENT(IN) :: opArg1
  TYPE ( op_arg ) , INTENT(IN) :: opArg2
  TYPE ( op_arg ) , INTENT(IN) :: opArg3
  TYPE ( op_arg ) , INTENT(IN) :: opArg4
  TYPE ( op_arg ) , INTENT(IN) :: opArg5
  TYPE ( op_arg ) , INTENT(IN) :: opArg6
  TYPE ( op_arg ) , INTENT(IN) :: opArg7
  TYPE ( op_arg ) , INTENT(IN) :: opArg8
  TYPE ( op_arg ) , INTENT(IN) :: opArg9
  TYPE ( op_arg ) , INTENT(IN) :: opArg10
  TYPE ( op_arg ) , INTENT(IN) :: opArg11
  TYPE ( op_arg ) , INTENT(IN) :: opArg12
  TYPE ( op_arg ) , INTENT(IN) :: opArg13
  TYPE ( op_arg ) , INTENT(IN) :: opArg14
  TYPE ( op_arg ) , INTENT(IN) :: opArg15
  TYPE ( op_arg ) , INTENT(IN) :: opArg16
  TYPE ( op_arg ) , INTENT(IN) :: opArg17
  TYPE ( op_arg ) , INTENT(IN) :: opArg18
  TYPE ( op_arg ) , INTENT(IN) :: opArg19
  TYPE ( op_arg ) , INTENT(IN) :: opArg20
  TYPE ( op_arg ) , INTENT(IN) :: opArg21
  TYPE ( op_arg ) , INTENT(IN) :: opArg22
  TYPE ( op_arg ) , INTENT(IN) :: opArg23

  TYPE ( op_arg ) , DIMENSION(23) :: opArgArray
  INTEGER(kind=4) :: numberOfOpDats
  INTEGER(kind=4) :: n_upper
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayStart
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayEnd
  REAL(kind=8) :: startTime
  REAL(kind=8) :: endTime
  INTEGER(kind=4) :: returnSetKernelTiming


  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat5Devicegetq_christiensen1
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: opMap5Devicegetq_christiensen1
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat9Devicegetq_christiensen1
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: opMap9Devicegetq_christiensen1
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat13Devicegetq_christiensen1
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: opMap13Devicegetq_christiensen1
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat17Devicegetq_christiensen1
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: opMap17Devicegetq_christiensen1
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat1Devicegetq_christiensen1
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat2Devicegetq_christiensen1
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat3Devicegetq_christiensen1
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat4Devicegetq_christiensen1
  integer(4), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat21Devicegetq_christiensen1
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat22Devicegetq_christiensen1

  INTEGER(kind=4) :: opDat5Cardinality
  INTEGER(kind=4) :: opMap5Cardinality
  INTEGER(kind=4) :: opDat9Cardinality
  INTEGER(kind=4) :: opMap9Cardinality
  INTEGER(kind=4) :: opDat13Cardinality
  INTEGER(kind=4) :: opMap13Cardinality
  INTEGER(kind=4) :: opDat17Cardinality
  INTEGER(kind=4) :: opMap17Cardinality
  INTEGER(kind=4) :: opDat1Cardinality
  INTEGER(kind=4) :: opDat2Cardinality
  INTEGER(kind=4) :: opDat3Cardinality
  INTEGER(kind=4) :: opDat4Cardinality
  INTEGER(kind=4) :: opDat21Cardinality
  INTEGER(kind=4) :: opDat22Cardinality
  INTEGER(kind=4) :: opDat23Cardinality

  TYPE ( op_plan ) , POINTER :: actualPlan_getq_christiensen1

  INTEGER(kind=4) :: blocksPerGrid
  INTEGER(kind=4) :: threadsPerBlock
  INTEGER(kind=4) :: dynamicSharedMemorySize
  INTEGER(kind=4) :: threadSynchRet
  INTEGER(kind=4), DIMENSION(1:23) :: opDatArray
  INTEGER(kind=4), DIMENSION(1:23) :: mappingIndicesArray
  INTEGER(kind=4), DIMENSION(1:23) :: mappingArray
  INTEGER(kind=4), DIMENSION(1:23) :: accessDescriptorArray
  INTEGER(kind=4), DIMENSION(1:23) :: indirectionDescriptorArray

  INTEGER(kind=4) :: mappingArray5Size
  INTEGER(kind=4) :: mappingArray9Size
  INTEGER(kind=4) :: mappingArray13Size
  INTEGER(kind=4) :: mappingArray17Size

  INTEGER(kind=4) :: numberOfIndirectOpDats
  INTEGER(kind=4) :: blockOffset
  INTEGER(kind=4) :: pblkMapSize
  INTEGER(kind=4) :: poffsetSize
  INTEGER(kind=4) :: pnelemsSize
  INTEGER(kind=4) :: pnthrcolSize
  INTEGER(kind=4) :: pthrcolSize
  INTEGER(kind=4), POINTER, DIMENSION(:) :: ncolblk
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: pblkMap
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: poffset
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: pnelems
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: pnthrcol
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: pthrcol
  INTEGER(kind=4) :: partitionSize
  INTEGER(kind=4) :: blockSize
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: i2
  INTEGER(kind=4), SAVE :: calledTimes

  INTEGER(kind=4) :: istat
  integer(4), POINTER :: opDat23Host

  numberOfOpDats = 23

  opArgArray(1) = opArg1
  opArgArray(2) = opArg2
  opArgArray(3) = opArg3
  opArgArray(4) = opArg4
  opArgArray(5) = opArg5
  opArgArray(6) = opArg6
  opArgArray(7) = opArg7
  opArgArray(8) = opArg8
  opArgArray(9) = opArg9
  opArgArray(10) = opArg10
  opArgArray(11) = opArg11
  opArgArray(12) = opArg12
  opArgArray(13) = opArg13
  opArgArray(14) = opArg14
  opArgArray(15) = opArg15
  opArgArray(16) = opArg16
  opArgArray(17) = opArg17
  opArgArray(18) = opArg18
  opArgArray(19) = opArg19
  opArgArray(20) = opArg20
  opArgArray(21) = opArg21
  opArgArray(22) = opArg22
  opArgArray(23) = opArg23

  returnSetKernelTiming = setKernelTime(21 , userSubroutine//C_NULL_CHAR, &
  & 0.d0, 0.00000,0.00000, 0)
  call op_timers_core(startTime)

  n_upper = op_mpi_halo_exchanges_cuda(set%setCPtr,numberOfOpDats,opArgArray)

  indirectionDescriptorArray(1) = -1
  indirectionDescriptorArray(2) = -1
  indirectionDescriptorArray(3) = -1
  indirectionDescriptorArray(4) = -1
  indirectionDescriptorArray(5) = 0
  indirectionDescriptorArray(6) = 0
  indirectionDescriptorArray(7) = 0
  indirectionDescriptorArray(8) = 0
  indirectionDescriptorArray(9) = 1
  indirectionDescriptorArray(10) = 1
  indirectionDescriptorArray(11) = 1
  indirectionDescriptorArray(12) = 1
  indirectionDescriptorArray(13) = 2
  indirectionDescriptorArray(14) = 2
  indirectionDescriptorArray(15) = 2
  indirectionDescriptorArray(16) = 2
  indirectionDescriptorArray(17) = 3
  indirectionDescriptorArray(18) = 3
  indirectionDescriptorArray(19) = 3
  indirectionDescriptorArray(20) = 3
  indirectionDescriptorArray(21) = -1
  indirectionDescriptorArray(22) = -1
  indirectionDescriptorArray(23) = -1

  numberOfIndirectOpDats = 4

  partitionSize = getPartitionSize(userSubroutine//C_NULL_CHAR,set%setPtr%size)

  planRet_getq_christiensen1 = FortranPlanCaller( &
  & userSubroutine//C_NULL_CHAR, &
  & set%setCPtr, &
  & partitionSize, &
  & numberOfOpDats, &
  & opArgArray, &
  & numberOfIndirectOpDats, &
  & indirectionDescriptorArray,2)

  opDat5Cardinality = opArg5%dim * getSetSizeFromOpArg(opArg5)
  opMap5Cardinality = set%setPtr%size * getMapDimFromOpArg(opArg5)
  opDat9Cardinality = opArg9%dim * getSetSizeFromOpArg(opArg9)
  opMap9Cardinality = set%setPtr%size * getMapDimFromOpArg(opArg9)
  opDat13Cardinality = opArg13%dim * getSetSizeFromOpArg(opArg13)
  opMap13Cardinality = set%setPtr%size * getMapDimFromOpArg(opArg13)
  opDat17Cardinality = opArg17%dim * getSetSizeFromOpArg(opArg17)
  opMap17Cardinality = set%setPtr%size * getMapDimFromOpArg(opArg17)
  opDat1Cardinality = opArg1%dim * getSetSizeFromOpArg(opArg1)
  opDat2Cardinality = opArg2%dim * getSetSizeFromOpArg(opArg2)
  opDat3Cardinality = opArg3%dim * getSetSizeFromOpArg(opArg3)
  opDat4Cardinality = opArg4%dim * getSetSizeFromOpArg(opArg4)
  opDat21Cardinality = opArg21%dim * getSetSizeFromOpArg(opArg21)
  opDat22Cardinality = opArg22%dim * getSetSizeFromOpArg(opArg22)
  opDat23Cardinality = opArg23%dim


  CALL c_f_pointer(opArg5%data_d,opDat5Devicegetq_christiensen1,(/opDat5Cardinality/))
  CALL c_f_pointer(opArg5%map_data_d,opMap5Devicegetq_christiensen1,(/opMap5Cardinality/))
  CALL c_f_pointer(opArg9%data_d,opDat9Devicegetq_christiensen1,(/opDat9Cardinality/))
  CALL c_f_pointer(opArg9%map_data_d,opMap9Devicegetq_christiensen1,(/opMap9Cardinality/))
  CALL c_f_pointer(opArg13%data_d,opDat13Devicegetq_christiensen1,(/opDat13Cardinality/))
  CALL c_f_pointer(opArg13%map_data_d,opMap13Devicegetq_christiensen1,(/opMap13Cardinality/))
  CALL c_f_pointer(opArg17%data_d,opDat17Devicegetq_christiensen1,(/opDat17Cardinality/))
  CALL c_f_pointer(opArg17%map_data_d,opMap17Devicegetq_christiensen1,(/opMap17Cardinality/))
  CALL c_f_pointer(opArg1%data_d,opDat1Devicegetq_christiensen1,(/opDat1Cardinality/))
  CALL c_f_pointer(opArg2%data_d,opDat2Devicegetq_christiensen1,(/opDat2Cardinality/))
  CALL c_f_pointer(opArg3%data_d,opDat3Devicegetq_christiensen1,(/opDat3Cardinality/))
  CALL c_f_pointer(opArg4%data_d,opDat4Devicegetq_christiensen1,(/opDat4Cardinality/))
  CALL c_f_pointer(opArg21%data_d,opDat21Devicegetq_christiensen1,(/opDat21Cardinality/))
  CALL c_f_pointer(opArg22%data_d,opDat22Devicegetq_christiensen1,(/opDat22Cardinality/))
  CALL c_f_pointer(opArg23%data,opDat23Host)

  CALL c_f_pointer(planRet_getq_christiensen1,actualPlan_getq_christiensen1)
  CALL c_f_pointer(actualPlan_getq_christiensen1%ncolblk,ncolblk,(/set%setPtr%size/))
  pblkMapSize = actualPlan_getq_christiensen1%nblocks
  CALL c_f_pointer(actualPlan_getq_christiensen1%blkmap_d,pblkMap,(/pblkMapSize/))
  poffsetSize = actualPlan_getq_christiensen1%nblocks
  CALL c_f_pointer(actualPlan_getq_christiensen1%offset_d,poffset,(/poffsetSize/))
  pnelemsSize = actualPlan_getq_christiensen1%nblocks
  CALL c_f_pointer(actualPlan_getq_christiensen1%nelems_d,pnelems,(/pnelemsSize/))
  pnthrcolSize = actualPlan_getq_christiensen1%nblocks
  CALL c_f_pointer(actualPlan_getq_christiensen1%nthrcol,pnthrcol,(/pnthrcolSize/))
  pthrcolSize = set%setPtr%size
  CALL c_f_pointer(actualPlan_getq_christiensen1%thrcol,pthrcol,(/pthrcolSize/))


  blockOffset = 0

  threadsPerBlock = getBlockSize(userSubroutine//C_NULL_CHAR,set%setPtr%size)
  DO i2 = 0, actualPlan_getq_christiensen1%ncolors - 1, 1
    IF (i2 .EQ. actualPlan_getq_christiensen1%ncolors_core) THEN
      CALL op_mpi_wait_all_cuda(numberOfOpDats,opArgArray)
    END IF

    blocksPerGrid = ncolblk(i2 + 1)
    dynamicSharedMemorySize = reductionSize(opArgArray,numberOfOpDats) * threadsPerBlock

    CALL op_cuda_getq_christiensen1 <<<blocksPerGrid,threadsPerBlock,dynamicSharedMemorySize>>> (&
    & getSetSizeFromOpArg(opArg1), &
    & opDat5Devicegetq_christiensen1, &
    & opDat9Devicegetq_christiensen1, &
    & opDat13Devicegetq_christiensen1, &
    & opDat17Devicegetq_christiensen1, &
    & opMap5Devicegetq_christiensen1, &
    & opDat1Devicegetq_christiensen1, &
    & opDat2Devicegetq_christiensen1, &
    & opDat3Devicegetq_christiensen1, &
    & opDat4Devicegetq_christiensen1, &
    & opDat21Devicegetq_christiensen1, &
    & opDat22Devicegetq_christiensen1, &
    & opDat23Host, &
    & pblkMap, &
    & poffset,pnelems,pnthrcol,pthrcol, &
    & set%setPtr%size+set%setPtr%exec_size, blockOffset)

    blockOffset = blockOffset + blocksPerGrid
  END DO


  IF ((n_upper .EQ. 0) .OR. (n_upper .EQ. set%setPtr%core_size)) THEN
    CALL op_mpi_wait_all_cuda(numberOfOpDats,opArgArray)
  END IF


  CALL op_mpi_set_dirtybit_cuda(numberOfOpDats,opArgArray)

  istat = cudaDeviceSynchronize()
  call op_timers_core(endTime)

  returnSetKernelTiming = setKernelTime(21 , userSubroutine//C_NULL_CHAR, &
  & endTime-startTime, actualPlan_getq_christiensen1%transfer,actualPlan_getq_christiensen1%transfer2, 1)
  calledTimes = calledTimes + 1
END SUBROUTINE


! Stub for CPU execution

SUBROUTINE op_wrap_getq_christiensen1( &
  & opDat5Local, &
  & opDat9Local, &
  & opDat13Local, &
  & opDat17Local, &
  & opDat1Local, &
  & opDat2Local, &
  & opDat3Local, &
  & opDat4Local, &
  & opDat21Local, &
  & opDat22Local, &
  & opDat23Local, &
  & opDat5Map, &
  & opDat5MapDim, &
  & bottom,top)
  real(8) opDat5Local(4,*)
  real(8) opDat9Local(4,*)
  real(8) opDat13Local(4,*)
  real(8) opDat17Local(4,*)
  real(8) opDat1Local(4,*)
  real(8) opDat2Local(4,*)
  real(8) opDat3Local(4,*)
  real(8) opDat4Local(4,*)
  integer(4) opDat21Local(4,*)
  real(8) opDat22Local(4,*)
  integer(4) opDat23Local(1)
  INTEGER(kind=4) opDat5Map(*)
  INTEGER(kind=4) opDat5MapDim
  INTEGER(kind=4) bottom,top,i1
  INTEGER(kind=4) map5idx, map6idx, map7idx, map8idx

  DO i1 = bottom, top - 1, 1
    map5idx = opDat5Map(1 + i1 * opDat5MapDim + 0)+1
    map6idx = opDat5Map(1 + i1 * opDat5MapDim + 1)+1
    map7idx = opDat5Map(1 + i1 * opDat5MapDim + 2)+1
    map8idx = opDat5Map(1 + i1 * opDat5MapDim + 3)+1
! kernel call
  CALL getq_christiensen1( &
    & opDat1Local(1,i1+1), &
    & opDat2Local(1,i1+1), &
    & opDat3Local(1,i1+1), &
    & opDat4Local(1,i1+1), &
    & opDat5Local(1,map5idx), &
    & opDat5Local(1,map6idx), &
    & opDat5Local(1,map7idx), &
    & opDat5Local(1,map8idx), &
    & opDat9Local(1,map5idx), &
    & opDat9Local(1,map6idx), &
    & opDat9Local(1,map7idx), &
    & opDat9Local(1,map8idx), &
    & opDat13Local(1,map5idx), &
    & opDat13Local(1,map6idx), &
    & opDat13Local(1,map7idx), &
    & opDat13Local(1,map8idx), &
    & opDat17Local(1,map5idx), &
    & opDat17Local(1,map6idx), &
    & opDat17Local(1,map7idx), &
    & opDat17Local(1,map8idx), &
    & opDat21Local(1,i1+1), &
    & opDat22Local(1,i1+1), &
    & opDat23Local(1) &
    & )
  END DO
END SUBROUTINE
SUBROUTINE getq_christiensen1_host_cpu( userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4, &
  & opArg5, &
  & opArg6, &
  & opArg7, &
  & opArg8, &
  & opArg9, &
  & opArg10, &
  & opArg11, &
  & opArg12, &
  & opArg13, &
  & opArg14, &
  & opArg15, &
  & opArg16, &
  & opArg17, &
  & opArg18, &
  & opArg19, &
  & opArg20, &
  & opArg21, &
  & opArg22, &
  & opArg23 )

  IMPLICIT NONE
  character(kind=c_char,len=*), INTENT(IN) :: userSubroutine
  type ( op_set ) , INTENT(IN) :: set

  type ( op_arg ) , INTENT(IN) :: opArg1
  type ( op_arg ) , INTENT(IN) :: opArg2
  type ( op_arg ) , INTENT(IN) :: opArg3
  type ( op_arg ) , INTENT(IN) :: opArg4
  type ( op_arg ) , INTENT(IN) :: opArg5
  type ( op_arg ) , INTENT(IN) :: opArg6
  type ( op_arg ) , INTENT(IN) :: opArg7
  type ( op_arg ) , INTENT(IN) :: opArg8
  type ( op_arg ) , INTENT(IN) :: opArg9
  type ( op_arg ) , INTENT(IN) :: opArg10
  type ( op_arg ) , INTENT(IN) :: opArg11
  type ( op_arg ) , INTENT(IN) :: opArg12
  type ( op_arg ) , INTENT(IN) :: opArg13
  type ( op_arg ) , INTENT(IN) :: opArg14
  type ( op_arg ) , INTENT(IN) :: opArg15
  type ( op_arg ) , INTENT(IN) :: opArg16
  type ( op_arg ) , INTENT(IN) :: opArg17
  type ( op_arg ) , INTENT(IN) :: opArg18
  type ( op_arg ) , INTENT(IN) :: opArg19
  type ( op_arg ) , INTENT(IN) :: opArg20
  type ( op_arg ) , INTENT(IN) :: opArg21
  type ( op_arg ) , INTENT(IN) :: opArg22
  type ( op_arg ) , INTENT(IN) :: opArg23

  type ( op_arg ) , DIMENSION(23) :: opArgArray
  INTEGER(kind=4) :: numberOfOpDats
  INTEGER(kind=4) :: n_upper
  type ( op_set_core ) , POINTER :: opSetCore

  INTEGER(kind=4), POINTER, DIMENSION(:) :: opDat5Map
  INTEGER(kind=4) :: opDat5MapDim
  real(8), POINTER, DIMENSION(:) :: opDat5Local
  INTEGER(kind=4) :: opDat5Cardinality

  INTEGER(kind=4), POINTER, DIMENSION(:) :: opDat9Map
  INTEGER(kind=4) :: opDat9MapDim
  real(8), POINTER, DIMENSION(:) :: opDat9Local
  INTEGER(kind=4) :: opDat9Cardinality

  INTEGER(kind=4), POINTER, DIMENSION(:) :: opDat13Map
  INTEGER(kind=4) :: opDat13MapDim
  real(8), POINTER, DIMENSION(:) :: opDat13Local
  INTEGER(kind=4) :: opDat13Cardinality

  INTEGER(kind=4), POINTER, DIMENSION(:) :: opDat17Map
  INTEGER(kind=4) :: opDat17MapDim
  real(8), POINTER, DIMENSION(:) :: opDat17Local
  INTEGER(kind=4) :: opDat17Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat1Local
  INTEGER(kind=4) :: opDat1Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat2Local
  INTEGER(kind=4) :: opDat2Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat3Local
  INTEGER(kind=4) :: opDat3Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat4Local
  INTEGER(kind=4) :: opDat4Cardinality

  integer(4), POINTER, DIMENSION(:) :: opDat21Local
  INTEGER(kind=4) :: opDat21Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat22Local
  INTEGER(kind=4) :: opDat22Cardinality

  integer(4), POINTER, DIMENSION(:) :: opDat23Local
  INTEGER(kind=4) :: threadID
  INTEGER(kind=4) :: numberOfThreads
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayStart
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayEnd
  REAL(kind=8) :: startTime
  REAL(kind=8) :: endTime
  INTEGER(kind=4) :: returnSetKernelTiming
  LOGICAL :: firstTime_getq_christiensen1 = .TRUE.
  type ( c_ptr )  :: planRet_getq_christiensen1
  type ( op_plan ) , POINTER :: actualPlan_getq_christiensen1
  INTEGER(kind=4), POINTER, DIMENSION(:) :: ncolblk_getq_christiensen1
  INTEGER(kind=4), POINTER, DIMENSION(:) :: blkmap_getq_christiensen1
  INTEGER(kind=4), POINTER, DIMENSION(:) :: nelems_getq_christiensen1
  INTEGER(kind=4), POINTER, DIMENSION(:) :: offset_getq_christiensen1
  INTEGER(kind=4), DIMENSION(1:23) :: indirectionDescriptorArray
  INTEGER(kind=4) :: numberOfIndirectOpDats
  INTEGER(kind=4) :: blockOffset
  INTEGER(kind=4) :: nblocks
  INTEGER(kind=4) :: partitionSize
  INTEGER(kind=4) :: blockID
  INTEGER(kind=4) :: nelem
  INTEGER(kind=4) :: offset_b


  INTEGER(kind=4) :: i1,i2,n

  numberOfOpDats = 23

  opArgArray(1) = opArg1
  opArgArray(2) = opArg2
  opArgArray(3) = opArg3
  opArgArray(4) = opArg4
  opArgArray(5) = opArg5
  opArgArray(6) = opArg6
  opArgArray(7) = opArg7
  opArgArray(8) = opArg8
  opArgArray(9) = opArg9
  opArgArray(10) = opArg10
  opArgArray(11) = opArg11
  opArgArray(12) = opArg12
  opArgArray(13) = opArg13
  opArgArray(14) = opArg14
  opArgArray(15) = opArg15
  opArgArray(16) = opArg16
  opArgArray(17) = opArg17
  opArgArray(18) = opArg18
  opArgArray(19) = opArg19
  opArgArray(20) = opArg20
  opArgArray(21) = opArg21
  opArgArray(22) = opArg22
  opArgArray(23) = opArg23

  returnSetKernelTiming = setKernelTime(21 , userSubroutine//C_NULL_CHAR, &
  & 0.d0, 0.00000,0.00000, 0)
  call op_timers_core(startTime)

  n_upper = op_mpi_halo_exchanges(set%setCPtr,numberOfOpDats,opArgArray)

#ifdef OP_PART_SIZE_1
  partitionSize = OP_PART_SIZE_1
#else
  partitionSize = 0
#endif

#ifdef _OPENMP
  numberOfThreads = omp_get_max_threads()
#else
  numberOfThreads = 1
#endif
    indirectionDescriptorArray(1) = -1
    indirectionDescriptorArray(2) = -1
    indirectionDescriptorArray(3) = -1
    indirectionDescriptorArray(4) = -1
    indirectionDescriptorArray(5) = 0
    indirectionDescriptorArray(6) = 0
    indirectionDescriptorArray(7) = 0
    indirectionDescriptorArray(8) = 0
    indirectionDescriptorArray(9) = 1
    indirectionDescriptorArray(10) = 1
    indirectionDescriptorArray(11) = 1
    indirectionDescriptorArray(12) = 1
    indirectionDescriptorArray(13) = 2
    indirectionDescriptorArray(14) = 2
    indirectionDescriptorArray(15) = 2
    indirectionDescriptorArray(16) = 2
    indirectionDescriptorArray(17) = 3
    indirectionDescriptorArray(18) = 3
    indirectionDescriptorArray(19) = 3
    indirectionDescriptorArray(20) = 3
    indirectionDescriptorArray(21) = -1
    indirectionDescriptorArray(22) = -1
    indirectionDescriptorArray(23) = -1

    numberOfIndirectOpDats = 4

    planRet_getq_christiensen1 = FortranPlanCaller( &
    & userSubroutine//C_NULL_CHAR, &
    & set%setCPtr, &
    & partitionSize, &
    & numberOfOpDats, &
    & opArgArray, &
    & numberOfIndirectOpDats, &
    & indirectionDescriptorArray,2)

    CALL c_f_pointer(planRet_getq_christiensen1,actualPlan_getq_christiensen1)
    CALL c_f_pointer(actualPlan_getq_christiensen1%ncolblk,ncolblk_getq_christiensen1,(/actualPlan_getq_christiensen1%ncolors_core/))
    CALL c_f_pointer(actualPlan_getq_christiensen1%blkmap,blkmap_getq_christiensen1,(/actualPlan_getq_christiensen1%nblocks/))
    CALL c_f_pointer(actualPlan_getq_christiensen1%offset,offset_getq_christiensen1,(/actualPlan_getq_christiensen1%nblocks/))
    CALL c_f_pointer(actualPlan_getq_christiensen1%nelems,nelems_getq_christiensen1,(/actualPlan_getq_christiensen1%nblocks/))

    opSetCore => set%setPtr

    opDat5Cardinality = opArg5%dim * getSetSizeFromOpArg(opArg5)
    opDat5MapDim = getMapDimFromOpArg(opArg5)
    opDat9Cardinality = opArg9%dim * getSetSizeFromOpArg(opArg9)
    opDat9MapDim = getMapDimFromOpArg(opArg9)
    opDat13Cardinality = opArg13%dim * getSetSizeFromOpArg(opArg13)
    opDat13MapDim = getMapDimFromOpArg(opArg13)
    opDat17Cardinality = opArg17%dim * getSetSizeFromOpArg(opArg17)
    opDat17MapDim = getMapDimFromOpArg(opArg17)
    opDat1Cardinality = opArg1%dim * getSetSizeFromOpArg(opArg1)
    opDat2Cardinality = opArg2%dim * getSetSizeFromOpArg(opArg2)
    opDat3Cardinality = opArg3%dim * getSetSizeFromOpArg(opArg3)
    opDat4Cardinality = opArg4%dim * getSetSizeFromOpArg(opArg4)
    opDat21Cardinality = opArg21%dim * getSetSizeFromOpArg(opArg21)
    opDat22Cardinality = opArg22%dim * getSetSizeFromOpArg(opArg22)
    CALL c_f_pointer(opArg5%data,opDat5Local,(/opDat5Cardinality/))
    CALL c_f_pointer(opArg5%map_data,opDat5Map,(/opSetCore%size*opDat5MapDim/))
    CALL c_f_pointer(opArg9%data,opDat9Local,(/opDat9Cardinality/))
    CALL c_f_pointer(opArg9%map_data,opDat9Map,(/opSetCore%size*opDat9MapDim/))
    CALL c_f_pointer(opArg13%data,opDat13Local,(/opDat13Cardinality/))
    CALL c_f_pointer(opArg13%map_data,opDat13Map,(/opSetCore%size*opDat13MapDim/))
    CALL c_f_pointer(opArg17%data,opDat17Local,(/opDat17Cardinality/))
    CALL c_f_pointer(opArg17%map_data,opDat17Map,(/opSetCore%size*opDat17MapDim/))
    CALL c_f_pointer(opArg1%data,opDat1Local,(/opDat1Cardinality/))
    CALL c_f_pointer(opArg2%data,opDat2Local,(/opDat2Cardinality/))
    CALL c_f_pointer(opArg3%data,opDat3Local,(/opDat3Cardinality/))
    CALL c_f_pointer(opArg4%data,opDat4Local,(/opDat4Cardinality/))
    CALL c_f_pointer(opArg21%data,opDat21Local,(/opDat21Cardinality/))
    CALL c_f_pointer(opArg22%data,opDat22Local,(/opDat22Cardinality/))
    CALL c_f_pointer(opArg23%data,opDat23Local, (/opArg23%dim/))


    blockOffset = 0

    DO i1 = 0, actualPlan_getq_christiensen1%ncolors - 1, 1
      IF (i1 .EQ. actualPlan_getq_christiensen1%ncolors_core) THEN
        CALL op_mpi_wait_all(numberOfOpDats,opArgArray)
      END IF

      nblocks = ncolblk_getq_christiensen1(i1 + 1)
      !$OMP PARALLEL DO private (threadID, blockID, nelem, offset_b)
      DO i2 = 0, nblocks - 1, 1
        threadID = omp_get_thread_num()
        blockID = blkmap_getq_christiensen1(i2+blockOffset+1)
        nelem = nelems_getq_christiensen1(blockID+1)
        offset_b = offset_getq_christiensen1(blockID+1)
        CALL op_wrap_getq_christiensen1( &
        & opDat5Local, &
        & opDat9Local, &
        & opDat13Local, &
        & opDat17Local, &
        & opDat1Local, &
        & opDat2Local, &
        & opDat3Local, &
        & opDat4Local, &
        & opDat21Local, &
        & opDat22Local, &
        & opDat23Local, &
        & opDat5Map, &
        & opDat5MapDim, &
        & offset_b, offset_b+nelem)
      END DO
      !$OMP END PARALLEL DO
      blockOffset = blockOffset + nblocks
    END DO
    IF ((n_upper .EQ. 0) .OR. (n_upper .EQ. opSetCore%core_size)) THEN
      CALL op_mpi_wait_all(numberOfOpDats,opArgArray)
    END IF

    CALL op_mpi_set_dirtybit(numberOfOpDats,opArgArray)

    call op_timers_core(endTime)

    returnSetKernelTiming = setKernelTime(21 , userSubroutine//C_NULL_CHAR, &
    & endTime-startTime, actualPlan_getq_christiensen1%transfer,actualPlan_getq_christiensen1%transfer2, 1)
  END SUBROUTINE
  END MODULE
