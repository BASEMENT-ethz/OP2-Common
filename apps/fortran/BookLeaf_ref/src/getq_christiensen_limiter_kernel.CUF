!
! auto-generated by op2.py on 2015-01-26 22:23
!

MODULE GETQ_CHRISTIENSEN_LIMITER_MODULE
USE OP2_CONSTANTS
USE kinds_mod,    ONLY: ink,rlk
USE parameters_mod,ONLY: LI
USE OP2_FORTRAN_DECLARATIONS
USE OP2_FORTRAN_RT_SUPPORT
USE ISO_C_BINDING
USE CUDAFOR
USE CUDACONFIGURATIONPARAMS


#ifdef _OPENMP
  USE OMP_LIB
#endif

! getq_christiensen_limitervariable declarations



#define OP2_SOA(var,dim,stride) var((dim-1)*stride+1)

CONTAINS

!DEC$ ATTRIBUTES FORCEINLINE :: getq_christiensen_limiter
attributes (host) subroutine getq_christiensen_limiter(du,dv,qx,qy,csqrd,rho,scratch,cq1,cq2,iside)
    USE kinds_mod,ONLY: rlk
    USE parameters_mod,ONLY: N_SHAPE

    implicit none

    REAL(KIND=rlk), DIMENSION(N_SHAPE), INTENT(IN) :: du,dv,scratch
    REAL(KIND=rlk), INTENT(IN) :: csqrd,rho
    REAL(KIND=rlk), INTENT(INOUT) :: cq1,cq2
    REAL(KIND=rlk), DIMENSION(N_SHAPE), INTENT(OUT) :: qx,qy
    INTEGER(KIND=ink), INTENT(INOUT) :: iside
    INTEGER(KIND=ink) :: is1,is2
    REAL(KIND=rlk) :: w1,w2,w3,w4

    is1=MOD(iside+2_ink,N_SHAPE)+1_ink
    is2=iside+1_ink

    w1=cq1*SQRT(csqrd)
    w2=scratch(1)
    w3=scratch(2)
    w2=MIN(0.5_rlk*(w2+w3),2.0_rlk*w2,2.0_rlk*w3,1.0_rlk)
    w2=MAX(0.0_rlk,w2)
    w3=du(is1)
    w4=dv(is1)
    w3=SQRT(w3*w3+w4*w4)
    w3=(1.0_rlk-w2)*rho*(w1+cq2*w3)
    qx(is1)=w3
    qy(is1)=w3
    w2=scratch(3)
    w3=scratch(4)
    w2=MIN(0.5_rlk*(w2+w3),2.0_rlk*w2,2.0_rlk*w3,1.0_rlk)
    w2=MAX(0.0_rlk,w2)
    w3=du(is2)
    w4=dv(is2)
    w3=SQRT(w3*w3+w4*w4)
    w3=(1.0_rlk-w2)*rho*(w1+cq2*w3)
    qx(is2)=w3
    qy(is2)=w3

  END SUBROUTINE getq_christiensen_limiter

attributes (device) subroutine getq_christiensen_limiter_gpu(du,dv,qx,qy,csqrd,rho,scratch,cq1,cq2,iside)
    USE kinds_mod,ONLY: rlk
    USE parameters_mod,ONLY: N_SHAPE

    implicit none

    REAL(KIND=rlk), DIMENSION(N_SHAPE), INTENT(IN) :: du,dv,scratch
    REAL(KIND=rlk), INTENT(IN) :: csqrd,rho
    REAL(KIND=rlk), INTENT(INOUT) :: cq1,cq2
    REAL(KIND=rlk), DIMENSION(N_SHAPE), INTENT(OUT) :: qx,qy
    INTEGER(KIND=ink), INTENT(INOUT) :: iside
    INTEGER(KIND=ink) :: is1,is2
    REAL(KIND=rlk) :: w1,w2,w3,w4

    is1=MOD(iside+2_ink,N_SHAPE)+1_ink
    is2=iside+1_ink

    w1=cq1*SQRT(csqrd)
    w2=OP2_SOA(scratch,1, elements_stride_OP2)
    w3=OP2_SOA(scratch,2, elements_stride_OP2)
    w2=MIN(0.5_rlk*(w2+w3),2.0_rlk*w2,2.0_rlk*w3,1.0_rlk)
    w2=MAX(0.0_rlk,w2)
    w3=OP2_SOA(du,is1, elements_stride_OP2)
    w4=OP2_SOA(dv,is1, elements_stride_OP2)
    w3=SQRT(w3*w3+w4*w4)
    w3=(1.0_rlk-w2)*rho*(w1+cq2*w3)
    OP2_SOA(qx,is1, elements_stride_OP2)=w3
    OP2_SOA(qy,is1, elements_stride_OP2)=w3
    w2=OP2_SOA(scratch,3, elements_stride_OP2)
    w3=OP2_SOA(scratch,4, elements_stride_OP2)
    w2=MIN(0.5_rlk*(w2+w3),2.0_rlk*w2,2.0_rlk*w3,1.0_rlk)
    w2=MAX(0.0_rlk,w2)
    w3=OP2_SOA(du,is2, elements_stride_OP2)
    w4=OP2_SOA(dv,is2, elements_stride_OP2)
    w3=SQRT(w3*w3+w4*w4)
    w3=(1.0_rlk-w2)*rho*(w1+cq2*w3)
    OP2_SOA(qx,is2, elements_stride_OP2)=w3
    OP2_SOA(qy,is2, elements_stride_OP2)=w3

  END SUBROUTINE getq_christiensen_limiter_gpu


! CUDA kernel function
attributes (global) SUBROUTINE op_cuda_getq_christiensen_limiter( &
  &  soa_stride,      &
  & opDat1Devicegetq_christiensen_limiter, &
  & opDat2Devicegetq_christiensen_limiter, &
  & opDat3Devicegetq_christiensen_limiter, &
  & opDat4Devicegetq_christiensen_limiter, &
  & opDat5Devicegetq_christiensen_limiter, &
  & opDat6Devicegetq_christiensen_limiter, &
  & opDat7Devicegetq_christiensen_limiter, &
  & opGblDat8Devicegetq_christiensen_limiter,   &
  & opGblDat9Devicegetq_christiensen_limiter,   &
  & opGblDat10Devicegetq_christiensen_limiter,   &
  & setSize)

  IMPLICIT NONE

! local variables
  real(8), DEVICE, INTENT(IN) :: opDat1Devicegetq_christiensen_limiter(*)
  real(8), DEVICE, INTENT(IN) :: opDat2Devicegetq_christiensen_limiter(*)
  real(8), DEVICE :: opDat3Devicegetq_christiensen_limiter(*)
  real(8), DEVICE :: opDat4Devicegetq_christiensen_limiter(*)
  real(8), DEVICE, INTENT(IN) :: opDat5Devicegetq_christiensen_limiter(*)
  real(8), DEVICE, INTENT(IN) :: opDat6Devicegetq_christiensen_limiter(*)
  real(8), DEVICE, INTENT(IN) :: opDat7Devicegetq_christiensen_limiter(*)

  real(8), VALUE :: opGblDat8Devicegetq_christiensen_limiter
  real(8), VALUE :: opGblDat9Devicegetq_christiensen_limiter
  integer(4), VALUE :: opGblDat10Devicegetq_christiensen_limiter

  INTEGER(kind=4), VALUE :: soa_stride
  INTEGER(kind=4), VALUE :: setSize
  INTEGER(kind=4) :: i1


  DO i1 = threadIdx%x - 1 + (blockIdx%x - 1) * blockDim%x, setSize - 1, blockDim%x * gridDim%x

! kernel call

    CALL getq_christiensen_limiter_gpu( &
    & opDat1Devicegetq_christiensen_limiter(1 + i1), &
    & opDat2Devicegetq_christiensen_limiter(1 + i1), &
    & opDat3Devicegetq_christiensen_limiter(1 + i1), &
    & opDat4Devicegetq_christiensen_limiter(1 + i1), &
    & opDat5Devicegetq_christiensen_limiter(i1 + 1), &
    & opDat6Devicegetq_christiensen_limiter(i1 + 1), &
    & opDat7Devicegetq_christiensen_limiter(1 + i1), &
    & opGblDat8Devicegetq_christiensen_limiter, &
    & opGblDat9Devicegetq_christiensen_limiter, &
    & opGblDat10Devicegetq_christiensen_limiter &
    & )
  END DO


END SUBROUTINE

attributes (host) SUBROUTINE getq_christiensen_limiter_host( userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4, &
  & opArg5, &
  & opArg6, &
  & opArg7, &
  & opArg8, &
  & opArg9, &
  & opArg10 )

  IMPLICIT NONE
  character(len=25), INTENT(IN) :: userSubroutine
  TYPE ( op_set ) , INTENT(IN) :: set

  TYPE ( op_arg ) , INTENT(IN) :: opArg1
  TYPE ( op_arg ) , INTENT(IN) :: opArg2
  TYPE ( op_arg ) , INTENT(IN) :: opArg3
  TYPE ( op_arg ) , INTENT(IN) :: opArg4
  TYPE ( op_arg ) , INTENT(IN) :: opArg5
  TYPE ( op_arg ) , INTENT(IN) :: opArg6
  TYPE ( op_arg ) , INTENT(IN) :: opArg7
  TYPE ( op_arg ) , INTENT(IN) :: opArg8
  TYPE ( op_arg ) , INTENT(IN) :: opArg9
  TYPE ( op_arg ) , INTENT(IN) :: opArg10

  IF (getHybridGPU()) THEN
    CALL getq_christiensen_limiter_host_gpu( userSubroutine, set, &
    & opArg1, &
    & opArg2, &
    & opArg3, &
    & opArg4, &
    & opArg5, &
    & opArg6, &
    & opArg7, &
    & opArg8, &
    & opArg9, &
    & opArg10 )
  ELSE
    CALL getq_christiensen_limiter_host_cpu( userSubroutine, set, &
    & opArg1, &
    & opArg2, &
    & opArg3, &
    & opArg4, &
    & opArg5, &
    & opArg6, &
    & opArg7, &
    & opArg8, &
    & opArg9, &
    & opArg10 )
  END IF
END SUBROUTINE


! Stub for GPU execution

attributes (host) SUBROUTINE getq_christiensen_limiter_host_gpu( userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4, &
  & opArg5, &
  & opArg6, &
  & opArg7, &
  & opArg8, &
  & opArg9, &
  & opArg10 )

  IMPLICIT NONE
  character(len=25), INTENT(IN) :: userSubroutine
  TYPE ( op_set ) , INTENT(IN) :: set

  TYPE ( op_arg ) , INTENT(IN) :: opArg1
  TYPE ( op_arg ) , INTENT(IN) :: opArg2
  TYPE ( op_arg ) , INTENT(IN) :: opArg3
  TYPE ( op_arg ) , INTENT(IN) :: opArg4
  TYPE ( op_arg ) , INTENT(IN) :: opArg5
  TYPE ( op_arg ) , INTENT(IN) :: opArg6
  TYPE ( op_arg ) , INTENT(IN) :: opArg7
  TYPE ( op_arg ) , INTENT(IN) :: opArg8
  TYPE ( op_arg ) , INTENT(IN) :: opArg9
  TYPE ( op_arg ) , INTENT(IN) :: opArg10

  TYPE ( op_arg ) , DIMENSION(10) :: opArgArray
  INTEGER(kind=4) :: numberOfOpDats
  INTEGER(kind=4) :: n_upper
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayStart
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayEnd
  REAL(kind=8) :: startTime
  REAL(kind=8) :: endTime
  INTEGER(kind=4) :: returnSetKernelTiming


  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat1Devicegetq_christiensen_limiter
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat2Devicegetq_christiensen_limiter
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat3Devicegetq_christiensen_limiter
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat4Devicegetq_christiensen_limiter
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat5Devicegetq_christiensen_limiter
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat6Devicegetq_christiensen_limiter
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat7Devicegetq_christiensen_limiter

  INTEGER(kind=4) :: opDat1Cardinality
  INTEGER(kind=4) :: opDat2Cardinality
  INTEGER(kind=4) :: opDat3Cardinality
  INTEGER(kind=4) :: opDat4Cardinality
  INTEGER(kind=4) :: opDat5Cardinality
  INTEGER(kind=4) :: opDat6Cardinality
  INTEGER(kind=4) :: opDat7Cardinality
  INTEGER(kind=4) :: opDat8Cardinality
  INTEGER(kind=4) :: opDat9Cardinality
  INTEGER(kind=4) :: opDat10Cardinality

  INTEGER(kind=4) :: blocksPerGrid
  INTEGER(kind=4) :: threadsPerBlock
  INTEGER(kind=4) :: dynamicSharedMemorySize
  INTEGER(kind=4) :: threadSynchRet
  INTEGER(kind=4), SAVE :: calledTimes
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: i2
  INTEGER(kind=4) :: i10
  INTEGER(kind=4) :: i20
  REAL(kind=4) :: dataTransfer

  INTEGER(kind=4) :: istat
  real(8), POINTER :: opDat8Host
  real(8), POINTER :: opDat9Host
  integer(4), POINTER :: opDat10Host

  numberOfOpDats = 10

  opArgArray(1) = opArg1
  opArgArray(2) = opArg2
  opArgArray(3) = opArg3
  opArgArray(4) = opArg4
  opArgArray(5) = opArg5
  opArgArray(6) = opArg6
  opArgArray(7) = opArg7
  opArgArray(8) = opArg8
  opArgArray(9) = opArg9
  opArgArray(10) = opArg10

  returnSetKernelTiming = setKernelTime(23 , userSubroutine//C_NULL_CHAR, &
  & 0.d0, 0.00000,0.00000, 0)
  call op_timers_core(startTime)

  n_upper = op_mpi_halo_exchanges_cuda(set%setCPtr,numberOfOpDats,opArgArray)


  blocksPerGrid = 600
  threadsPerBlock = getBlockSize(userSubroutine//C_NULL_CHAR,set%setPtr%size)
  dynamicSharedMemorySize = reductionSize(opArgArray,numberOfOpDats) * threadsPerBlock

  opDat1Cardinality = opArg1%dim * getSetSizeFromOpArg(opArg1)
  opDat2Cardinality = opArg2%dim * getSetSizeFromOpArg(opArg2)
  opDat3Cardinality = opArg3%dim * getSetSizeFromOpArg(opArg3)
  opDat4Cardinality = opArg4%dim * getSetSizeFromOpArg(opArg4)
  opDat5Cardinality = opArg5%dim * getSetSizeFromOpArg(opArg5)
  opDat6Cardinality = opArg6%dim * getSetSizeFromOpArg(opArg6)
  opDat7Cardinality = opArg7%dim * getSetSizeFromOpArg(opArg7)
  opDat8Cardinality = opArg8%dim
  opDat9Cardinality = opArg9%dim
  opDat10Cardinality = opArg10%dim


  CALL c_f_pointer(opArg1%data_d,opDat1Devicegetq_christiensen_limiter,(/opDat1Cardinality/))
  CALL c_f_pointer(opArg2%data_d,opDat2Devicegetq_christiensen_limiter,(/opDat2Cardinality/))
  CALL c_f_pointer(opArg3%data_d,opDat3Devicegetq_christiensen_limiter,(/opDat3Cardinality/))
  CALL c_f_pointer(opArg4%data_d,opDat4Devicegetq_christiensen_limiter,(/opDat4Cardinality/))
  CALL c_f_pointer(opArg5%data_d,opDat5Devicegetq_christiensen_limiter,(/opDat5Cardinality/))
  CALL c_f_pointer(opArg6%data_d,opDat6Devicegetq_christiensen_limiter,(/opDat6Cardinality/))
  CALL c_f_pointer(opArg7%data_d,opDat7Devicegetq_christiensen_limiter,(/opDat7Cardinality/))
  CALL c_f_pointer(opArg8%data,opDat8Host)
  CALL c_f_pointer(opArg9%data,opDat9Host)
  CALL c_f_pointer(opArg10%data,opDat10Host)


  CALL op_cuda_getq_christiensen_limiter <<<blocksPerGrid,threadsPerBlock,dynamicSharedMemorySize>>>( &
  & getSetSizeFromOpArg(opArg1), &
  & opDat1Devicegetq_christiensen_limiter, &
  & opDat2Devicegetq_christiensen_limiter, &
  & opDat3Devicegetq_christiensen_limiter, &
  & opDat4Devicegetq_christiensen_limiter, &
  & opDat5Devicegetq_christiensen_limiter, &
  & opDat6Devicegetq_christiensen_limiter, &
  & opDat7Devicegetq_christiensen_limiter, &
  & opDat8Host, &
  & opDat9Host, &
  & opDat10Host, &
  set%setPtr%size)

  IF ((n_upper .EQ. 0) .OR. (n_upper .EQ. set%setPtr%core_size)) THEN
    CALL op_mpi_wait_all_cuda(numberOfOpDats,opArgArray)
  END IF


  CALL op_mpi_set_dirtybit_cuda(numberOfOpDats,opArgArray)

  istat = cudaDeviceSynchronize()
  call op_timers_core(endTime)

  dataTransfer = 0.0
  dataTransfer = dataTransfer + opArg1%size * getSetSizeFromOpArg(opArg1)
  dataTransfer = dataTransfer + opArg2%size * getSetSizeFromOpArg(opArg2)
  dataTransfer = dataTransfer + opArg3%size * getSetSizeFromOpArg(opArg3) * 2.d0
  dataTransfer = dataTransfer + opArg4%size * getSetSizeFromOpArg(opArg4) * 2.d0
  dataTransfer = dataTransfer + opArg5%size * getSetSizeFromOpArg(opArg5)
  dataTransfer = dataTransfer + opArg6%size * getSetSizeFromOpArg(opArg6)
  dataTransfer = dataTransfer + opArg7%size * getSetSizeFromOpArg(opArg7)
  dataTransfer = dataTransfer + opArg8%size
  dataTransfer = dataTransfer + opArg9%size
  dataTransfer = dataTransfer + opArg10%size
  returnSetKernelTiming = setKernelTime(23 , userSubroutine//C_NULL_CHAR, &
  & endTime-startTime, dataTransfer, 0.00000, 1)
  calledTimes = calledTimes + 1
END SUBROUTINE


! Stub for CPU execution

SUBROUTINE op_wrap_getq_christiensen_limiter( &
  & opDat1Local, &
  & opDat2Local, &
  & opDat3Local, &
  & opDat4Local, &
  & opDat5Local, &
  & opDat6Local, &
  & opDat7Local, &
  & opDat8Local, &
  & opDat9Local, &
  & opDat10Local, &
  & bottom,top)
  real(8) opDat1Local(4,*)
  real(8) opDat2Local(4,*)
  real(8) opDat3Local(4,*)
  real(8) opDat4Local(4,*)
  real(8) opDat5Local(1,*)
  real(8) opDat6Local(1,*)
  real(8) opDat7Local(4,*)
  real(8) opDat8Local(1)
  real(8) opDat9Local(1)
  integer(4) opDat10Local(1)
  INTEGER(kind=4) bottom,top,i1

  DO i1 = bottom, top - 1, 1
! kernel call
  CALL getq_christiensen_limiter( &
    & opDat1Local(1,i1+1), &
    & opDat2Local(1,i1+1), &
    & opDat3Local(1,i1+1), &
    & opDat4Local(1,i1+1), &
    & opDat5Local(1,i1+1), &
    & opDat6Local(1,i1+1), &
    & opDat7Local(1,i1+1), &
    & opDat8Local(1), &
    & opDat9Local(1), &
    & opDat10Local(1) &
    & )
  END DO
END SUBROUTINE
SUBROUTINE getq_christiensen_limiter_host_cpu( userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4, &
  & opArg5, &
  & opArg6, &
  & opArg7, &
  & opArg8, &
  & opArg9, &
  & opArg10 )

  IMPLICIT NONE
  character(kind=c_char,len=*), INTENT(IN) :: userSubroutine
  type ( op_set ) , INTENT(IN) :: set

  type ( op_arg ) , INTENT(IN) :: opArg1
  type ( op_arg ) , INTENT(IN) :: opArg2
  type ( op_arg ) , INTENT(IN) :: opArg3
  type ( op_arg ) , INTENT(IN) :: opArg4
  type ( op_arg ) , INTENT(IN) :: opArg5
  type ( op_arg ) , INTENT(IN) :: opArg6
  type ( op_arg ) , INTENT(IN) :: opArg7
  type ( op_arg ) , INTENT(IN) :: opArg8
  type ( op_arg ) , INTENT(IN) :: opArg9
  type ( op_arg ) , INTENT(IN) :: opArg10

  type ( op_arg ) , DIMENSION(10) :: opArgArray
  INTEGER(kind=4) :: numberOfOpDats
  INTEGER(kind=4) :: n_upper
  type ( op_set_core ) , POINTER :: opSetCore

  real(8), POINTER, DIMENSION(:) :: opDat1Local
  INTEGER(kind=4) :: opDat1Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat2Local
  INTEGER(kind=4) :: opDat2Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat3Local
  INTEGER(kind=4) :: opDat3Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat4Local
  INTEGER(kind=4) :: opDat4Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat5Local
  INTEGER(kind=4) :: opDat5Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat6Local
  INTEGER(kind=4) :: opDat6Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat7Local
  INTEGER(kind=4) :: opDat7Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat8Local
  real(8), POINTER, DIMENSION(:) :: opDat9Local
  integer(4), POINTER, DIMENSION(:) :: opDat10Local
  INTEGER(kind=4) :: threadID
  INTEGER(kind=4) :: numberOfThreads
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayStart
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayEnd
  REAL(kind=8) :: startTime
  REAL(kind=8) :: endTime
  INTEGER(kind=4) :: returnSetKernelTiming
  INTEGER(kind=4) :: sliceStart
  INTEGER(kind=4) :: sliceEnd
  REAL(kind=4) :: dataTransfer


  INTEGER(kind=4) :: i1,i2,n

  numberOfOpDats = 10

  opArgArray(1) = opArg1
  opArgArray(2) = opArg2
  opArgArray(3) = opArg3
  opArgArray(4) = opArg4
  opArgArray(5) = opArg5
  opArgArray(6) = opArg6
  opArgArray(7) = opArg7
  opArgArray(8) = opArg8
  opArgArray(9) = opArg9
  opArgArray(10) = opArg10

  returnSetKernelTiming = setKernelTime(23 , userSubroutine//C_NULL_CHAR, &
  & 0.d0, 0.00000,0.00000, 0)
  call op_timers_core(startTime)

  n_upper = op_mpi_halo_exchanges(set%setCPtr,numberOfOpDats,opArgArray)


#ifdef _OPENMP
  numberOfThreads = omp_get_max_threads()
#else
  numberOfThreads = 1
#endif

    opSetCore => set%setPtr

    opDat1Cardinality = opArg1%dim * getSetSizeFromOpArg(opArg1)
    opDat2Cardinality = opArg2%dim * getSetSizeFromOpArg(opArg2)
    opDat3Cardinality = opArg3%dim * getSetSizeFromOpArg(opArg3)
    opDat4Cardinality = opArg4%dim * getSetSizeFromOpArg(opArg4)
    opDat5Cardinality = opArg5%dim * getSetSizeFromOpArg(opArg5)
    opDat6Cardinality = opArg6%dim * getSetSizeFromOpArg(opArg6)
    opDat7Cardinality = opArg7%dim * getSetSizeFromOpArg(opArg7)
    CALL c_f_pointer(opArg1%data,opDat1Local,(/opDat1Cardinality/))
    CALL c_f_pointer(opArg2%data,opDat2Local,(/opDat2Cardinality/))
    CALL c_f_pointer(opArg3%data,opDat3Local,(/opDat3Cardinality/))
    CALL c_f_pointer(opArg4%data,opDat4Local,(/opDat4Cardinality/))
    CALL c_f_pointer(opArg5%data,opDat5Local,(/opDat5Cardinality/))
    CALL c_f_pointer(opArg6%data,opDat6Local,(/opDat6Cardinality/))
    CALL c_f_pointer(opArg7%data,opDat7Local,(/opDat7Cardinality/))
    CALL c_f_pointer(opArg8%data,opDat8Local, (/opArg8%dim/))
    CALL c_f_pointer(opArg9%data,opDat9Local, (/opArg9%dim/))
    CALL c_f_pointer(opArg10%data,opDat10Local, (/opArg10%dim/))


    !$OMP PARALLEL DO private (sliceStart,sliceEnd,i1,threadID)
    DO i1 = 0, numberOfThreads - 1, 1
      sliceStart = opSetCore%size * i1 / numberOfThreads
      sliceEnd = opSetCore%size * (i1 + 1) / numberOfThreads
      threadID = omp_get_thread_num()
! kernel call
      CALL op_wrap_getq_christiensen_limiter( &
      & opDat1Local, &
      & opDat2Local, &
      & opDat3Local, &
      & opDat4Local, &
      & opDat5Local, &
      & opDat6Local, &
      & opDat7Local, &
      & opDat8Local, &
      & opDat9Local, &
      & opDat10Local, &
      & sliceStart, sliceEnd)
    END DO
    !$OMP END PARALLEL DO
    IF ((n_upper .EQ. 0) .OR. (n_upper .EQ. opSetCore%core_size)) THEN
      CALL op_mpi_wait_all(numberOfOpDats,opArgArray)
    END IF

    CALL op_mpi_set_dirtybit(numberOfOpDats,opArgArray)

    call op_timers_core(endTime)

    dataTransfer = 0.0
    dataTransfer = dataTransfer + opArg1%size * getSetSizeFromOpArg(opArg1)
    dataTransfer = dataTransfer + opArg2%size * getSetSizeFromOpArg(opArg2)
    dataTransfer = dataTransfer + opArg3%size * getSetSizeFromOpArg(opArg3) * 2.d0
    dataTransfer = dataTransfer + opArg4%size * getSetSizeFromOpArg(opArg4) * 2.d0
    dataTransfer = dataTransfer + opArg5%size * getSetSizeFromOpArg(opArg5)
    dataTransfer = dataTransfer + opArg6%size * getSetSizeFromOpArg(opArg6)
    dataTransfer = dataTransfer + opArg7%size * getSetSizeFromOpArg(opArg7)
    dataTransfer = dataTransfer + opArg8%size
    dataTransfer = dataTransfer + opArg9%size
    dataTransfer = dataTransfer + opArg10%size
    returnSetKernelTiming = setKernelTime(23 , userSubroutine//C_NULL_CHAR, &
    & endTime-startTime, dataTransfer, 0.00000, 1)
  END SUBROUTINE
  END MODULE
