!
! auto-generated by op2.py on 2015-01-26 22:23
!

MODULE GETACC_SCATTER_MODULE
USE OP2_CONSTANTS
USE kinds_mod,    ONLY: ink,rlk
USE parameters_mod,ONLY: LI
USE OP2_FORTRAN_DECLARATIONS
USE OP2_FORTRAN_RT_SUPPORT
USE ISO_C_BINDING
USE CUDAFOR
USE CUDACONFIGURATIONPARAMS


#ifdef _OPENMP
  USE OMP_LIB
#endif

! getacc_scattervariable declarations


TYPE ( c_ptr )  :: planRet_getacc_scatter

#define OP2_SOA(var,dim,stride) var((dim-1)*stride+1)

CONTAINS

!DEC$ ATTRIBUTES FORCEINLINE :: getacc_scatter
attributes (host) subroutine getacc_scatter(cnmass,rho,cnwt,cnfx,cnfy, &
&                           ndmass1,ndmass2,ndmass3,ndmass4, &
&                           ndarea1,ndarea2,ndarea3,ndarea4, &
&                           ndub1,ndub2,ndub3,ndub4, &
&                           ndvb1,ndvb2,ndvb3,ndvb4)

    USE kinds_mod,ONLY: ink,rlk
    USE reals_mod,    ONLY: zerocut

    implicit none

    REAL(KIND=rlk), INTENT(IN) :: rho
    REAL(KIND=rlk), INTENT(INOUT) :: ndarea1,ndarea2,ndarea3,ndarea4, &
&                           ndub1,ndub2,ndub3,ndub4, &
&                           ndvb1,ndvb2,ndvb3,ndvb4, &
&                           ndmass1,ndmass2,ndmass3,ndmass4
    REAL(KIND=rlk),DIMENSION(4),INTENT(IN) :: cnmass,cnwt,cnfx,cnfy
    INTEGER(KIND=ink) :: jj,ii

    jj=1_ink
    IF (cnmass(jj).GT.zerocut) THEN
      ndmass1=ndmass1+cnmass(jj)
    ELSE
      ii=jj-1_ink
      IF (ii.EQ.0_ink) ii=4_ink
      IF (cnmass(ii).GT.zerocut) THEN
        ndmass1=ndmass1+cnmass(ii)
      ELSE
        ndmass1=ndmass1+rho*cnwt(jj)
      ENDIF
    ENDIF
    ndarea1=ndarea1+cnwt(jj)
    ndub1=ndub1+cnfx(jj)
    ndvb1=ndvb1+cnfy(jj)

    jj=2_ink
    IF (cnmass(jj).GT.zerocut) THEN
      ndmass2=ndmass2+cnmass(jj)
    ELSE
      ii=jj-1_ink
      IF (ii.EQ.0_ink) ii=4_ink
      IF (cnmass(ii).GT.zerocut) THEN
        ndmass2=ndmass2+cnmass(ii)
      ELSE
        ndmass2=ndmass2+rho*cnwt(jj)
      ENDIF
    ENDIF
    ndarea2=ndarea2+cnwt(jj)
    ndub2=ndub2+cnfx(jj)
    ndvb2=ndvb2+cnfy(jj)

    jj=3_ink
    IF (cnmass(jj).GT.zerocut) THEN
      ndmass3=ndmass3+cnmass(jj)
    ELSE
      ii=jj-1_ink
      IF (ii.EQ.0_ink) ii=4_ink
      IF (cnmass(ii).GT.zerocut) THEN
        ndmass3=ndmass3+cnmass(ii)
      ELSE
        ndmass3=ndmass3+rho*cnwt(jj)
      ENDIF
    ENDIF
    ndarea3=ndarea3+cnwt(jj)
    ndub3=ndub3+cnfx(jj)
    ndvb3=ndvb3+cnfy(jj)

    jj=4_ink
    IF (cnmass(jj).GT.zerocut) THEN
      ndmass4=ndmass4+cnmass(jj)
    ELSE
      ii=jj-1_ink
      IF (ii.EQ.0_ink) ii=4_ink
      IF (cnmass(ii).GT.zerocut) THEN
        ndmass4=ndmass4+cnmass(ii)
      ELSE
        ndmass4=ndmass4+rho*cnwt(jj)
      ENDIF
    ENDIF
    ndarea4=ndarea4+cnwt(jj)
    ndub4=ndub4+cnfx(jj)
    ndvb4=ndvb4+cnfy(jj)

  END SUBROUTINE getacc_scatter

attributes (device) subroutine getacc_scatter_gpu(cnmass,rho,cnwt,cnfx,cnfy, &
&                           ndmass1,ndmass2,ndmass3,ndmass4, &
&                           ndarea1,ndarea2,ndarea3,ndarea4, &
&                           ndub1,ndub2,ndub3,ndub4, &
&                           ndvb1,ndvb2,ndvb3,ndvb4)

    USE kinds_mod,ONLY: ink,rlk
    USE reals_mod,    ONLY: zerocut

    implicit none

    REAL(KIND=rlk), INTENT(IN) :: rho
    REAL(KIND=rlk), INTENT(INOUT) :: ndarea1,ndarea2,ndarea3,ndarea4, &
&                           ndub1,ndub2,ndub3,ndub4, &
&                           ndvb1,ndvb2,ndvb3,ndvb4, &
&                           ndmass1,ndmass2,ndmass3,ndmass4
    REAL(KIND=rlk),DIMENSION(4),INTENT(IN) :: cnmass,cnwt,cnfx,cnfy
    INTEGER(KIND=ink) :: jj,ii

    jj=1_ink
    IF (OP2_SOA(cnmass,jj, elements_stride_OP2).GT.zerocut_OP2) THEN
      ndmass1=ndmass1+OP2_SOA(cnmass,jj, elements_stride_OP2)
    ELSE
      ii=jj-1_ink
      IF (ii.EQ.0_ink) ii=4_ink
      IF (OP2_SOA(cnmass,ii, elements_stride_OP2).GT.zerocut_OP2) THEN
        ndmass1=ndmass1+OP2_SOA(cnmass,ii, elements_stride_OP2)
      ELSE
        ndmass1=ndmass1+rho*OP2_SOA(cnwt,jj, elements_stride_OP2)
      ENDIF
    ENDIF
    ndarea1=ndarea1+OP2_SOA(cnwt,jj, elements_stride_OP2)
    ndub1=ndub1+OP2_SOA(cnfx,jj, elements_stride_OP2)
    ndvb1=ndvb1+OP2_SOA(cnfy,jj, elements_stride_OP2)

    jj=2_ink
    IF (OP2_SOA(cnmass,jj, elements_stride_OP2).GT.zerocut_OP2) THEN
      ndmass2=ndmass2+OP2_SOA(cnmass,jj, elements_stride_OP2)
    ELSE
      ii=jj-1_ink
      IF (ii.EQ.0_ink) ii=4_ink
      IF (OP2_SOA(cnmass,ii, elements_stride_OP2).GT.zerocut_OP2) THEN
        ndmass2=ndmass2+OP2_SOA(cnmass,ii, elements_stride_OP2)
      ELSE
        ndmass2=ndmass2+rho*OP2_SOA(cnwt,jj, elements_stride_OP2)
      ENDIF
    ENDIF
    ndarea2=ndarea2+OP2_SOA(cnwt,jj, elements_stride_OP2)
    ndub2=ndub2+OP2_SOA(cnfx,jj, elements_stride_OP2)
    ndvb2=ndvb2+OP2_SOA(cnfy,jj, elements_stride_OP2)

    jj=3_ink
    IF (OP2_SOA(cnmass,jj, elements_stride_OP2).GT.zerocut_OP2) THEN
      ndmass3=ndmass3+OP2_SOA(cnmass,jj, elements_stride_OP2)
    ELSE
      ii=jj-1_ink
      IF (ii.EQ.0_ink) ii=4_ink
      IF (OP2_SOA(cnmass,ii, elements_stride_OP2).GT.zerocut_OP2) THEN
        ndmass3=ndmass3+OP2_SOA(cnmass,ii, elements_stride_OP2)
      ELSE
        ndmass3=ndmass3+rho*OP2_SOA(cnwt,jj, elements_stride_OP2)
      ENDIF
    ENDIF
    ndarea3=ndarea3+OP2_SOA(cnwt,jj, elements_stride_OP2)
    ndub3=ndub3+OP2_SOA(cnfx,jj, elements_stride_OP2)
    ndvb3=ndvb3+OP2_SOA(cnfy,jj, elements_stride_OP2)

    jj=4_ink
    IF (OP2_SOA(cnmass,jj, elements_stride_OP2).GT.zerocut_OP2) THEN
      ndmass4=ndmass4+OP2_SOA(cnmass,jj, elements_stride_OP2)
    ELSE
      ii=jj-1_ink
      IF (ii.EQ.0_ink) ii=4_ink
      IF (OP2_SOA(cnmass,ii, elements_stride_OP2).GT.zerocut_OP2) THEN
        ndmass4=ndmass4+OP2_SOA(cnmass,ii, elements_stride_OP2)
      ELSE
        ndmass4=ndmass4+rho*OP2_SOA(cnwt,jj, elements_stride_OP2)
      ENDIF
    ENDIF
    ndarea4=ndarea4+OP2_SOA(cnwt,jj, elements_stride_OP2)
    ndub4=ndub4+OP2_SOA(cnfx,jj, elements_stride_OP2)
    ndvb4=ndvb4+OP2_SOA(cnfy,jj, elements_stride_OP2)

  END SUBROUTINE getacc_scatter_gpu


! CUDA kernel function
attributes (global) SUBROUTINE op_cuda_getacc_scatter( &
  &  soa_stride,      &
  & opDat6Devicegetacc_scatter, &
  & opDat10Devicegetacc_scatter, &
  & opDat14Devicegetacc_scatter, &
  & opDat18Devicegetacc_scatter, &
  & opDat6Map, &
  & opDat1Devicegetacc_scatter, &
  & opDat2Devicegetacc_scatter, &
  & opDat3Devicegetacc_scatter, &
  & opDat4Devicegetacc_scatter, &
  & opDat5Devicegetacc_scatter, &
  & pblkMap, &
  & poffset, &
  & pnelems, &
  & pnthrcol, &
  & pthrcol, &
  & setSize, &
  & blockOffset)

  IMPLICIT NONE

! local variables
  real(8), DEVICE :: opDat6Devicegetacc_scatter(*)
  real(8), DEVICE :: opDat10Devicegetacc_scatter(*)
  real(8), DEVICE :: opDat14Devicegetacc_scatter(*)
  real(8), DEVICE :: opDat18Devicegetacc_scatter(*)
  INTEGER(kind=4), DEVICE, INTENT(IN) :: opDat6Map(*)
  real(8), DEVICE, INTENT(IN) :: opDat1Devicegetacc_scatter(*)
  real(8), DEVICE, INTENT(IN) :: opDat2Devicegetacc_scatter(*)
  real(8), DEVICE, INTENT(IN) :: opDat3Devicegetacc_scatter(*)
  real(8), DEVICE, INTENT(IN) :: opDat4Devicegetacc_scatter(*)
  real(8), DEVICE, INTENT(IN) :: opDat5Devicegetacc_scatter(*)

  INTEGER(kind=4) map6idx, map7idx, map8idx, map9idx

  INTEGER(kind=4), VALUE :: soa_stride
  INTEGER(kind=4), DIMENSION(0:*), DEVICE :: pblkMap
  INTEGER(kind=4), DIMENSION(0:*), DEVICE :: poffset
  INTEGER(kind=4), DIMENSION(0:*), DEVICE :: pnelems
  INTEGER(kind=4), DIMENSION(0:*), DEVICE :: pnthrcol
  INTEGER(kind=4), DIMENSION(0:*), DEVICE, INTENT(IN) :: pthrcol
  INTEGER(kind=4), VALUE :: blockOffset
  INTEGER(kind=4), VALUE :: setSize

  real(8) :: opDat6Local
  real(8) :: opDat7Local
  real(8) :: opDat8Local
  real(8) :: opDat9Local
  real(8) :: opDat10Local
  real(8) :: opDat11Local
  real(8) :: opDat12Local
  real(8) :: opDat13Local
  real(8) :: opDat14Local
  real(8) :: opDat15Local
  real(8) :: opDat16Local
  real(8) :: opDat17Local
  real(8) :: opDat18Local
  real(8) :: opDat19Local
  real(8) :: opDat20Local
  real(8) :: opDat21Local

  INTEGER(kind=4), SHARED :: numOfColours
  INTEGER(kind=4), SHARED :: numberOfActiveThreadsCeiling
  INTEGER(kind=4), SHARED :: blockID
  INTEGER(kind=4), SHARED :: threadBlockOffset
  INTEGER(kind=4), SHARED :: numberOfActiveThreads
  INTEGER(kind=4) :: colour1
  INTEGER(kind=4) :: colour2
  INTEGER(kind=4) :: n1
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: i2
  INTEGER(kind=4) :: i3


  IF (threadIdx%x - 1 .EQ. 0) THEN
    blockID = pblkMap(blockIdx%x - 1 + blockOffset)
    numberOfActiveThreads = pnelems(blockID)
    numberOfActiveThreadsCeiling = blockDim%x * (1 + (numberOfActiveThreads - 1) / blockDim%x)
    numOfColours = pnthrcol(blockID)
    threadBlockOffset = poffset(blockID)

  END IF

  CALL syncthreads()

  i1 = threadIdx%x - 1

  DO WHILE (i1 < numberOfActiveThreadsCeiling )
    colour2 = -1
    IF (i1 < numberOfActiveThreads) THEN
      i3 = i1
      map6idx = opDat6Map(1 + i3 + threadBlockOffset + setSize * 0)
      map7idx = opDat6Map(1 + i3 + threadBlockOffset + setSize * 1)
      map8idx = opDat6Map(1 + i3 + threadBlockOffset + setSize * 2)
      map9idx = opDat6Map(1 + i3 + threadBlockOffset + setSize * 3)
      opDat6Local = 0
      opDat7Local = 0
      opDat8Local = 0
      opDat9Local = 0
      opDat10Local = 0
      opDat11Local = 0
      opDat12Local = 0
      opDat13Local = 0
      opDat14Local = 0
      opDat15Local = 0
      opDat16Local = 0
      opDat17Local = 0
      opDat18Local = 0
      opDat19Local = 0
      opDat20Local = 0
      opDat21Local = 0

! kernel call
      CALL getacc_scatter_gpu( &
      & opDat1Devicegetacc_scatter(1 + (i3 + threadBlockOffset)), &
      & opDat2Devicegetacc_scatter((i3 + threadBlockOffset) * (1) +1), &
      & opDat3Devicegetacc_scatter(1 + (i3 + threadBlockOffset)), &
      & opDat4Devicegetacc_scatter(1 + (i3 + threadBlockOffset)), &
      & opDat5Devicegetacc_scatter(1 + (i3 + threadBlockOffset)), &
      & opDat6Local, &
      & opDat7Local, &
      & opDat8Local, &
      & opDat9Local, &
      & opDat10Local, &
      & opDat11Local, &
      & opDat12Local, &
      & opDat13Local, &
      & opDat14Local, &
      & opDat15Local, &
      & opDat16Local, &
      & opDat17Local, &
      & opDat18Local, &
      & opDat19Local, &
      & opDat20Local, &
      & opDat21Local &
      & )

      colour2 = pthrcol(i1 + threadBlockOffset)
    END IF
    DO colour1 = 0, numOfColours - 1, 1
      IF (colour2 .EQ. colour1) THEN
        opDat6Devicegetacc_scatter(1 + map6idx * (1)) = &
        & opDat6Devicegetacc_scatter(1 + map6idx * (1)) + opDat6Local

        opDat6Devicegetacc_scatter(1 + map7idx * (1)) = &
        & opDat6Devicegetacc_scatter(1 + map7idx * (1)) + opDat7Local

        opDat6Devicegetacc_scatter(1 + map8idx * (1)) = &
        & opDat6Devicegetacc_scatter(1 + map8idx * (1)) + opDat8Local

        opDat6Devicegetacc_scatter(1 + map9idx * (1)) = &
        & opDat6Devicegetacc_scatter(1 + map9idx * (1)) + opDat9Local

        opDat10Devicegetacc_scatter(1 + map6idx * (1)) = &
        & opDat10Devicegetacc_scatter(1 + map6idx * (1)) + opDat10Local

        opDat10Devicegetacc_scatter(1 + map7idx * (1)) = &
        & opDat10Devicegetacc_scatter(1 + map7idx * (1)) + opDat11Local

        opDat10Devicegetacc_scatter(1 + map8idx * (1)) = &
        & opDat10Devicegetacc_scatter(1 + map8idx * (1)) + opDat12Local

        opDat10Devicegetacc_scatter(1 + map9idx * (1)) = &
        & opDat10Devicegetacc_scatter(1 + map9idx * (1)) + opDat13Local

        opDat14Devicegetacc_scatter(1 + map6idx * (1)) = &
        & opDat14Devicegetacc_scatter(1 + map6idx * (1)) + opDat14Local

        opDat14Devicegetacc_scatter(1 + map7idx * (1)) = &
        & opDat14Devicegetacc_scatter(1 + map7idx * (1)) + opDat15Local

        opDat14Devicegetacc_scatter(1 + map8idx * (1)) = &
        & opDat14Devicegetacc_scatter(1 + map8idx * (1)) + opDat16Local

        opDat14Devicegetacc_scatter(1 + map9idx * (1)) = &
        & opDat14Devicegetacc_scatter(1 + map9idx * (1)) + opDat17Local

        opDat18Devicegetacc_scatter(1 + map6idx * (1)) = &
        & opDat18Devicegetacc_scatter(1 + map6idx * (1)) + opDat18Local

        opDat18Devicegetacc_scatter(1 + map7idx * (1)) = &
        & opDat18Devicegetacc_scatter(1 + map7idx * (1)) + opDat19Local

        opDat18Devicegetacc_scatter(1 + map8idx * (1)) = &
        & opDat18Devicegetacc_scatter(1 + map8idx * (1)) + opDat20Local

        opDat18Devicegetacc_scatter(1 + map9idx * (1)) = &
        & opDat18Devicegetacc_scatter(1 + map9idx * (1)) + opDat21Local

      END IF
      IF (colour1 .NE. numOfColours-1) THEN
        CALL syncthreads()
      END IF
    END DO
    i1 = i1 + blockDim%x
  END DO



END SUBROUTINE

attributes (host) SUBROUTINE getacc_scatter_host( userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4, &
  & opArg5, &
  & opArg6, &
  & opArg7, &
  & opArg8, &
  & opArg9, &
  & opArg10, &
  & opArg11, &
  & opArg12, &
  & opArg13, &
  & opArg14, &
  & opArg15, &
  & opArg16, &
  & opArg17, &
  & opArg18, &
  & opArg19, &
  & opArg20, &
  & opArg21 )

  IMPLICIT NONE
  character(len=14), INTENT(IN) :: userSubroutine
  TYPE ( op_set ) , INTENT(IN) :: set

  TYPE ( op_arg ) , INTENT(IN) :: opArg1
  TYPE ( op_arg ) , INTENT(IN) :: opArg2
  TYPE ( op_arg ) , INTENT(IN) :: opArg3
  TYPE ( op_arg ) , INTENT(IN) :: opArg4
  TYPE ( op_arg ) , INTENT(IN) :: opArg5
  TYPE ( op_arg ) , INTENT(IN) :: opArg6
  TYPE ( op_arg ) , INTENT(IN) :: opArg7
  TYPE ( op_arg ) , INTENT(IN) :: opArg8
  TYPE ( op_arg ) , INTENT(IN) :: opArg9
  TYPE ( op_arg ) , INTENT(IN) :: opArg10
  TYPE ( op_arg ) , INTENT(IN) :: opArg11
  TYPE ( op_arg ) , INTENT(IN) :: opArg12
  TYPE ( op_arg ) , INTENT(IN) :: opArg13
  TYPE ( op_arg ) , INTENT(IN) :: opArg14
  TYPE ( op_arg ) , INTENT(IN) :: opArg15
  TYPE ( op_arg ) , INTENT(IN) :: opArg16
  TYPE ( op_arg ) , INTENT(IN) :: opArg17
  TYPE ( op_arg ) , INTENT(IN) :: opArg18
  TYPE ( op_arg ) , INTENT(IN) :: opArg19
  TYPE ( op_arg ) , INTENT(IN) :: opArg20
  TYPE ( op_arg ) , INTENT(IN) :: opArg21

  IF (getHybridGPU()) THEN
    CALL getacc_scatter_host_gpu( userSubroutine, set, &
    & opArg1, &
    & opArg2, &
    & opArg3, &
    & opArg4, &
    & opArg5, &
    & opArg6, &
    & opArg7, &
    & opArg8, &
    & opArg9, &
    & opArg10, &
    & opArg11, &
    & opArg12, &
    & opArg13, &
    & opArg14, &
    & opArg15, &
    & opArg16, &
    & opArg17, &
    & opArg18, &
    & opArg19, &
    & opArg20, &
    & opArg21 )
  ELSE
    CALL getacc_scatter_host_cpu( userSubroutine, set, &
    & opArg1, &
    & opArg2, &
    & opArg3, &
    & opArg4, &
    & opArg5, &
    & opArg6, &
    & opArg7, &
    & opArg8, &
    & opArg9, &
    & opArg10, &
    & opArg11, &
    & opArg12, &
    & opArg13, &
    & opArg14, &
    & opArg15, &
    & opArg16, &
    & opArg17, &
    & opArg18, &
    & opArg19, &
    & opArg20, &
    & opArg21 )
  END IF
END SUBROUTINE


! Stub for GPU execution

attributes (host) SUBROUTINE getacc_scatter_host_gpu( userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4, &
  & opArg5, &
  & opArg6, &
  & opArg7, &
  & opArg8, &
  & opArg9, &
  & opArg10, &
  & opArg11, &
  & opArg12, &
  & opArg13, &
  & opArg14, &
  & opArg15, &
  & opArg16, &
  & opArg17, &
  & opArg18, &
  & opArg19, &
  & opArg20, &
  & opArg21 )

  IMPLICIT NONE
  character(len=14), INTENT(IN) :: userSubroutine
  TYPE ( op_set ) , INTENT(IN) :: set

  TYPE ( op_arg ) , INTENT(IN) :: opArg1
  TYPE ( op_arg ) , INTENT(IN) :: opArg2
  TYPE ( op_arg ) , INTENT(IN) :: opArg3
  TYPE ( op_arg ) , INTENT(IN) :: opArg4
  TYPE ( op_arg ) , INTENT(IN) :: opArg5
  TYPE ( op_arg ) , INTENT(IN) :: opArg6
  TYPE ( op_arg ) , INTENT(IN) :: opArg7
  TYPE ( op_arg ) , INTENT(IN) :: opArg8
  TYPE ( op_arg ) , INTENT(IN) :: opArg9
  TYPE ( op_arg ) , INTENT(IN) :: opArg10
  TYPE ( op_arg ) , INTENT(IN) :: opArg11
  TYPE ( op_arg ) , INTENT(IN) :: opArg12
  TYPE ( op_arg ) , INTENT(IN) :: opArg13
  TYPE ( op_arg ) , INTENT(IN) :: opArg14
  TYPE ( op_arg ) , INTENT(IN) :: opArg15
  TYPE ( op_arg ) , INTENT(IN) :: opArg16
  TYPE ( op_arg ) , INTENT(IN) :: opArg17
  TYPE ( op_arg ) , INTENT(IN) :: opArg18
  TYPE ( op_arg ) , INTENT(IN) :: opArg19
  TYPE ( op_arg ) , INTENT(IN) :: opArg20
  TYPE ( op_arg ) , INTENT(IN) :: opArg21

  TYPE ( op_arg ) , DIMENSION(21) :: opArgArray
  INTEGER(kind=4) :: numberOfOpDats
  INTEGER(kind=4) :: n_upper
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayStart
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayEnd
  REAL(kind=8) :: startTime
  REAL(kind=8) :: endTime
  INTEGER(kind=4) :: returnSetKernelTiming


  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat6Devicegetacc_scatter
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: opMap6Devicegetacc_scatter
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat10Devicegetacc_scatter
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: opMap10Devicegetacc_scatter
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat14Devicegetacc_scatter
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: opMap14Devicegetacc_scatter
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat18Devicegetacc_scatter
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: opMap18Devicegetacc_scatter
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat1Devicegetacc_scatter
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat2Devicegetacc_scatter
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat3Devicegetacc_scatter
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat4Devicegetacc_scatter
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat5Devicegetacc_scatter

  INTEGER(kind=4) :: opDat6Cardinality
  INTEGER(kind=4) :: opMap6Cardinality
  INTEGER(kind=4) :: opDat10Cardinality
  INTEGER(kind=4) :: opMap10Cardinality
  INTEGER(kind=4) :: opDat14Cardinality
  INTEGER(kind=4) :: opMap14Cardinality
  INTEGER(kind=4) :: opDat18Cardinality
  INTEGER(kind=4) :: opMap18Cardinality
  INTEGER(kind=4) :: opDat1Cardinality
  INTEGER(kind=4) :: opDat2Cardinality
  INTEGER(kind=4) :: opDat3Cardinality
  INTEGER(kind=4) :: opDat4Cardinality
  INTEGER(kind=4) :: opDat5Cardinality

  TYPE ( op_plan ) , POINTER :: actualPlan_getacc_scatter

  INTEGER(kind=4) :: blocksPerGrid
  INTEGER(kind=4) :: threadsPerBlock
  INTEGER(kind=4) :: dynamicSharedMemorySize
  INTEGER(kind=4) :: threadSynchRet
  INTEGER(kind=4), DIMENSION(1:21) :: opDatArray
  INTEGER(kind=4), DIMENSION(1:21) :: mappingIndicesArray
  INTEGER(kind=4), DIMENSION(1:21) :: mappingArray
  INTEGER(kind=4), DIMENSION(1:21) :: accessDescriptorArray
  INTEGER(kind=4), DIMENSION(1:21) :: indirectionDescriptorArray

  INTEGER(kind=4) :: mappingArray6Size
  INTEGER(kind=4) :: mappingArray10Size
  INTEGER(kind=4) :: mappingArray14Size
  INTEGER(kind=4) :: mappingArray18Size

  INTEGER(kind=4) :: numberOfIndirectOpDats
  INTEGER(kind=4) :: blockOffset
  INTEGER(kind=4) :: pblkMapSize
  INTEGER(kind=4) :: poffsetSize
  INTEGER(kind=4) :: pnelemsSize
  INTEGER(kind=4) :: pnthrcolSize
  INTEGER(kind=4) :: pthrcolSize
  INTEGER(kind=4), POINTER, DIMENSION(:) :: ncolblk
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: pblkMap
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: poffset
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: pnelems
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: pnthrcol
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: pthrcol
  INTEGER(kind=4) :: partitionSize
  INTEGER(kind=4) :: blockSize
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: i2
  INTEGER(kind=4), SAVE :: calledTimes

  INTEGER(kind=4) :: istat

  numberOfOpDats = 21

  opArgArray(1) = opArg1
  opArgArray(2) = opArg2
  opArgArray(3) = opArg3
  opArgArray(4) = opArg4
  opArgArray(5) = opArg5
  opArgArray(6) = opArg6
  opArgArray(7) = opArg7
  opArgArray(8) = opArg8
  opArgArray(9) = opArg9
  opArgArray(10) = opArg10
  opArgArray(11) = opArg11
  opArgArray(12) = opArg12
  opArgArray(13) = opArg13
  opArgArray(14) = opArg14
  opArgArray(15) = opArg15
  opArgArray(16) = opArg16
  opArgArray(17) = opArg17
  opArgArray(18) = opArg18
  opArgArray(19) = opArg19
  opArgArray(20) = opArg20
  opArgArray(21) = opArg21

  returnSetKernelTiming = setKernelTime(10 , userSubroutine//C_NULL_CHAR, &
  & 0.d0, 0.00000,0.00000, 0)
  call op_timers_core(startTime)

  n_upper = op_mpi_halo_exchanges_cuda(set%setCPtr,numberOfOpDats,opArgArray)

  indirectionDescriptorArray(1) = -1
  indirectionDescriptorArray(2) = -1
  indirectionDescriptorArray(3) = -1
  indirectionDescriptorArray(4) = -1
  indirectionDescriptorArray(5) = -1
  indirectionDescriptorArray(6) = 0
  indirectionDescriptorArray(7) = 0
  indirectionDescriptorArray(8) = 0
  indirectionDescriptorArray(9) = 0
  indirectionDescriptorArray(10) = 1
  indirectionDescriptorArray(11) = 1
  indirectionDescriptorArray(12) = 1
  indirectionDescriptorArray(13) = 1
  indirectionDescriptorArray(14) = 2
  indirectionDescriptorArray(15) = 2
  indirectionDescriptorArray(16) = 2
  indirectionDescriptorArray(17) = 2
  indirectionDescriptorArray(18) = 3
  indirectionDescriptorArray(19) = 3
  indirectionDescriptorArray(20) = 3
  indirectionDescriptorArray(21) = 3

  numberOfIndirectOpDats = 4

  partitionSize = getPartitionSize(userSubroutine//C_NULL_CHAR,set%setPtr%size)

  planRet_getacc_scatter = FortranPlanCaller( &
  & userSubroutine//C_NULL_CHAR, &
  & set%setCPtr, &
  & partitionSize, &
  & numberOfOpDats, &
  & opArgArray, &
  & numberOfIndirectOpDats, &
  & indirectionDescriptorArray,2)

  opDat6Cardinality = opArg6%dim * getSetSizeFromOpArg(opArg6)
  opMap6Cardinality = set%setPtr%size * getMapDimFromOpArg(opArg6)
  opDat10Cardinality = opArg10%dim * getSetSizeFromOpArg(opArg10)
  opMap10Cardinality = set%setPtr%size * getMapDimFromOpArg(opArg10)
  opDat14Cardinality = opArg14%dim * getSetSizeFromOpArg(opArg14)
  opMap14Cardinality = set%setPtr%size * getMapDimFromOpArg(opArg14)
  opDat18Cardinality = opArg18%dim * getSetSizeFromOpArg(opArg18)
  opMap18Cardinality = set%setPtr%size * getMapDimFromOpArg(opArg18)
  opDat1Cardinality = opArg1%dim * getSetSizeFromOpArg(opArg1)
  opDat2Cardinality = opArg2%dim * getSetSizeFromOpArg(opArg2)
  opDat3Cardinality = opArg3%dim * getSetSizeFromOpArg(opArg3)
  opDat4Cardinality = opArg4%dim * getSetSizeFromOpArg(opArg4)
  opDat5Cardinality = opArg5%dim * getSetSizeFromOpArg(opArg5)


  CALL c_f_pointer(opArg6%data_d,opDat6Devicegetacc_scatter,(/opDat6Cardinality/))
  CALL c_f_pointer(opArg6%map_data_d,opMap6Devicegetacc_scatter,(/opMap6Cardinality/))
  CALL c_f_pointer(opArg10%data_d,opDat10Devicegetacc_scatter,(/opDat10Cardinality/))
  CALL c_f_pointer(opArg10%map_data_d,opMap10Devicegetacc_scatter,(/opMap10Cardinality/))
  CALL c_f_pointer(opArg14%data_d,opDat14Devicegetacc_scatter,(/opDat14Cardinality/))
  CALL c_f_pointer(opArg14%map_data_d,opMap14Devicegetacc_scatter,(/opMap14Cardinality/))
  CALL c_f_pointer(opArg18%data_d,opDat18Devicegetacc_scatter,(/opDat18Cardinality/))
  CALL c_f_pointer(opArg18%map_data_d,opMap18Devicegetacc_scatter,(/opMap18Cardinality/))
  CALL c_f_pointer(opArg1%data_d,opDat1Devicegetacc_scatter,(/opDat1Cardinality/))
  CALL c_f_pointer(opArg2%data_d,opDat2Devicegetacc_scatter,(/opDat2Cardinality/))
  CALL c_f_pointer(opArg3%data_d,opDat3Devicegetacc_scatter,(/opDat3Cardinality/))
  CALL c_f_pointer(opArg4%data_d,opDat4Devicegetacc_scatter,(/opDat4Cardinality/))
  CALL c_f_pointer(opArg5%data_d,opDat5Devicegetacc_scatter,(/opDat5Cardinality/))

  CALL c_f_pointer(planRet_getacc_scatter,actualPlan_getacc_scatter)
  CALL c_f_pointer(actualPlan_getacc_scatter%ncolblk,ncolblk,(/set%setPtr%size/))
  pblkMapSize = actualPlan_getacc_scatter%nblocks
  CALL c_f_pointer(actualPlan_getacc_scatter%blkmap_d,pblkMap,(/pblkMapSize/))
  poffsetSize = actualPlan_getacc_scatter%nblocks
  CALL c_f_pointer(actualPlan_getacc_scatter%offset_d,poffset,(/poffsetSize/))
  pnelemsSize = actualPlan_getacc_scatter%nblocks
  CALL c_f_pointer(actualPlan_getacc_scatter%nelems_d,pnelems,(/pnelemsSize/))
  pnthrcolSize = actualPlan_getacc_scatter%nblocks
  CALL c_f_pointer(actualPlan_getacc_scatter%nthrcol,pnthrcol,(/pnthrcolSize/))
  pthrcolSize = set%setPtr%size
  CALL c_f_pointer(actualPlan_getacc_scatter%thrcol,pthrcol,(/pthrcolSize/))


  blockOffset = 0

  threadsPerBlock = getBlockSize(userSubroutine//C_NULL_CHAR,set%setPtr%size)
  DO i2 = 0, actualPlan_getacc_scatter%ncolors - 1, 1
    IF (i2 .EQ. actualPlan_getacc_scatter%ncolors_core) THEN
      CALL op_mpi_wait_all_cuda(numberOfOpDats,opArgArray)
    END IF

    blocksPerGrid = ncolblk(i2 + 1)
    dynamicSharedMemorySize = reductionSize(opArgArray,numberOfOpDats) * threadsPerBlock

    CALL op_cuda_getacc_scatter <<<blocksPerGrid,threadsPerBlock,dynamicSharedMemorySize>>> (&
    & getSetSizeFromOpArg(opArg1), &
    & opDat6Devicegetacc_scatter, &
    & opDat10Devicegetacc_scatter, &
    & opDat14Devicegetacc_scatter, &
    & opDat18Devicegetacc_scatter, &
    & opMap6Devicegetacc_scatter, &
    & opDat1Devicegetacc_scatter, &
    & opDat2Devicegetacc_scatter, &
    & opDat3Devicegetacc_scatter, &
    & opDat4Devicegetacc_scatter, &
    & opDat5Devicegetacc_scatter, &
    & pblkMap, &
    & poffset,pnelems,pnthrcol,pthrcol, &
    & set%setPtr%size+set%setPtr%exec_size, blockOffset)

    blockOffset = blockOffset + blocksPerGrid
  END DO


  IF ((n_upper .EQ. 0) .OR. (n_upper .EQ. set%setPtr%core_size)) THEN
    CALL op_mpi_wait_all_cuda(numberOfOpDats,opArgArray)
  END IF


  CALL op_mpi_set_dirtybit_cuda(numberOfOpDats,opArgArray)

  istat = cudaDeviceSynchronize()
  call op_timers_core(endTime)

  returnSetKernelTiming = setKernelTime(10 , userSubroutine//C_NULL_CHAR, &
  & endTime-startTime, actualPlan_getacc_scatter%transfer,actualPlan_getacc_scatter%transfer2, 1)
  calledTimes = calledTimes + 1
END SUBROUTINE


! Stub for CPU execution

SUBROUTINE op_wrap_getacc_scatter( &
  & opDat6Local, &
  & opDat10Local, &
  & opDat14Local, &
  & opDat18Local, &
  & opDat1Local, &
  & opDat2Local, &
  & opDat3Local, &
  & opDat4Local, &
  & opDat5Local, &
  & opDat6Map, &
  & opDat6MapDim, &
  & bottom,top)
  real(8) opDat6Local(1,*)
  real(8) opDat10Local(1,*)
  real(8) opDat14Local(1,*)
  real(8) opDat18Local(1,*)
  real(8) opDat1Local(4,*)
  real(8) opDat2Local(1,*)
  real(8) opDat3Local(4,*)
  real(8) opDat4Local(4,*)
  real(8) opDat5Local(4,*)
  INTEGER(kind=4) opDat6Map(*)
  INTEGER(kind=4) opDat6MapDim
  INTEGER(kind=4) bottom,top,i1
  INTEGER(kind=4) map6idx, map7idx, map8idx, map9idx

  DO i1 = bottom, top - 1, 1
    map6idx = opDat6Map(1 + i1 * opDat6MapDim + 0)+1
    map7idx = opDat6Map(1 + i1 * opDat6MapDim + 1)+1
    map8idx = opDat6Map(1 + i1 * opDat6MapDim + 2)+1
    map9idx = opDat6Map(1 + i1 * opDat6MapDim + 3)+1
! kernel call
  CALL getacc_scatter( &
    & opDat1Local(1,i1+1), &
    & opDat2Local(1,i1+1), &
    & opDat3Local(1,i1+1), &
    & opDat4Local(1,i1+1), &
    & opDat5Local(1,i1+1), &
    & opDat6Local(1,map6idx), &
    & opDat6Local(1,map7idx), &
    & opDat6Local(1,map8idx), &
    & opDat6Local(1,map9idx), &
    & opDat10Local(1,map6idx), &
    & opDat10Local(1,map7idx), &
    & opDat10Local(1,map8idx), &
    & opDat10Local(1,map9idx), &
    & opDat14Local(1,map6idx), &
    & opDat14Local(1,map7idx), &
    & opDat14Local(1,map8idx), &
    & opDat14Local(1,map9idx), &
    & opDat18Local(1,map6idx), &
    & opDat18Local(1,map7idx), &
    & opDat18Local(1,map8idx), &
    & opDat18Local(1,map9idx) &
    & )
  END DO
END SUBROUTINE
SUBROUTINE getacc_scatter_host_cpu( userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4, &
  & opArg5, &
  & opArg6, &
  & opArg7, &
  & opArg8, &
  & opArg9, &
  & opArg10, &
  & opArg11, &
  & opArg12, &
  & opArg13, &
  & opArg14, &
  & opArg15, &
  & opArg16, &
  & opArg17, &
  & opArg18, &
  & opArg19, &
  & opArg20, &
  & opArg21 )

  IMPLICIT NONE
  character(kind=c_char,len=*), INTENT(IN) :: userSubroutine
  type ( op_set ) , INTENT(IN) :: set

  type ( op_arg ) , INTENT(IN) :: opArg1
  type ( op_arg ) , INTENT(IN) :: opArg2
  type ( op_arg ) , INTENT(IN) :: opArg3
  type ( op_arg ) , INTENT(IN) :: opArg4
  type ( op_arg ) , INTENT(IN) :: opArg5
  type ( op_arg ) , INTENT(IN) :: opArg6
  type ( op_arg ) , INTENT(IN) :: opArg7
  type ( op_arg ) , INTENT(IN) :: opArg8
  type ( op_arg ) , INTENT(IN) :: opArg9
  type ( op_arg ) , INTENT(IN) :: opArg10
  type ( op_arg ) , INTENT(IN) :: opArg11
  type ( op_arg ) , INTENT(IN) :: opArg12
  type ( op_arg ) , INTENT(IN) :: opArg13
  type ( op_arg ) , INTENT(IN) :: opArg14
  type ( op_arg ) , INTENT(IN) :: opArg15
  type ( op_arg ) , INTENT(IN) :: opArg16
  type ( op_arg ) , INTENT(IN) :: opArg17
  type ( op_arg ) , INTENT(IN) :: opArg18
  type ( op_arg ) , INTENT(IN) :: opArg19
  type ( op_arg ) , INTENT(IN) :: opArg20
  type ( op_arg ) , INTENT(IN) :: opArg21

  type ( op_arg ) , DIMENSION(21) :: opArgArray
  INTEGER(kind=4) :: numberOfOpDats
  INTEGER(kind=4) :: n_upper
  type ( op_set_core ) , POINTER :: opSetCore

  INTEGER(kind=4), POINTER, DIMENSION(:) :: opDat6Map
  INTEGER(kind=4) :: opDat6MapDim
  real(8), POINTER, DIMENSION(:) :: opDat6Local
  INTEGER(kind=4) :: opDat6Cardinality

  INTEGER(kind=4), POINTER, DIMENSION(:) :: opDat10Map
  INTEGER(kind=4) :: opDat10MapDim
  real(8), POINTER, DIMENSION(:) :: opDat10Local
  INTEGER(kind=4) :: opDat10Cardinality

  INTEGER(kind=4), POINTER, DIMENSION(:) :: opDat14Map
  INTEGER(kind=4) :: opDat14MapDim
  real(8), POINTER, DIMENSION(:) :: opDat14Local
  INTEGER(kind=4) :: opDat14Cardinality

  INTEGER(kind=4), POINTER, DIMENSION(:) :: opDat18Map
  INTEGER(kind=4) :: opDat18MapDim
  real(8), POINTER, DIMENSION(:) :: opDat18Local
  INTEGER(kind=4) :: opDat18Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat1Local
  INTEGER(kind=4) :: opDat1Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat2Local
  INTEGER(kind=4) :: opDat2Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat3Local
  INTEGER(kind=4) :: opDat3Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat4Local
  INTEGER(kind=4) :: opDat4Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat5Local
  INTEGER(kind=4) :: opDat5Cardinality

  INTEGER(kind=4) :: threadID
  INTEGER(kind=4) :: numberOfThreads
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayStart
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayEnd
  REAL(kind=8) :: startTime
  REAL(kind=8) :: endTime
  INTEGER(kind=4) :: returnSetKernelTiming
  LOGICAL :: firstTime_getacc_scatter = .TRUE.
  type ( c_ptr )  :: planRet_getacc_scatter
  type ( op_plan ) , POINTER :: actualPlan_getacc_scatter
  INTEGER(kind=4), POINTER, DIMENSION(:) :: ncolblk_getacc_scatter
  INTEGER(kind=4), POINTER, DIMENSION(:) :: blkmap_getacc_scatter
  INTEGER(kind=4), POINTER, DIMENSION(:) :: nelems_getacc_scatter
  INTEGER(kind=4), POINTER, DIMENSION(:) :: offset_getacc_scatter
  INTEGER(kind=4), DIMENSION(1:21) :: indirectionDescriptorArray
  INTEGER(kind=4) :: numberOfIndirectOpDats
  INTEGER(kind=4) :: blockOffset
  INTEGER(kind=4) :: nblocks
  INTEGER(kind=4) :: partitionSize
  INTEGER(kind=4) :: blockID
  INTEGER(kind=4) :: nelem
  INTEGER(kind=4) :: offset_b


  INTEGER(kind=4) :: i1,i2,n

  numberOfOpDats = 21

  opArgArray(1) = opArg1
  opArgArray(2) = opArg2
  opArgArray(3) = opArg3
  opArgArray(4) = opArg4
  opArgArray(5) = opArg5
  opArgArray(6) = opArg6
  opArgArray(7) = opArg7
  opArgArray(8) = opArg8
  opArgArray(9) = opArg9
  opArgArray(10) = opArg10
  opArgArray(11) = opArg11
  opArgArray(12) = opArg12
  opArgArray(13) = opArg13
  opArgArray(14) = opArg14
  opArgArray(15) = opArg15
  opArgArray(16) = opArg16
  opArgArray(17) = opArg17
  opArgArray(18) = opArg18
  opArgArray(19) = opArg19
  opArgArray(20) = opArg20
  opArgArray(21) = opArg21

  returnSetKernelTiming = setKernelTime(10 , userSubroutine//C_NULL_CHAR, &
  & 0.d0, 0.00000,0.00000, 0)
  call op_timers_core(startTime)

  n_upper = op_mpi_halo_exchanges(set%setCPtr,numberOfOpDats,opArgArray)

#ifdef OP_PART_SIZE_1
  partitionSize = OP_PART_SIZE_1
#else
  partitionSize = 0
#endif

#ifdef _OPENMP
  numberOfThreads = omp_get_max_threads()
#else
  numberOfThreads = 1
#endif
    indirectionDescriptorArray(1) = -1
    indirectionDescriptorArray(2) = -1
    indirectionDescriptorArray(3) = -1
    indirectionDescriptorArray(4) = -1
    indirectionDescriptorArray(5) = -1
    indirectionDescriptorArray(6) = 0
    indirectionDescriptorArray(7) = 0
    indirectionDescriptorArray(8) = 0
    indirectionDescriptorArray(9) = 0
    indirectionDescriptorArray(10) = 1
    indirectionDescriptorArray(11) = 1
    indirectionDescriptorArray(12) = 1
    indirectionDescriptorArray(13) = 1
    indirectionDescriptorArray(14) = 2
    indirectionDescriptorArray(15) = 2
    indirectionDescriptorArray(16) = 2
    indirectionDescriptorArray(17) = 2
    indirectionDescriptorArray(18) = 3
    indirectionDescriptorArray(19) = 3
    indirectionDescriptorArray(20) = 3
    indirectionDescriptorArray(21) = 3

    numberOfIndirectOpDats = 4

    planRet_getacc_scatter = FortranPlanCaller( &
    & userSubroutine//C_NULL_CHAR, &
    & set%setCPtr, &
    & partitionSize, &
    & numberOfOpDats, &
    & opArgArray, &
    & numberOfIndirectOpDats, &
    & indirectionDescriptorArray,2)

    CALL c_f_pointer(planRet_getacc_scatter,actualPlan_getacc_scatter)
    CALL c_f_pointer(actualPlan_getacc_scatter%ncolblk,ncolblk_getacc_scatter,(/actualPlan_getacc_scatter%ncolors_core/))
    CALL c_f_pointer(actualPlan_getacc_scatter%blkmap,blkmap_getacc_scatter,(/actualPlan_getacc_scatter%nblocks/))
    CALL c_f_pointer(actualPlan_getacc_scatter%offset,offset_getacc_scatter,(/actualPlan_getacc_scatter%nblocks/))
    CALL c_f_pointer(actualPlan_getacc_scatter%nelems,nelems_getacc_scatter,(/actualPlan_getacc_scatter%nblocks/))

    opSetCore => set%setPtr

    opDat6Cardinality = opArg6%dim * getSetSizeFromOpArg(opArg6)
    opDat6MapDim = getMapDimFromOpArg(opArg6)
    opDat10Cardinality = opArg10%dim * getSetSizeFromOpArg(opArg10)
    opDat10MapDim = getMapDimFromOpArg(opArg10)
    opDat14Cardinality = opArg14%dim * getSetSizeFromOpArg(opArg14)
    opDat14MapDim = getMapDimFromOpArg(opArg14)
    opDat18Cardinality = opArg18%dim * getSetSizeFromOpArg(opArg18)
    opDat18MapDim = getMapDimFromOpArg(opArg18)
    opDat1Cardinality = opArg1%dim * getSetSizeFromOpArg(opArg1)
    opDat2Cardinality = opArg2%dim * getSetSizeFromOpArg(opArg2)
    opDat3Cardinality = opArg3%dim * getSetSizeFromOpArg(opArg3)
    opDat4Cardinality = opArg4%dim * getSetSizeFromOpArg(opArg4)
    opDat5Cardinality = opArg5%dim * getSetSizeFromOpArg(opArg5)
    CALL c_f_pointer(opArg6%data,opDat6Local,(/opDat6Cardinality/))
    CALL c_f_pointer(opArg6%map_data,opDat6Map,(/opSetCore%size*opDat6MapDim/))
    CALL c_f_pointer(opArg10%data,opDat10Local,(/opDat10Cardinality/))
    CALL c_f_pointer(opArg10%map_data,opDat10Map,(/opSetCore%size*opDat10MapDim/))
    CALL c_f_pointer(opArg14%data,opDat14Local,(/opDat14Cardinality/))
    CALL c_f_pointer(opArg14%map_data,opDat14Map,(/opSetCore%size*opDat14MapDim/))
    CALL c_f_pointer(opArg18%data,opDat18Local,(/opDat18Cardinality/))
    CALL c_f_pointer(opArg18%map_data,opDat18Map,(/opSetCore%size*opDat18MapDim/))
    CALL c_f_pointer(opArg1%data,opDat1Local,(/opDat1Cardinality/))
    CALL c_f_pointer(opArg2%data,opDat2Local,(/opDat2Cardinality/))
    CALL c_f_pointer(opArg3%data,opDat3Local,(/opDat3Cardinality/))
    CALL c_f_pointer(opArg4%data,opDat4Local,(/opDat4Cardinality/))
    CALL c_f_pointer(opArg5%data,opDat5Local,(/opDat5Cardinality/))


    blockOffset = 0

    DO i1 = 0, actualPlan_getacc_scatter%ncolors - 1, 1
      IF (i1 .EQ. actualPlan_getacc_scatter%ncolors_core) THEN
        CALL op_mpi_wait_all(numberOfOpDats,opArgArray)
      END IF

      nblocks = ncolblk_getacc_scatter(i1 + 1)
      !$OMP PARALLEL DO private (threadID, blockID, nelem, offset_b)
      DO i2 = 0, nblocks - 1, 1
        threadID = omp_get_thread_num()
        blockID = blkmap_getacc_scatter(i2+blockOffset+1)
        nelem = nelems_getacc_scatter(blockID+1)
        offset_b = offset_getacc_scatter(blockID+1)
        CALL op_wrap_getacc_scatter( &
        & opDat6Local, &
        & opDat10Local, &
        & opDat14Local, &
        & opDat18Local, &
        & opDat1Local, &
        & opDat2Local, &
        & opDat3Local, &
        & opDat4Local, &
        & opDat5Local, &
        & opDat6Map, &
        & opDat6MapDim, &
        & offset_b, offset_b+nelem)
      END DO
      !$OMP END PARALLEL DO
      blockOffset = blockOffset + nblocks
    END DO
    IF ((n_upper .EQ. 0) .OR. (n_upper .EQ. opSetCore%core_size)) THEN
      CALL op_mpi_wait_all(numberOfOpDats,opArgArray)
    END IF

    CALL op_mpi_set_dirtybit(numberOfOpDats,opArgArray)

    call op_timers_core(endTime)

    returnSetKernelTiming = setKernelTime(10 , userSubroutine//C_NULL_CHAR, &
    & endTime-startTime, actualPlan_getacc_scatter%transfer,actualPlan_getacc_scatter%transfer2, 1)
  END SUBROUTINE
  END MODULE
