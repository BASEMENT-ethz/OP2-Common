!
! auto-generated by op2.py on 2015-01-26 22:23
!

MODULE GETACC_UPDPOS_MODULE
USE OP2_CONSTANTS
USE kinds_mod,    ONLY: ink,rlk
USE parameters_mod,ONLY: LI
USE OP2_FORTRAN_DECLARATIONS
USE OP2_FORTRAN_RT_SUPPORT
USE ISO_C_BINDING
USE CUDAFOR
USE CUDACONFIGURATIONPARAMS


#ifdef _OPENMP
  USE OMP_LIB
#endif

! getacc_updposvariable declarations




CONTAINS

!DEC$ ATTRIBUTES FORCEINLINE :: getacc_updpos
attributes (host) subroutine getacc_updpos(ndub,ndvb,ndx,ndy,dt)

    USE kinds_mod,ONLY: rlk

    implicit none

    REAL(KIND=rlk), INTENT(INOUT) :: ndy,ndx
    REAL(KIND=rlk), INTENT(IN) :: dt,ndub,ndvb

    ndx=ndx+dt*ndub
    ndy=ndy+dt*ndvb

  END SUBROUTINE getacc_updpos

attributes (device) subroutine getacc_updpos_gpu(ndub,ndvb,ndx,ndy,dt)

    USE kinds_mod,ONLY: rlk

    implicit none

    REAL(KIND=rlk), INTENT(INOUT) :: ndy,ndx,dt
    REAL(KIND=rlk), INTENT(IN) :: ndub,ndvb

    ndx=ndx+dt*ndub
    ndy=ndy+dt*ndvb

  END SUBROUTINE getacc_updpos_gpu


! CUDA kernel function
attributes (global) SUBROUTINE op_cuda_getacc_updpos( &
  & opDat1Devicegetacc_updpos, &
  & opDat2Devicegetacc_updpos, &
  & opDat3Devicegetacc_updpos, &
  & opDat4Devicegetacc_updpos, &
  & opGblDat5Devicegetacc_updpos,   &
  & setSize)

  IMPLICIT NONE

! local variables
  real(8), DEVICE, INTENT(IN) :: opDat1Devicegetacc_updpos(*)
  real(8), DEVICE, INTENT(IN) :: opDat2Devicegetacc_updpos(*)
  real(8), DEVICE :: opDat3Devicegetacc_updpos(*)
  real(8), DEVICE :: opDat4Devicegetacc_updpos(*)

  real(8), VALUE :: opGblDat5Devicegetacc_updpos

  INTEGER(kind=4), VALUE :: setSize
  INTEGER(kind=4) :: i1


  DO i1 = threadIdx%x - 1 + (blockIdx%x - 1) * blockDim%x, setSize - 1, blockDim%x * gridDim%x

! kernel call

    CALL getacc_updpos_gpu( &
    & opDat1Devicegetacc_updpos(i1 + 1), &
    & opDat2Devicegetacc_updpos(i1 + 1), &
    & opDat3Devicegetacc_updpos(i1 + 1), &
    & opDat4Devicegetacc_updpos(i1 + 1), &
    & opGblDat5Devicegetacc_updpos &
    & )
  END DO


END SUBROUTINE

attributes (host) SUBROUTINE getacc_updpos_host( userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4, &
  & opArg5 )

  IMPLICIT NONE
  character(len=13), INTENT(IN) :: userSubroutine
  TYPE ( op_set ) , INTENT(IN) :: set

  TYPE ( op_arg ) , INTENT(IN) :: opArg1
  TYPE ( op_arg ) , INTENT(IN) :: opArg2
  TYPE ( op_arg ) , INTENT(IN) :: opArg3
  TYPE ( op_arg ) , INTENT(IN) :: opArg4
  TYPE ( op_arg ) , INTENT(IN) :: opArg5

  IF (getHybridGPU()) THEN
    CALL getacc_updpos_host_gpu( userSubroutine, set, &
    & opArg1, &
    & opArg2, &
    & opArg3, &
    & opArg4, &
    & opArg5 )
  ELSE
    CALL getacc_updpos_host_cpu( userSubroutine, set, &
    & opArg1, &
    & opArg2, &
    & opArg3, &
    & opArg4, &
    & opArg5 )
  END IF
END SUBROUTINE


! Stub for GPU execution

attributes (host) SUBROUTINE getacc_updpos_host_gpu( userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4, &
  & opArg5 )

  IMPLICIT NONE
  character(len=13), INTENT(IN) :: userSubroutine
  TYPE ( op_set ) , INTENT(IN) :: set

  TYPE ( op_arg ) , INTENT(IN) :: opArg1
  TYPE ( op_arg ) , INTENT(IN) :: opArg2
  TYPE ( op_arg ) , INTENT(IN) :: opArg3
  TYPE ( op_arg ) , INTENT(IN) :: opArg4
  TYPE ( op_arg ) , INTENT(IN) :: opArg5

  TYPE ( op_arg ) , DIMENSION(5) :: opArgArray
  INTEGER(kind=4) :: numberOfOpDats
  INTEGER(kind=4) :: n_upper
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayStart
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayEnd
  REAL(kind=8) :: startTime
  REAL(kind=8) :: endTime
  INTEGER(kind=4) :: returnSetKernelTiming


  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat1Devicegetacc_updpos
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat2Devicegetacc_updpos
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat3Devicegetacc_updpos
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat4Devicegetacc_updpos

  INTEGER(kind=4) :: opDat1Cardinality
  INTEGER(kind=4) :: opDat2Cardinality
  INTEGER(kind=4) :: opDat3Cardinality
  INTEGER(kind=4) :: opDat4Cardinality
  INTEGER(kind=4) :: opDat5Cardinality

  INTEGER(kind=4) :: blocksPerGrid
  INTEGER(kind=4) :: threadsPerBlock
  INTEGER(kind=4) :: dynamicSharedMemorySize
  INTEGER(kind=4) :: threadSynchRet
  INTEGER(kind=4), SAVE :: calledTimes
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: i2
  INTEGER(kind=4) :: i10
  INTEGER(kind=4) :: i20
  REAL(kind=4) :: dataTransfer

  INTEGER(kind=4) :: istat
  real(8), POINTER :: opDat5Host

  numberOfOpDats = 5

  opArgArray(1) = opArg1
  opArgArray(2) = opArg2
  opArgArray(3) = opArg3
  opArgArray(4) = opArg4
  opArgArray(5) = opArg5

  returnSetKernelTiming = setKernelTime(14 , userSubroutine//C_NULL_CHAR, &
  & 0.d0, 0.00000,0.00000, 0)
  call op_timers_core(startTime)

  n_upper = op_mpi_halo_exchanges_cuda(set%setCPtr,numberOfOpDats,opArgArray)


  blocksPerGrid = 600
  threadsPerBlock = getBlockSize(userSubroutine//C_NULL_CHAR,set%setPtr%size)
  dynamicSharedMemorySize = reductionSize(opArgArray,numberOfOpDats) * threadsPerBlock

  opDat1Cardinality = opArg1%dim * getSetSizeFromOpArg(opArg1)
  opDat2Cardinality = opArg2%dim * getSetSizeFromOpArg(opArg2)
  opDat3Cardinality = opArg3%dim * getSetSizeFromOpArg(opArg3)
  opDat4Cardinality = opArg4%dim * getSetSizeFromOpArg(opArg4)
  opDat5Cardinality = opArg5%dim


  CALL c_f_pointer(opArg1%data_d,opDat1Devicegetacc_updpos,(/opDat1Cardinality/))
  CALL c_f_pointer(opArg2%data_d,opDat2Devicegetacc_updpos,(/opDat2Cardinality/))
  CALL c_f_pointer(opArg3%data_d,opDat3Devicegetacc_updpos,(/opDat3Cardinality/))
  CALL c_f_pointer(opArg4%data_d,opDat4Devicegetacc_updpos,(/opDat4Cardinality/))
  CALL c_f_pointer(opArg5%data,opDat5Host)


  CALL op_cuda_getacc_updpos <<<blocksPerGrid,threadsPerBlock,dynamicSharedMemorySize>>>( &
  & opDat1Devicegetacc_updpos, &
  & opDat2Devicegetacc_updpos, &
  & opDat3Devicegetacc_updpos, &
  & opDat4Devicegetacc_updpos, &
  & opDat5Host, &
  set%setPtr%size)

  IF ((n_upper .EQ. 0) .OR. (n_upper .EQ. set%setPtr%core_size)) THEN
    CALL op_mpi_wait_all_cuda(numberOfOpDats,opArgArray)
  END IF


  CALL op_mpi_set_dirtybit_cuda(numberOfOpDats,opArgArray)

  istat = cudaDeviceSynchronize()
  call op_timers_core(endTime)

  dataTransfer = 0.0
  dataTransfer = dataTransfer + opArg1%size * getSetSizeFromOpArg(opArg1)
  dataTransfer = dataTransfer + opArg2%size * getSetSizeFromOpArg(opArg2)
  dataTransfer = dataTransfer + opArg3%size * getSetSizeFromOpArg(opArg3) * 2.d0
  dataTransfer = dataTransfer + opArg4%size * getSetSizeFromOpArg(opArg4) * 2.d0
  dataTransfer = dataTransfer + opArg5%size
  returnSetKernelTiming = setKernelTime(14 , userSubroutine//C_NULL_CHAR, &
  & endTime-startTime, dataTransfer, 0.00000, 1)
  calledTimes = calledTimes + 1
END SUBROUTINE


! Stub for CPU execution

SUBROUTINE op_wrap_getacc_updpos( &
  & opDat1Local, &
  & opDat2Local, &
  & opDat3Local, &
  & opDat4Local, &
  & opDat5Local, &
  & bottom,top)
  real(8) opDat1Local(1,*)
  real(8) opDat2Local(1,*)
  real(8) opDat3Local(1,*)
  real(8) opDat4Local(1,*)
  real(8) opDat5Local(1)
  INTEGER(kind=4) bottom,top,i1

  DO i1 = bottom, top - 1, 1
! kernel call
  CALL getacc_updpos( &
    & opDat1Local(1,i1+1), &
    & opDat2Local(1,i1+1), &
    & opDat3Local(1,i1+1), &
    & opDat4Local(1,i1+1), &
    & opDat5Local(1) &
    & )
  END DO
END SUBROUTINE
SUBROUTINE getacc_updpos_host_cpu( userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4, &
  & opArg5 )

  IMPLICIT NONE
  character(kind=c_char,len=*), INTENT(IN) :: userSubroutine
  type ( op_set ) , INTENT(IN) :: set

  type ( op_arg ) , INTENT(IN) :: opArg1
  type ( op_arg ) , INTENT(IN) :: opArg2
  type ( op_arg ) , INTENT(IN) :: opArg3
  type ( op_arg ) , INTENT(IN) :: opArg4
  type ( op_arg ) , INTENT(IN) :: opArg5

  type ( op_arg ) , DIMENSION(5) :: opArgArray
  INTEGER(kind=4) :: numberOfOpDats
  INTEGER(kind=4) :: n_upper
  type ( op_set_core ) , POINTER :: opSetCore

  real(8), POINTER, DIMENSION(:) :: opDat1Local
  INTEGER(kind=4) :: opDat1Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat2Local
  INTEGER(kind=4) :: opDat2Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat3Local
  INTEGER(kind=4) :: opDat3Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat4Local
  INTEGER(kind=4) :: opDat4Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat5Local
  INTEGER(kind=4) :: threadID
  INTEGER(kind=4) :: numberOfThreads
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayStart
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayEnd
  REAL(kind=8) :: startTime
  REAL(kind=8) :: endTime
  INTEGER(kind=4) :: returnSetKernelTiming
  INTEGER(kind=4) :: sliceStart
  INTEGER(kind=4) :: sliceEnd
  REAL(kind=4) :: dataTransfer


  INTEGER(kind=4) :: i1,i2,n

  numberOfOpDats = 5

  opArgArray(1) = opArg1
  opArgArray(2) = opArg2
  opArgArray(3) = opArg3
  opArgArray(4) = opArg4
  opArgArray(5) = opArg5

  returnSetKernelTiming = setKernelTime(14 , userSubroutine//C_NULL_CHAR, &
  & 0.d0, 0.00000,0.00000, 0)
  call op_timers_core(startTime)

  n_upper = op_mpi_halo_exchanges(set%setCPtr,numberOfOpDats,opArgArray)


#ifdef _OPENMP
  numberOfThreads = omp_get_max_threads()
#else
  numberOfThreads = 1
#endif

    opSetCore => set%setPtr

    opDat1Cardinality = opArg1%dim * getSetSizeFromOpArg(opArg1)
    opDat2Cardinality = opArg2%dim * getSetSizeFromOpArg(opArg2)
    opDat3Cardinality = opArg3%dim * getSetSizeFromOpArg(opArg3)
    opDat4Cardinality = opArg4%dim * getSetSizeFromOpArg(opArg4)
    CALL c_f_pointer(opArg1%data,opDat1Local,(/opDat1Cardinality/))
    CALL c_f_pointer(opArg2%data,opDat2Local,(/opDat2Cardinality/))
    CALL c_f_pointer(opArg3%data,opDat3Local,(/opDat3Cardinality/))
    CALL c_f_pointer(opArg4%data,opDat4Local,(/opDat4Cardinality/))
    CALL c_f_pointer(opArg5%data,opDat5Local, (/opArg5%dim/))


    !$OMP PARALLEL DO private (sliceStart,sliceEnd,i1,threadID)
    DO i1 = 0, numberOfThreads - 1, 1
      sliceStart = opSetCore%size * i1 / numberOfThreads
      sliceEnd = opSetCore%size * (i1 + 1) / numberOfThreads
      threadID = omp_get_thread_num()
! kernel call
      CALL op_wrap_getacc_updpos( &
      & opDat1Local, &
      & opDat2Local, &
      & opDat3Local, &
      & opDat4Local, &
      & opDat5Local, &
      & sliceStart, sliceEnd)
    END DO
    !$OMP END PARALLEL DO
    IF ((n_upper .EQ. 0) .OR. (n_upper .EQ. opSetCore%core_size)) THEN
      CALL op_mpi_wait_all(numberOfOpDats,opArgArray)
    END IF

    CALL op_mpi_set_dirtybit(numberOfOpDats,opArgArray)

    call op_timers_core(endTime)

    dataTransfer = 0.0
    dataTransfer = dataTransfer + opArg1%size * getSetSizeFromOpArg(opArg1)
    dataTransfer = dataTransfer + opArg2%size * getSetSizeFromOpArg(opArg2)
    dataTransfer = dataTransfer + opArg3%size * getSetSizeFromOpArg(opArg3) * 2.d0
    dataTransfer = dataTransfer + opArg4%size * getSetSizeFromOpArg(opArg4) * 2.d0
    dataTransfer = dataTransfer + opArg5%size
    returnSetKernelTiming = setKernelTime(14 , userSubroutine//C_NULL_CHAR, &
    & endTime-startTime, dataTransfer, 0.00000, 1)
  END SUBROUTINE
  END MODULE
