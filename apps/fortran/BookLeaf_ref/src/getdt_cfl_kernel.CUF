!
! auto-generated by op2.py on 2015-01-26 22:23
!

MODULE GETDT_CFL_MODULE
USE OP2_CONSTANTS
USE kinds_mod,    ONLY: ink,rlk
USE parameters_mod,ONLY: LI
USE OP2_FORTRAN_DECLARATIONS
USE OP2_FORTRAN_RT_SUPPORT
USE ISO_C_BINDING
USE CUDAFOR
USE CUDACONFIGURATIONPARAMS


#ifdef _OPENMP
  USE OMP_LIB
#endif

! getdt_cflvariable declarations


TYPE ( c_ptr )  :: planRet_getdt_cfl

#define OP2_SOA(var,dim,stride) var((dim-1)*stride+1)

CONTAINS

!DEC$ ATTRIBUTES FORCEINLINE :: getdt_cfl
attributes (host) subroutine getdt_cfl(rscratch11,rho,csqrd,qq,elx,ely,zdtnotreg,zmidlength)

    USE kinds_mod,ONLY: rlk,ink
!    USE geometry_mod,    ONLY: dlm,dln
    USE reals_mod,       ONLY: ccut,zcut,dt_max
    USE parameters_mod,ONLY: N_SHAPE

    implicit none

    REAL(KIND=rlk), DIMENSION(4), INTENT(IN) :: elx,ely
    REAL(KIND=rlk), INTENT(IN) :: rho,csqrd,qq
    REAL(KIND=rlk), INTENT(OUT) :: rscratch11
    INTEGER(KIND=ink), INTENT(IN) :: zdtnotreg,zmidlength !need to inline this

    REAL(KIND=rlk) :: w1,w2,w3
    !For dlm and dln
    REAL(KIND=rlk)                              :: x1,x2,y1,y2
    REAL(KIND=rlk),DIMENSION(N_SHAPE)            :: res

    IF (zdtnotreg) THEN
      rscratch11=dt_max
    ELSE
      w1=MAX(rho,zcut)
      w2=MAX(ccut,csqrd)+2.0_rlk*qq/w1
      IF (zmidlength) THEN
        x1=elx(1)+elx(2)
        x2=elx(3)+elx(4)
        y1=ely(1)+ely(2)
        y2=ely(3)+ely(4)
        x1=0.5_rlk*(x1-x2)
        y1=0.5_rlk*(y1-y2)
        res(1)=x1*x1+y1*y1
        x1=elx(3)+elx(2)
        x2=elx(1)+elx(4)
        y1=ely(3)+ely(2)
        y2=ely(1)+ely(4)
        x1=0.5_rlk*(x1-x2)
        y1=0.5_rlk*(y1-y2)
        res(2)=x1*x1+y1*y1
        res(3)=res(1)
        res(4)=res(2)
        w1=MIN(res(1),res(2),res(3),res(4))
      ELSE
        w3=(ely(3)-ely(4))* &
    &      (ely(3)-ely(4))+ &
    &      (elx(3)-elx(4))* &
    &      (elx(3)-elx(4))
        !denom(elx(3),ely(3),elx(4),ely(4))
        IF (w3.LT.zcut) THEN
          res(1)=(0.5_rlk*(elx(1)+elx(2)) &
    &           -elx(3))*(0.5_rlk*(elx(1)+elx(2))-elx(3))+ &
    &         (0.5_rlk*(ely(1)+ely(2))-ely(3))* &
    &         (0.5_rlk*(ely(1)+ely(2))-ely(3))
          !distpp(elx(1),ely(1),elx(2),ely(2),elx(3),ely(3))
        ELSE
          res(1)= 0.5_rlk*(ely(3)-ely(4))* &
    &             (elx(1)+elx(2))+0.5_rlk* &
    &             (ely(1)+ely(2))*(elx(4)-elx(3))+ &
    &              ely(4)*elx(3)-ely(3)*elx(4)
          res(1) = res(1)*res(1)/w3
    !      distpl(elx(1),ely(1),elx(2),ely(2),elx(3),ely(3),elx(4),   &
    !&                   ely(4))/w3
        ENDIF
        w3=(ely(4)-ely(1))* &
    &      (ely(4)-ely(1))+ &
    &      (elx(4)-elx(1))* &
    &      (elx(4)-elx(1))
        !denom(elx(4),ely(4),elx(1),ely(1))
        IF (w3.LT.zcut) THEN
          res(2)=(0.5_rlk*(elx(2)+elx(3)) &
    &           -elx(4))*(0.5_rlk*(elx(2)+elx(3))-elx(4))+ &
    &         (0.5_rlk*(ely(2)+ely(3))-ely(4))* &
    &         (0.5_rlk*(ely(2)+ely(3))-ely(4))
          !distpp(elx(2),ely(2),elx(3),ely(3),elx(4),ely(4))
        ELSE
          res(2)= 0.5_rlk*(ely(4)-ely(1))* &
    &             (elx(2)+elx(3))+0.5_rlk* &
    &             (ely(2)+ely(3))*(elx(1)-elx(4))+ &
    &              ely(1)*elx(4)-ely(4)*elx(1)
          res(2) = res(2)*res(2)/w3
    !      distpl(elx(2),ely(2),elx(3),ely(3),elx(4),ely(4),elx(1),   &
    !&                   ely(1))/w3
        ENDIF
        w3=(ely(1)-ely(2))* &
    &      (ely(1)-ely(2))+ &
    &      (elx(1)-elx(2))* &
    &      (elx(1)-elx(2))
        !denom(elx(1),ely(1),elx(2),ely(2))
        IF (w3.LT.zcut) THEN
          res(3)=(0.5_rlk*(elx(3)+elx(4)) &
    &           -elx(1))*(0.5_rlk*(elx(3)+elx(4))-elx(1))+ &
    &         (0.5_rlk*(ely(3)+ely(4))-ely(1))* &
    &         (0.5_rlk*(ely(3)+ely(4))-ely(1))
          !distpp(elx(3),ely(3),elx(4),ely(4),elx(1),ely(1))
        ELSE
          res(3)= 0.5_rlk*(ely(1)-ely(2))* &
    &             (elx(3)+elx(4))+0.5_rlk* &
    &             (ely(3)+ely(4))*(elx(2)-elx(1))+ &
    &              ely(2)*elx(1)-ely(1)*elx(2)
          res(3) = res(3)*res(3)/w3
    !      distpl(elx(3),ely(3),elx(4),ely(4),elx(1),ely(1),elx(2),   &
    !&                   ely(2))/w3
        ENDIF
        w3=(ely(2)-ely(3))* &
    &      (ely(2)-ely(3))+ &
    &      (elx(2)-elx(3))* &
    &      (elx(2)-elx(3))
        !denom(elx(2),ely(2),elx(3),ely(3))
        IF (w3.LT.zcut) THEN
          res(4)=(0.5_rlk*(elx(4)+elx(1)) &
    &           -elx(2))*(0.5_rlk*(elx(4)+elx(1))-elx(2))+ &
    &         (0.5_rlk*(ely(4)+ely(1))-ely(2))* &
    &         (0.5_rlk*(ely(4)+ely(1))-ely(2))
          !distpp(elx(4),ely(4),elx(1),ely(1),elx(2),ely(2))
        ELSE
          res(4)=0.5_rlk*(ely(2)-ely(3))*( &
    &             elx(4)+elx(1))+0.5_rlk*( &
    &             ely(4)+ely(1))*(elx(3)-elx(2))+ &
    &             ely(3)*elx(2)-ely(2)*elx(3)
          res(4) = res(4)*res(4)/w3
    !      distpl(elx(4),ely(4),elx(1),ely(1),elx(2),ely(2),elx(3),   &
    !&                   ely(3))/w3
        ENDIF
        w1=MIN(res(1),res(2),res(3),res(4))
      ENDIF
      rscratch11=w1/w2
    ENDIF

  END SUBROUTINE getdt_cfl

attributes (device) subroutine getdt_cfl_gpu(rscratch11,rho,csqrd,qq,elx,ely,zdtnotreg,zmidlength)

    USE kinds_mod,ONLY: rlk,ink
!    USE geometry_mod,    ONLY: dlm,dln
    USE reals_mod,       ONLY: ccut,zcut,dt_max
    USE parameters_mod,ONLY: N_SHAPE

    implicit none

    REAL(KIND=rlk), DIMENSION(4), INTENT(IN) :: elx,ely
    REAL(KIND=rlk), INTENT(IN) :: rho,csqrd,qq
    REAL(KIND=rlk), INTENT(OUT) :: rscratch11
    INTEGER(KIND=ink), INTENT(IN) :: zdtnotreg,zmidlength !need to inline this

    REAL(KIND=rlk) :: w1,w2,w3
    !For dlm and dln
    REAL(KIND=rlk)                              :: x1,x2,y1,y2
    REAL(KIND=rlk),DIMENSION(N_SHAPE)            :: res

    IF (zdtnotreg) THEN
      rscratch11=dt_max_OP2
    ELSE
      w1=MAX(rho,zcut_OP2)
      w2=MAX(ccut_OP2,csqrd)+2.0_rlk*qq/w1
      IF (zmidlength) THEN
        x1=OP2_SOA(elx,1, elements_stride_OP2)+OP2_SOA(elx,2, elements_stride_OP2)
        x2=OP2_SOA(elx,3, elements_stride_OP2)+OP2_SOA(elx,4, elements_stride_OP2)
        y1=OP2_SOA(ely,1, elements_stride_OP2)+OP2_SOA(ely,2, elements_stride_OP2)
        y2=OP2_SOA(ely,3, elements_stride_OP2)+OP2_SOA(ely,4, elements_stride_OP2)
        x1=0.5_rlk*(x1-x2)
        y1=0.5_rlk*(y1-y2)
        res(1)=x1*x1+y1*y1
        x1=OP2_SOA(elx,3, elements_stride_OP2)+OP2_SOA(elx,2, elements_stride_OP2)
        x2=OP2_SOA(elx,1, elements_stride_OP2)+OP2_SOA(elx,4, elements_stride_OP2)
        y1=OP2_SOA(ely,3, elements_stride_OP2)+OP2_SOA(ely,2, elements_stride_OP2)
        y2=OP2_SOA(ely,1, elements_stride_OP2)+OP2_SOA(ely,4, elements_stride_OP2)
        x1=0.5_rlk*(x1-x2)
        y1=0.5_rlk*(y1-y2)
        res(2)=x1*x1+y1*y1
        res(3)=res(1)
        res(4)=res(2)
        w1=MIN(res(1),res(2),res(3),res(4))
      ELSE
        w3=(OP2_SOA(ely,3, elements_stride_OP2)-OP2_SOA(ely,4, elements_stride_OP2))* &
    &      (OP2_SOA(ely,3, elements_stride_OP2)-OP2_SOA(ely,4, elements_stride_OP2))+ &
    &      (OP2_SOA(elx,3, elements_stride_OP2)-OP2_SOA(elx,4, elements_stride_OP2))* &
    &      (OP2_SOA(elx,3, elements_stride_OP2)-OP2_SOA(elx,4, elements_stride_OP2))
        !denom(elx(3),ely(3),elx(4),ely(4))
        IF (w3.LT.zcut_OP2) THEN
          res(1)=(0.5_rlk*(OP2_SOA(elx,1, elements_stride_OP2)+OP2_SOA(elx,2, elements_stride_OP2)) &
    &           -OP2_SOA(elx,3, elements_stride_OP2))*(0.5_rlk*(OP2_SOA(elx,1, elements_stride_OP2)+OP2_SOA(elx,2, elements_stride_OP2))-OP2_SOA(elx,3, elements_stride_OP2))+ &
    &         (0.5_rlk*(OP2_SOA(ely,1, elements_stride_OP2)+OP2_SOA(ely,2, elements_stride_OP2))-OP2_SOA(ely,3, elements_stride_OP2))* &
    &         (0.5_rlk*(OP2_SOA(ely,1, elements_stride_OP2)+OP2_SOA(ely,2, elements_stride_OP2))-OP2_SOA(ely,3, elements_stride_OP2))
          !distpp(elx(1),ely(1),elx(2),ely(2),elx(3),ely(3))
        ELSE
          res(1)= 0.5_rlk*(OP2_SOA(ely,3, elements_stride_OP2)-OP2_SOA(ely,4, elements_stride_OP2))* &
    &             (OP2_SOA(elx,1, elements_stride_OP2)+OP2_SOA(elx,2, elements_stride_OP2))+0.5_rlk* &
    &             (OP2_SOA(ely,1, elements_stride_OP2)+OP2_SOA(ely,2, elements_stride_OP2))*(OP2_SOA(elx,4, elements_stride_OP2)-OP2_SOA(elx,3, elements_stride_OP2))+ &
    &              OP2_SOA(ely,4, elements_stride_OP2)*OP2_SOA(elx,3, elements_stride_OP2)-OP2_SOA(ely,3, elements_stride_OP2)*OP2_SOA(elx,4, elements_stride_OP2)
          res(1) = res(1)*res(1)/w3
    !      distpl(elx(1),ely(1),elx(2),ely(2),elx(3),ely(3),elx(4),   &
    !&                   ely(4))/w3
        ENDIF
        w3=(OP2_SOA(ely,4, elements_stride_OP2)-OP2_SOA(ely,1, elements_stride_OP2))* &
    &      (OP2_SOA(ely,4, elements_stride_OP2)-OP2_SOA(ely,1, elements_stride_OP2))+ &
    &      (OP2_SOA(elx,4, elements_stride_OP2)-OP2_SOA(elx,1, elements_stride_OP2))* &
    &      (OP2_SOA(elx,4, elements_stride_OP2)-OP2_SOA(elx,1, elements_stride_OP2))
        !denom(elx(4),ely(4),elx(1),ely(1))
        IF (w3.LT.zcut_OP2) THEN
          res(2)=(0.5_rlk*(OP2_SOA(elx,2, elements_stride_OP2)+OP2_SOA(elx,3, elements_stride_OP2)) &
    &           -OP2_SOA(elx,4, elements_stride_OP2))*(0.5_rlk*(OP2_SOA(elx,2, elements_stride_OP2)+OP2_SOA(elx,3, elements_stride_OP2))-OP2_SOA(elx,4, elements_stride_OP2))+ &
    &         (0.5_rlk*(OP2_SOA(ely,2, elements_stride_OP2)+OP2_SOA(ely,3, elements_stride_OP2))-OP2_SOA(ely,4, elements_stride_OP2))* &
    &         (0.5_rlk*(OP2_SOA(ely,2, elements_stride_OP2)+OP2_SOA(ely,3, elements_stride_OP2))-OP2_SOA(ely,4, elements_stride_OP2))
          !distpp(elx(2),ely(2),elx(3),ely(3),elx(4),ely(4))
        ELSE
          res(2)= 0.5_rlk*(OP2_SOA(ely,4, elements_stride_OP2)-OP2_SOA(ely,1, elements_stride_OP2))* &
    &             (OP2_SOA(elx,2, elements_stride_OP2)+OP2_SOA(elx,3, elements_stride_OP2))+0.5_rlk* &
    &             (OP2_SOA(ely,2, elements_stride_OP2)+OP2_SOA(ely,3, elements_stride_OP2))*(OP2_SOA(elx,1, elements_stride_OP2)-OP2_SOA(elx,4, elements_stride_OP2))+ &
    &              OP2_SOA(ely,1, elements_stride_OP2)*OP2_SOA(elx,4, elements_stride_OP2)-OP2_SOA(ely,4, elements_stride_OP2)*OP2_SOA(elx,1, elements_stride_OP2)
          res(2) = res(2)*res(2)/w3
    !      distpl(elx(2),ely(2),elx(3),ely(3),elx(4),ely(4),elx(1),   &
    !&                   ely(1))/w3
        ENDIF
        w3=(OP2_SOA(ely,1, elements_stride_OP2)-OP2_SOA(ely,2, elements_stride_OP2))* &
    &      (OP2_SOA(ely,1, elements_stride_OP2)-OP2_SOA(ely,2, elements_stride_OP2))+ &
    &      (OP2_SOA(elx,1, elements_stride_OP2)-OP2_SOA(elx,2, elements_stride_OP2))* &
    &      (OP2_SOA(elx,1, elements_stride_OP2)-OP2_SOA(elx,2, elements_stride_OP2))
        !denom(elx(1),ely(1),elx(2),ely(2))
        IF (w3.LT.zcut_OP2) THEN
          res(3)=(0.5_rlk*(OP2_SOA(elx,3, elements_stride_OP2)+OP2_SOA(elx,4, elements_stride_OP2)) &
    &           -OP2_SOA(elx,1, elements_stride_OP2))*(0.5_rlk*(OP2_SOA(elx,3, elements_stride_OP2)+OP2_SOA(elx,4, elements_stride_OP2))-OP2_SOA(elx,1, elements_stride_OP2))+ &
    &         (0.5_rlk*(OP2_SOA(ely,3, elements_stride_OP2)+OP2_SOA(ely,4, elements_stride_OP2))-OP2_SOA(ely,1, elements_stride_OP2))* &
    &         (0.5_rlk*(OP2_SOA(ely,3, elements_stride_OP2)+OP2_SOA(ely,4, elements_stride_OP2))-OP2_SOA(ely,1, elements_stride_OP2))
          !distpp(elx(3),ely(3),elx(4),ely(4),elx(1),ely(1))
        ELSE
          res(3)= 0.5_rlk*(OP2_SOA(ely,1, elements_stride_OP2)-OP2_SOA(ely,2, elements_stride_OP2))* &
    &             (OP2_SOA(elx,3, elements_stride_OP2)+OP2_SOA(elx,4, elements_stride_OP2))+0.5_rlk* &
    &             (OP2_SOA(ely,3, elements_stride_OP2)+OP2_SOA(ely,4, elements_stride_OP2))*(OP2_SOA(elx,2, elements_stride_OP2)-OP2_SOA(elx,1, elements_stride_OP2))+ &
    &              OP2_SOA(ely,2, elements_stride_OP2)*OP2_SOA(elx,1, elements_stride_OP2)-OP2_SOA(ely,1, elements_stride_OP2)*OP2_SOA(elx,2, elements_stride_OP2)
          res(3) = res(3)*res(3)/w3
    !      distpl(elx(3),ely(3),elx(4),ely(4),elx(1),ely(1),elx(2),   &
    !&                   ely(2))/w3
        ENDIF
        w3=(OP2_SOA(ely,2, elements_stride_OP2)-OP2_SOA(ely,3, elements_stride_OP2))* &
    &      (OP2_SOA(ely,2, elements_stride_OP2)-OP2_SOA(ely,3, elements_stride_OP2))+ &
    &      (OP2_SOA(elx,2, elements_stride_OP2)-OP2_SOA(elx,3, elements_stride_OP2))* &
    &      (OP2_SOA(elx,2, elements_stride_OP2)-OP2_SOA(elx,3, elements_stride_OP2))
        !denom(elx(2),ely(2),elx(3),ely(3))
        IF (w3.LT.zcut_OP2) THEN
          res(4)=(0.5_rlk*(OP2_SOA(elx,4, elements_stride_OP2)+OP2_SOA(elx,1, elements_stride_OP2)) &
    &           -OP2_SOA(elx,2, elements_stride_OP2))*(0.5_rlk*(OP2_SOA(elx,4, elements_stride_OP2)+OP2_SOA(elx,1, elements_stride_OP2))-OP2_SOA(elx,2, elements_stride_OP2))+ &
    &         (0.5_rlk*(OP2_SOA(ely,4, elements_stride_OP2)+OP2_SOA(ely,1, elements_stride_OP2))-OP2_SOA(ely,2, elements_stride_OP2))* &
    &         (0.5_rlk*(OP2_SOA(ely,4, elements_stride_OP2)+OP2_SOA(ely,1, elements_stride_OP2))-OP2_SOA(ely,2, elements_stride_OP2))
          !distpp(elx(4),ely(4),elx(1),ely(1),elx(2),ely(2))
        ELSE
          res(4)=0.5_rlk*(OP2_SOA(ely,2, elements_stride_OP2)-OP2_SOA(ely,3, elements_stride_OP2))*( &
    &             OP2_SOA(elx,4, elements_stride_OP2)+OP2_SOA(elx,1, elements_stride_OP2))+0.5_rlk*( &
    &             OP2_SOA(ely,4, elements_stride_OP2)+OP2_SOA(ely,1, elements_stride_OP2))*(OP2_SOA(elx,3, elements_stride_OP2)-OP2_SOA(elx,2, elements_stride_OP2))+ &
    &             OP2_SOA(ely,3, elements_stride_OP2)*OP2_SOA(elx,2, elements_stride_OP2)-OP2_SOA(ely,2, elements_stride_OP2)*OP2_SOA(elx,3, elements_stride_OP2)
          res(4) = res(4)*res(4)/w3
    !      distpl(elx(4),ely(4),elx(1),ely(1),elx(2),ely(2),elx(3),   &
    !&                   ely(3))/w3
        ENDIF
        w1=MIN(res(1),res(2),res(3),res(4))
      ENDIF
      rscratch11=w1/w2
    ENDIF

  END SUBROUTINE getdt_cfl_gpu


! CUDA kernel function
attributes (global) SUBROUTINE op_cuda_getdt_cfl( &
  &  soa_stride,      &
  & opDat7Devicegetdt_cfl, &
  & opDat8Devicegetdt_cfl, &
  & opDat7Map, &
  & opDat1Devicegetdt_cfl, &
  & opDat2Devicegetdt_cfl, &
  & opDat3Devicegetdt_cfl, &
  & opDat4Devicegetdt_cfl, &
  & opDat5Devicegetdt_cfl, &
  & opDat6Devicegetdt_cfl, &
  & pblkMap, &
  & poffset, &
  & pnelems, &
  & pnthrcol, &
  & pthrcol, &
  & setSize, &
  & blockOffset)

  IMPLICIT NONE

! local variables
  integer(4), DEVICE :: opDat7Devicegetdt_cfl(*)
  integer(4), DEVICE :: opDat8Devicegetdt_cfl(*)
  INTEGER(kind=4), DEVICE, INTENT(IN) :: opDat7Map(*)
  real(8), DEVICE :: opDat1Devicegetdt_cfl(*)
  real(8), DEVICE, INTENT(IN) :: opDat2Devicegetdt_cfl(*)
  real(8), DEVICE, INTENT(IN) :: opDat3Devicegetdt_cfl(*)
  real(8), DEVICE, INTENT(IN) :: opDat4Devicegetdt_cfl(*)
  real(8), DEVICE, INTENT(IN) :: opDat5Devicegetdt_cfl(*)
  real(8), DEVICE, INTENT(IN) :: opDat6Devicegetdt_cfl(*)

  INTEGER(kind=4) map7idx

  INTEGER(kind=4), VALUE :: soa_stride
  INTEGER(kind=4), DIMENSION(0:*), DEVICE :: pblkMap
  INTEGER(kind=4), DIMENSION(0:*), DEVICE :: poffset
  INTEGER(kind=4), DIMENSION(0:*), DEVICE :: pnelems
  INTEGER(kind=4), DIMENSION(0:*), DEVICE :: pnthrcol
  INTEGER(kind=4), DIMENSION(0:*), DEVICE, INTENT(IN) :: pthrcol
  INTEGER(kind=4), VALUE :: blockOffset
  INTEGER(kind=4), VALUE :: setSize


  INTEGER(kind=4), SHARED :: numOfColours
  INTEGER(kind=4), SHARED :: numberOfActiveThreadsCeiling
  INTEGER(kind=4), SHARED :: blockID
  INTEGER(kind=4), SHARED :: threadBlockOffset
  INTEGER(kind=4), SHARED :: numberOfActiveThreads
  INTEGER(kind=4) :: colour1
  INTEGER(kind=4) :: colour2
  INTEGER(kind=4) :: n1
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: i2
  INTEGER(kind=4) :: i3


  IF (threadIdx%x - 1 .EQ. 0) THEN
    blockID = pblkMap(blockIdx%x - 1 + blockOffset)
    numberOfActiveThreads = pnelems(blockID)
    numberOfActiveThreadsCeiling = blockDim%x * (1 + (numberOfActiveThreads - 1) / blockDim%x)
    numOfColours = pnthrcol(blockID)
    threadBlockOffset = poffset(blockID)

  END IF

  CALL syncthreads()

  i1 = threadIdx%x - 1

  DO WHILE (i1 < numberOfActiveThreadsCeiling )
    IF (i1 < numberOfActiveThreads) THEN
      i3 = i1
      map7idx = opDat7Map(1 + i3 + threadBlockOffset + setSize * 0)

! kernel call
      CALL getdt_cfl_gpu( &
      & opDat1Devicegetdt_cfl((i3 + threadBlockOffset) * (1) +1), &
      & opDat2Devicegetdt_cfl((i3 + threadBlockOffset) * (1) +1), &
      & opDat3Devicegetdt_cfl((i3 + threadBlockOffset) * (1) +1), &
      & opDat4Devicegetdt_cfl((i3 + threadBlockOffset) * (1) +1), &
      & opDat5Devicegetdt_cfl(1 + (i3 + threadBlockOffset)), &
      & opDat6Devicegetdt_cfl(1 + (i3 + threadBlockOffset)), &
      & opDat7Devicegetdt_cfl(1 + map7idx), &
      & opDat8Devicegetdt_cfl(1 + map7idx) &
      & )

    END IF
    i1 = i1 + blockDim%x
  END DO



END SUBROUTINE

attributes (host) SUBROUTINE getdt_cfl_host( userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4, &
  & opArg5, &
  & opArg6, &
  & opArg7, &
  & opArg8 )

  IMPLICIT NONE
  character(len=9), INTENT(IN) :: userSubroutine
  TYPE ( op_set ) , INTENT(IN) :: set

  TYPE ( op_arg ) , INTENT(IN) :: opArg1
  TYPE ( op_arg ) , INTENT(IN) :: opArg2
  TYPE ( op_arg ) , INTENT(IN) :: opArg3
  TYPE ( op_arg ) , INTENT(IN) :: opArg4
  TYPE ( op_arg ) , INTENT(IN) :: opArg5
  TYPE ( op_arg ) , INTENT(IN) :: opArg6
  TYPE ( op_arg ) , INTENT(IN) :: opArg7
  TYPE ( op_arg ) , INTENT(IN) :: opArg8

  IF (getHybridGPU()) THEN
    CALL getdt_cfl_host_gpu( userSubroutine, set, &
    & opArg1, &
    & opArg2, &
    & opArg3, &
    & opArg4, &
    & opArg5, &
    & opArg6, &
    & opArg7, &
    & opArg8 )
  ELSE
    CALL getdt_cfl_host_cpu( userSubroutine, set, &
    & opArg1, &
    & opArg2, &
    & opArg3, &
    & opArg4, &
    & opArg5, &
    & opArg6, &
    & opArg7, &
    & opArg8 )
  END IF
END SUBROUTINE


! Stub for GPU execution

attributes (host) SUBROUTINE getdt_cfl_host_gpu( userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4, &
  & opArg5, &
  & opArg6, &
  & opArg7, &
  & opArg8 )

  IMPLICIT NONE
  character(len=9), INTENT(IN) :: userSubroutine
  TYPE ( op_set ) , INTENT(IN) :: set

  TYPE ( op_arg ) , INTENT(IN) :: opArg1
  TYPE ( op_arg ) , INTENT(IN) :: opArg2
  TYPE ( op_arg ) , INTENT(IN) :: opArg3
  TYPE ( op_arg ) , INTENT(IN) :: opArg4
  TYPE ( op_arg ) , INTENT(IN) :: opArg5
  TYPE ( op_arg ) , INTENT(IN) :: opArg6
  TYPE ( op_arg ) , INTENT(IN) :: opArg7
  TYPE ( op_arg ) , INTENT(IN) :: opArg8

  TYPE ( op_arg ) , DIMENSION(8) :: opArgArray
  INTEGER(kind=4) :: numberOfOpDats
  INTEGER(kind=4) :: n_upper
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayStart
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayEnd
  REAL(kind=8) :: startTime
  REAL(kind=8) :: endTime
  INTEGER(kind=4) :: returnSetKernelTiming


  integer(4), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat7Devicegetdt_cfl
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: opMap7Devicegetdt_cfl
  integer(4), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat8Devicegetdt_cfl
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: opMap8Devicegetdt_cfl
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat1Devicegetdt_cfl
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat2Devicegetdt_cfl
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat3Devicegetdt_cfl
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat4Devicegetdt_cfl
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat5Devicegetdt_cfl
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat6Devicegetdt_cfl

  INTEGER(kind=4) :: opDat7Cardinality
  INTEGER(kind=4) :: opMap7Cardinality
  INTEGER(kind=4) :: opDat8Cardinality
  INTEGER(kind=4) :: opMap8Cardinality
  INTEGER(kind=4) :: opDat1Cardinality
  INTEGER(kind=4) :: opDat2Cardinality
  INTEGER(kind=4) :: opDat3Cardinality
  INTEGER(kind=4) :: opDat4Cardinality
  INTEGER(kind=4) :: opDat5Cardinality
  INTEGER(kind=4) :: opDat6Cardinality

  TYPE ( op_plan ) , POINTER :: actualPlan_getdt_cfl

  INTEGER(kind=4) :: blocksPerGrid
  INTEGER(kind=4) :: threadsPerBlock
  INTEGER(kind=4) :: dynamicSharedMemorySize
  INTEGER(kind=4) :: threadSynchRet
  INTEGER(kind=4), DIMENSION(1:8) :: opDatArray
  INTEGER(kind=4), DIMENSION(1:8) :: mappingIndicesArray
  INTEGER(kind=4), DIMENSION(1:8) :: mappingArray
  INTEGER(kind=4), DIMENSION(1:8) :: accessDescriptorArray
  INTEGER(kind=4), DIMENSION(1:8) :: indirectionDescriptorArray

  INTEGER(kind=4) :: mappingArray7Size
  INTEGER(kind=4) :: mappingArray8Size

  INTEGER(kind=4) :: numberOfIndirectOpDats
  INTEGER(kind=4) :: blockOffset
  INTEGER(kind=4) :: pblkMapSize
  INTEGER(kind=4) :: poffsetSize
  INTEGER(kind=4) :: pnelemsSize
  INTEGER(kind=4) :: pnthrcolSize
  INTEGER(kind=4) :: pthrcolSize
  INTEGER(kind=4), POINTER, DIMENSION(:) :: ncolblk
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: pblkMap
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: poffset
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: pnelems
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: pnthrcol
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: pthrcol
  INTEGER(kind=4) :: partitionSize
  INTEGER(kind=4) :: blockSize
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: i2
  INTEGER(kind=4), SAVE :: calledTimes

  INTEGER(kind=4) :: istat

  numberOfOpDats = 8

  opArgArray(1) = opArg1
  opArgArray(2) = opArg2
  opArgArray(3) = opArg3
  opArgArray(4) = opArg4
  opArgArray(5) = opArg5
  opArgArray(6) = opArg6
  opArgArray(7) = opArg7
  opArgArray(8) = opArg8

  returnSetKernelTiming = setKernelTime(6 , userSubroutine//C_NULL_CHAR, &
  & 0.d0, 0.00000,0.00000, 0)
  call op_timers_core(startTime)

  n_upper = op_mpi_halo_exchanges_cuda(set%setCPtr,numberOfOpDats,opArgArray)

  indirectionDescriptorArray(1) = -1
  indirectionDescriptorArray(2) = -1
  indirectionDescriptorArray(3) = -1
  indirectionDescriptorArray(4) = -1
  indirectionDescriptorArray(5) = -1
  indirectionDescriptorArray(6) = -1
  indirectionDescriptorArray(7) = 0
  indirectionDescriptorArray(8) = 1

  numberOfIndirectOpDats = 2

  partitionSize = getPartitionSize(userSubroutine//C_NULL_CHAR,set%setPtr%size)

  planRet_getdt_cfl = FortranPlanCaller( &
  & userSubroutine//C_NULL_CHAR, &
  & set%setCPtr, &
  & partitionSize, &
  & numberOfOpDats, &
  & opArgArray, &
  & numberOfIndirectOpDats, &
  & indirectionDescriptorArray,2)

  opDat7Cardinality = opArg7%dim * getSetSizeFromOpArg(opArg7)
  opMap7Cardinality = set%setPtr%size * getMapDimFromOpArg(opArg7)
  opDat8Cardinality = opArg8%dim * getSetSizeFromOpArg(opArg8)
  opMap8Cardinality = set%setPtr%size * getMapDimFromOpArg(opArg8)
  opDat1Cardinality = opArg1%dim * getSetSizeFromOpArg(opArg1)
  opDat2Cardinality = opArg2%dim * getSetSizeFromOpArg(opArg2)
  opDat3Cardinality = opArg3%dim * getSetSizeFromOpArg(opArg3)
  opDat4Cardinality = opArg4%dim * getSetSizeFromOpArg(opArg4)
  opDat5Cardinality = opArg5%dim * getSetSizeFromOpArg(opArg5)
  opDat6Cardinality = opArg6%dim * getSetSizeFromOpArg(opArg6)


  CALL c_f_pointer(opArg7%data_d,opDat7Devicegetdt_cfl,(/opDat7Cardinality/))
  CALL c_f_pointer(opArg7%map_data_d,opMap7Devicegetdt_cfl,(/opMap7Cardinality/))
  CALL c_f_pointer(opArg8%data_d,opDat8Devicegetdt_cfl,(/opDat8Cardinality/))
  CALL c_f_pointer(opArg8%map_data_d,opMap8Devicegetdt_cfl,(/opMap8Cardinality/))
  CALL c_f_pointer(opArg1%data_d,opDat1Devicegetdt_cfl,(/opDat1Cardinality/))
  CALL c_f_pointer(opArg2%data_d,opDat2Devicegetdt_cfl,(/opDat2Cardinality/))
  CALL c_f_pointer(opArg3%data_d,opDat3Devicegetdt_cfl,(/opDat3Cardinality/))
  CALL c_f_pointer(opArg4%data_d,opDat4Devicegetdt_cfl,(/opDat4Cardinality/))
  CALL c_f_pointer(opArg5%data_d,opDat5Devicegetdt_cfl,(/opDat5Cardinality/))
  CALL c_f_pointer(opArg6%data_d,opDat6Devicegetdt_cfl,(/opDat6Cardinality/))

  CALL c_f_pointer(planRet_getdt_cfl,actualPlan_getdt_cfl)
  CALL c_f_pointer(actualPlan_getdt_cfl%ncolblk,ncolblk,(/set%setPtr%size/))
  pblkMapSize = actualPlan_getdt_cfl%nblocks
  CALL c_f_pointer(actualPlan_getdt_cfl%blkmap_d,pblkMap,(/pblkMapSize/))
  poffsetSize = actualPlan_getdt_cfl%nblocks
  CALL c_f_pointer(actualPlan_getdt_cfl%offset_d,poffset,(/poffsetSize/))
  pnelemsSize = actualPlan_getdt_cfl%nblocks
  CALL c_f_pointer(actualPlan_getdt_cfl%nelems_d,pnelems,(/pnelemsSize/))
  pnthrcolSize = actualPlan_getdt_cfl%nblocks
  CALL c_f_pointer(actualPlan_getdt_cfl%nthrcol,pnthrcol,(/pnthrcolSize/))
  pthrcolSize = set%setPtr%size
  CALL c_f_pointer(actualPlan_getdt_cfl%thrcol,pthrcol,(/pthrcolSize/))


  blockOffset = 0

  threadsPerBlock = getBlockSize(userSubroutine//C_NULL_CHAR,set%setPtr%size)
  DO i2 = 0, actualPlan_getdt_cfl%ncolors - 1, 1
    IF (i2 .EQ. actualPlan_getdt_cfl%ncolors_core) THEN
      CALL op_mpi_wait_all_cuda(numberOfOpDats,opArgArray)
    END IF

    blocksPerGrid = ncolblk(i2 + 1)
    dynamicSharedMemorySize = reductionSize(opArgArray,numberOfOpDats) * threadsPerBlock

    CALL op_cuda_getdt_cfl <<<blocksPerGrid,threadsPerBlock,dynamicSharedMemorySize>>> (&
    & getSetSizeFromOpArg(opArg5), &
    & opDat7Devicegetdt_cfl, &
    & opDat8Devicegetdt_cfl, &
    & opMap7Devicegetdt_cfl, &
    & opDat1Devicegetdt_cfl, &
    & opDat2Devicegetdt_cfl, &
    & opDat3Devicegetdt_cfl, &
    & opDat4Devicegetdt_cfl, &
    & opDat5Devicegetdt_cfl, &
    & opDat6Devicegetdt_cfl, &
    & pblkMap, &
    & poffset,pnelems,pnthrcol,pthrcol, &
    & set%setPtr%size+set%setPtr%exec_size, blockOffset)

    blockOffset = blockOffset + blocksPerGrid
  END DO


  IF ((n_upper .EQ. 0) .OR. (n_upper .EQ. set%setPtr%core_size)) THEN
    CALL op_mpi_wait_all_cuda(numberOfOpDats,opArgArray)
  END IF


  CALL op_mpi_set_dirtybit_cuda(numberOfOpDats,opArgArray)

  istat = cudaDeviceSynchronize()
  call op_timers_core(endTime)

  returnSetKernelTiming = setKernelTime(6 , userSubroutine//C_NULL_CHAR, &
  & endTime-startTime, actualPlan_getdt_cfl%transfer,actualPlan_getdt_cfl%transfer2, 1)
  calledTimes = calledTimes + 1
END SUBROUTINE


! Stub for CPU execution

SUBROUTINE op_wrap_getdt_cfl( &
  & opDat7Local, &
  & opDat8Local, &
  & opDat1Local, &
  & opDat2Local, &
  & opDat3Local, &
  & opDat4Local, &
  & opDat5Local, &
  & opDat6Local, &
  & opDat7Map, &
  & opDat7MapDim, &
  & bottom,top)
  integer(4) opDat7Local(1,*)
  integer(4) opDat8Local(1,*)
  real(8) opDat1Local(1,*)
  real(8) opDat2Local(1,*)
  real(8) opDat3Local(1,*)
  real(8) opDat4Local(1,*)
  real(8) opDat5Local(4,*)
  real(8) opDat6Local(4,*)
  INTEGER(kind=4) opDat7Map(*)
  INTEGER(kind=4) opDat7MapDim
  INTEGER(kind=4) bottom,top,i1
  INTEGER(kind=4) map7idx

  DO i1 = bottom, top - 1, 1
    map7idx = opDat7Map(1 + i1 * opDat7MapDim + 0)+1
! kernel call
  CALL getdt_cfl( &
    & opDat1Local(1,i1+1), &
    & opDat2Local(1,i1+1), &
    & opDat3Local(1,i1+1), &
    & opDat4Local(1,i1+1), &
    & opDat5Local(1,i1+1), &
    & opDat6Local(1,i1+1), &
    & opDat7Local(1,map7idx), &
    & opDat8Local(1,map7idx) &
    & )
  END DO
END SUBROUTINE
SUBROUTINE getdt_cfl_host_cpu( userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4, &
  & opArg5, &
  & opArg6, &
  & opArg7, &
  & opArg8 )

  IMPLICIT NONE
  character(kind=c_char,len=*), INTENT(IN) :: userSubroutine
  type ( op_set ) , INTENT(IN) :: set

  type ( op_arg ) , INTENT(IN) :: opArg1
  type ( op_arg ) , INTENT(IN) :: opArg2
  type ( op_arg ) , INTENT(IN) :: opArg3
  type ( op_arg ) , INTENT(IN) :: opArg4
  type ( op_arg ) , INTENT(IN) :: opArg5
  type ( op_arg ) , INTENT(IN) :: opArg6
  type ( op_arg ) , INTENT(IN) :: opArg7
  type ( op_arg ) , INTENT(IN) :: opArg8

  type ( op_arg ) , DIMENSION(8) :: opArgArray
  INTEGER(kind=4) :: numberOfOpDats
  INTEGER(kind=4) :: n_upper
  type ( op_set_core ) , POINTER :: opSetCore

  INTEGER(kind=4), POINTER, DIMENSION(:) :: opDat7Map
  INTEGER(kind=4) :: opDat7MapDim
  integer(4), POINTER, DIMENSION(:) :: opDat7Local
  INTEGER(kind=4) :: opDat7Cardinality

  INTEGER(kind=4), POINTER, DIMENSION(:) :: opDat8Map
  INTEGER(kind=4) :: opDat8MapDim
  integer(4), POINTER, DIMENSION(:) :: opDat8Local
  INTEGER(kind=4) :: opDat8Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat1Local
  INTEGER(kind=4) :: opDat1Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat2Local
  INTEGER(kind=4) :: opDat2Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat3Local
  INTEGER(kind=4) :: opDat3Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat4Local
  INTEGER(kind=4) :: opDat4Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat5Local
  INTEGER(kind=4) :: opDat5Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat6Local
  INTEGER(kind=4) :: opDat6Cardinality

  INTEGER(kind=4) :: threadID
  INTEGER(kind=4) :: numberOfThreads
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayStart
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayEnd
  REAL(kind=8) :: startTime
  REAL(kind=8) :: endTime
  INTEGER(kind=4) :: returnSetKernelTiming
  LOGICAL :: firstTime_getdt_cfl = .TRUE.
  type ( c_ptr )  :: planRet_getdt_cfl
  type ( op_plan ) , POINTER :: actualPlan_getdt_cfl
  INTEGER(kind=4), POINTER, DIMENSION(:) :: ncolblk_getdt_cfl
  INTEGER(kind=4), POINTER, DIMENSION(:) :: blkmap_getdt_cfl
  INTEGER(kind=4), POINTER, DIMENSION(:) :: nelems_getdt_cfl
  INTEGER(kind=4), POINTER, DIMENSION(:) :: offset_getdt_cfl
  INTEGER(kind=4), DIMENSION(1:8) :: indirectionDescriptorArray
  INTEGER(kind=4) :: numberOfIndirectOpDats
  INTEGER(kind=4) :: blockOffset
  INTEGER(kind=4) :: nblocks
  INTEGER(kind=4) :: partitionSize
  INTEGER(kind=4) :: blockID
  INTEGER(kind=4) :: nelem
  INTEGER(kind=4) :: offset_b


  INTEGER(kind=4) :: i1,i2,n

  numberOfOpDats = 8

  opArgArray(1) = opArg1
  opArgArray(2) = opArg2
  opArgArray(3) = opArg3
  opArgArray(4) = opArg4
  opArgArray(5) = opArg5
  opArgArray(6) = opArg6
  opArgArray(7) = opArg7
  opArgArray(8) = opArg8

  returnSetKernelTiming = setKernelTime(6 , userSubroutine//C_NULL_CHAR, &
  & 0.d0, 0.00000,0.00000, 0)
  call op_timers_core(startTime)

  n_upper = op_mpi_halo_exchanges(set%setCPtr,numberOfOpDats,opArgArray)

#ifdef OP_PART_SIZE_1
  partitionSize = OP_PART_SIZE_1
#else
  partitionSize = 0
#endif

#ifdef _OPENMP
  numberOfThreads = omp_get_max_threads()
#else
  numberOfThreads = 1
#endif
    indirectionDescriptorArray(1) = -1
    indirectionDescriptorArray(2) = -1
    indirectionDescriptorArray(3) = -1
    indirectionDescriptorArray(4) = -1
    indirectionDescriptorArray(5) = -1
    indirectionDescriptorArray(6) = -1
    indirectionDescriptorArray(7) = 0
    indirectionDescriptorArray(8) = 1

    numberOfIndirectOpDats = 2

    planRet_getdt_cfl = FortranPlanCaller( &
    & userSubroutine//C_NULL_CHAR, &
    & set%setCPtr, &
    & partitionSize, &
    & numberOfOpDats, &
    & opArgArray, &
    & numberOfIndirectOpDats, &
    & indirectionDescriptorArray,2)

    CALL c_f_pointer(planRet_getdt_cfl,actualPlan_getdt_cfl)
    CALL c_f_pointer(actualPlan_getdt_cfl%ncolblk,ncolblk_getdt_cfl,(/actualPlan_getdt_cfl%ncolors_core/))
    CALL c_f_pointer(actualPlan_getdt_cfl%blkmap,blkmap_getdt_cfl,(/actualPlan_getdt_cfl%nblocks/))
    CALL c_f_pointer(actualPlan_getdt_cfl%offset,offset_getdt_cfl,(/actualPlan_getdt_cfl%nblocks/))
    CALL c_f_pointer(actualPlan_getdt_cfl%nelems,nelems_getdt_cfl,(/actualPlan_getdt_cfl%nblocks/))

    opSetCore => set%setPtr

    opDat7Cardinality = opArg7%dim * getSetSizeFromOpArg(opArg7)
    opDat7MapDim = getMapDimFromOpArg(opArg7)
    opDat8Cardinality = opArg8%dim * getSetSizeFromOpArg(opArg8)
    opDat8MapDim = getMapDimFromOpArg(opArg8)
    opDat1Cardinality = opArg1%dim * getSetSizeFromOpArg(opArg1)
    opDat2Cardinality = opArg2%dim * getSetSizeFromOpArg(opArg2)
    opDat3Cardinality = opArg3%dim * getSetSizeFromOpArg(opArg3)
    opDat4Cardinality = opArg4%dim * getSetSizeFromOpArg(opArg4)
    opDat5Cardinality = opArg5%dim * getSetSizeFromOpArg(opArg5)
    opDat6Cardinality = opArg6%dim * getSetSizeFromOpArg(opArg6)
    CALL c_f_pointer(opArg7%data,opDat7Local,(/opDat7Cardinality/))
    CALL c_f_pointer(opArg7%map_data,opDat7Map,(/opSetCore%size*opDat7MapDim/))
    CALL c_f_pointer(opArg8%data,opDat8Local,(/opDat8Cardinality/))
    CALL c_f_pointer(opArg8%map_data,opDat8Map,(/opSetCore%size*opDat8MapDim/))
    CALL c_f_pointer(opArg1%data,opDat1Local,(/opDat1Cardinality/))
    CALL c_f_pointer(opArg2%data,opDat2Local,(/opDat2Cardinality/))
    CALL c_f_pointer(opArg3%data,opDat3Local,(/opDat3Cardinality/))
    CALL c_f_pointer(opArg4%data,opDat4Local,(/opDat4Cardinality/))
    CALL c_f_pointer(opArg5%data,opDat5Local,(/opDat5Cardinality/))
    CALL c_f_pointer(opArg6%data,opDat6Local,(/opDat6Cardinality/))


    blockOffset = 0

    DO i1 = 0, actualPlan_getdt_cfl%ncolors - 1, 1
      IF (i1 .EQ. actualPlan_getdt_cfl%ncolors_core) THEN
        CALL op_mpi_wait_all(numberOfOpDats,opArgArray)
      END IF

      nblocks = ncolblk_getdt_cfl(i1 + 1)
      !$OMP PARALLEL DO private (threadID, blockID, nelem, offset_b)
      DO i2 = 0, nblocks - 1, 1
        threadID = omp_get_thread_num()
        blockID = blkmap_getdt_cfl(i2+blockOffset+1)
        nelem = nelems_getdt_cfl(blockID+1)
        offset_b = offset_getdt_cfl(blockID+1)
        CALL op_wrap_getdt_cfl( &
        & opDat7Local, &
        & opDat8Local, &
        & opDat1Local, &
        & opDat2Local, &
        & opDat3Local, &
        & opDat4Local, &
        & opDat5Local, &
        & opDat6Local, &
        & opDat7Map, &
        & opDat7MapDim, &
        & offset_b, offset_b+nelem)
      END DO
      !$OMP END PARALLEL DO
      blockOffset = blockOffset + nblocks
    END DO
    IF ((n_upper .EQ. 0) .OR. (n_upper .EQ. opSetCore%core_size)) THEN
      CALL op_mpi_wait_all(numberOfOpDats,opArgArray)
    END IF

    CALL op_mpi_set_dirtybit(numberOfOpDats,opArgArray)

    call op_timers_core(endTime)

    returnSetKernelTiming = setKernelTime(6 , userSubroutine//C_NULL_CHAR, &
    & endTime-startTime, actualPlan_getdt_cfl%transfer,actualPlan_getdt_cfl%transfer2, 1)
  END SUBROUTINE
  END MODULE
