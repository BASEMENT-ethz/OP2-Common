!
! auto-generated by op2.py on 2015-01-26 22:23
!

MODULE INIT_SUBZ_PM_MODULE
USE OP2_CONSTANTS
USE kinds_mod,    ONLY: ink,rlk
USE parameters_mod,ONLY: LI
USE OP2_FORTRAN_DECLARATIONS
USE OP2_FORTRAN_RT_SUPPORT
USE ISO_C_BINDING
USE CUDAFOR
USE CUDACONFIGURATIONPARAMS


#ifdef _OPENMP
  USE OMP_LIB
#endif

! init_subz_pmvariable declarations



#define OP2_SOA(var,dim,stride) var((dim-1)*stride+1)

CONTAINS

!DEC$ ATTRIBUTES FORCEINLINE :: init_subz_pm
attributes (host) subroutine init_subz_pm(elx,ely,rho,spmass)

    USE kinds_mod,ONLY: rlk,ink
    USE parameters_mod,ONLY: N_SHAPE

    implicit none

    REAL(KIND=rlk), DIMENSION(N_SHAPE), INTENT(OUT) :: spmass
    REAL(KIND=rlk), INTENT(IN) :: rho
    REAL(KIND=rlk), DIMENSION(N_SHAPE), INTENT(IN) :: elx,ely

    REAL(KIND=rlk) :: x1,x2,x3,x4,y1,y2,y3,y4,w1,w2,w3,w4
    INTEGER(KIND=ink) :: j1,j2

    x3=0.25_rlk*(elx(1)+elx(2)+elx(3)+elx(4))
    y3=0.25_rlk*(ely(1)+ely(2)+ely(3)+ely(4))
    DO j1=1,N_SHAPE
      x1=elx(j1)
      y1=ely(j1)
      j2=MOD(j1,N_SHAPE)+1_ink
      x2=0.5_rlk*(x1+elx(j2))
      y2=0.5_rlk*(y1+ely(j2))
      j2=MOD(j1+2,N_SHAPE)+1_ink
      x4=0.5_rlk*(x1+elx(j2))
      y4=0.5_rlk*(y1+ely(j2))
      !# Axi-symmetric alternative
      w1=0.25_rlk*(-x1+x2+x3-x4)
      w2=0.25_rlk*(-x1-x2+x3+x4)
      w3=0.25_rlk*(-y1+y2+y3-y4)
      w4=0.25_rlk*(-y1-y2+y3+y4)
      spmass(j1)=4.0_rlk*rho*(w1*w4-w2*w3)
    ENDDO


  END SUBROUTINE init_subz_pm

attributes (device) subroutine init_subz_pm_gpu(elx,ely,rho,spmass)

    USE kinds_mod,ONLY: rlk,ink
    USE parameters_mod,ONLY: N_SHAPE

    implicit none

    REAL(KIND=rlk), DIMENSION(N_SHAPE), INTENT(OUT) :: spmass
    REAL(KIND=rlk), INTENT(IN) :: rho
    REAL(KIND=rlk), DIMENSION(N_SHAPE), INTENT(IN) :: elx,ely

    REAL(KIND=rlk) :: x1,x2,x3,x4,y1,y2,y3,y4,w1,w2,w3,w4
    INTEGER(KIND=ink) :: j1,j2

    x3=0.25_rlk*(OP2_SOA(elx,1, elements_stride_OP2)+OP2_SOA(elx,2, elements_stride_OP2)+OP2_SOA(elx,3, elements_stride_OP2)+OP2_SOA(elx,4, elements_stride_OP2))
    y3=0.25_rlk*(OP2_SOA(ely,1, elements_stride_OP2)+OP2_SOA(ely,2, elements_stride_OP2)+OP2_SOA(ely,3, elements_stride_OP2)+OP2_SOA(ely,4, elements_stride_OP2))
    DO j1=1,N_SHAPE
      x1=OP2_SOA(elx,j1, elements_stride_OP2)
      y1=OP2_SOA(ely,j1, elements_stride_OP2)
      j2=MOD(j1,N_SHAPE)+1_ink
      x2=0.5_rlk*(x1+OP2_SOA(elx,j2, elements_stride_OP2))
      y2=0.5_rlk*(y1+OP2_SOA(ely,j2, elements_stride_OP2))
      j2=MOD(j1+2,N_SHAPE)+1_ink
      x4=0.5_rlk*(x1+OP2_SOA(elx,j2, elements_stride_OP2))
      y4=0.5_rlk*(y1+OP2_SOA(ely,j2, elements_stride_OP2))
      !# Axi-symmetric alternative
      w1=0.25_rlk*(-x1+x2+x3-x4)
      w2=0.25_rlk*(-x1-x2+x3+x4)
      w3=0.25_rlk*(-y1+y2+y3-y4)
      w4=0.25_rlk*(-y1-y2+y3+y4)
      OP2_SOA(spmass,j1, elements_stride_OP2)=4.0_rlk*rho*(w1*w4-w2*w3)
    ENDDO


  END SUBROUTINE init_subz_pm_gpu


! CUDA kernel function
attributes (global) SUBROUTINE op_cuda_init_subz_pm( &
  &  soa_stride,      &
  & opDat1Deviceinit_subz_pm, &
  & opDat2Deviceinit_subz_pm, &
  & opDat3Deviceinit_subz_pm, &
  & opDat4Deviceinit_subz_pm, &
  & setSize)

  IMPLICIT NONE

! local variables
  real(8), DEVICE, INTENT(IN) :: opDat1Deviceinit_subz_pm(*)
  real(8), DEVICE, INTENT(IN) :: opDat2Deviceinit_subz_pm(*)
  real(8), DEVICE, INTENT(IN) :: opDat3Deviceinit_subz_pm(*)
  real(8), DEVICE :: opDat4Deviceinit_subz_pm(*)


  INTEGER(kind=4), VALUE :: soa_stride
  INTEGER(kind=4), VALUE :: setSize
  INTEGER(kind=4) :: i1


  DO i1 = threadIdx%x - 1 + (blockIdx%x - 1) * blockDim%x, setSize - 1, blockDim%x * gridDim%x

! kernel call

    CALL init_subz_pm_gpu( &
    & opDat1Deviceinit_subz_pm(1 + i1), &
    & opDat2Deviceinit_subz_pm(1 + i1), &
    & opDat3Deviceinit_subz_pm(i1 + 1), &
    & opDat4Deviceinit_subz_pm(1 + i1) &
    & )
  END DO


END SUBROUTINE

attributes (host) SUBROUTINE init_subz_pm_host( userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4 )

  IMPLICIT NONE
  character(len=12), INTENT(IN) :: userSubroutine
  TYPE ( op_set ) , INTENT(IN) :: set

  TYPE ( op_arg ) , INTENT(IN) :: opArg1
  TYPE ( op_arg ) , INTENT(IN) :: opArg2
  TYPE ( op_arg ) , INTENT(IN) :: opArg3
  TYPE ( op_arg ) , INTENT(IN) :: opArg4

  IF (getHybridGPU()) THEN
    CALL init_subz_pm_host_gpu( userSubroutine, set, &
    & opArg1, &
    & opArg2, &
    & opArg3, &
    & opArg4 )
  ELSE
    CALL init_subz_pm_host_cpu( userSubroutine, set, &
    & opArg1, &
    & opArg2, &
    & opArg3, &
    & opArg4 )
  END IF
END SUBROUTINE


! Stub for GPU execution

attributes (host) SUBROUTINE init_subz_pm_host_gpu( userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4 )

  IMPLICIT NONE
  character(len=12), INTENT(IN) :: userSubroutine
  TYPE ( op_set ) , INTENT(IN) :: set

  TYPE ( op_arg ) , INTENT(IN) :: opArg1
  TYPE ( op_arg ) , INTENT(IN) :: opArg2
  TYPE ( op_arg ) , INTENT(IN) :: opArg3
  TYPE ( op_arg ) , INTENT(IN) :: opArg4

  TYPE ( op_arg ) , DIMENSION(4) :: opArgArray
  INTEGER(kind=4) :: numberOfOpDats
  INTEGER(kind=4) :: n_upper
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayStart
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayEnd
  REAL(kind=8) :: startTime
  REAL(kind=8) :: endTime
  INTEGER(kind=4) :: returnSetKernelTiming


  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat1Deviceinit_subz_pm
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat2Deviceinit_subz_pm
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat3Deviceinit_subz_pm
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat4Deviceinit_subz_pm

  INTEGER(kind=4) :: opDat1Cardinality
  INTEGER(kind=4) :: opDat2Cardinality
  INTEGER(kind=4) :: opDat3Cardinality
  INTEGER(kind=4) :: opDat4Cardinality

  INTEGER(kind=4) :: blocksPerGrid
  INTEGER(kind=4) :: threadsPerBlock
  INTEGER(kind=4) :: dynamicSharedMemorySize
  INTEGER(kind=4) :: threadSynchRet
  INTEGER(kind=4), SAVE :: calledTimes
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: i2
  INTEGER(kind=4) :: i10
  INTEGER(kind=4) :: i20
  REAL(kind=4) :: dataTransfer

  INTEGER(kind=4) :: istat

  numberOfOpDats = 4

  opArgArray(1) = opArg1
  opArgArray(2) = opArg2
  opArgArray(3) = opArg3
  opArgArray(4) = opArg4

  returnSetKernelTiming = setKernelTime(1 , userSubroutine//C_NULL_CHAR, &
  & 0.d0, 0.00000,0.00000, 0)
  call op_timers_core(startTime)

  n_upper = op_mpi_halo_exchanges_cuda(set%setCPtr,numberOfOpDats,opArgArray)


  blocksPerGrid = 600
  threadsPerBlock = getBlockSize(userSubroutine//C_NULL_CHAR,set%setPtr%size)
  dynamicSharedMemorySize = reductionSize(opArgArray,numberOfOpDats) * threadsPerBlock

  opDat1Cardinality = opArg1%dim * getSetSizeFromOpArg(opArg1)
  opDat2Cardinality = opArg2%dim * getSetSizeFromOpArg(opArg2)
  opDat3Cardinality = opArg3%dim * getSetSizeFromOpArg(opArg3)
  opDat4Cardinality = opArg4%dim * getSetSizeFromOpArg(opArg4)


  CALL c_f_pointer(opArg1%data_d,opDat1Deviceinit_subz_pm,(/opDat1Cardinality/))
  CALL c_f_pointer(opArg2%data_d,opDat2Deviceinit_subz_pm,(/opDat2Cardinality/))
  CALL c_f_pointer(opArg3%data_d,opDat3Deviceinit_subz_pm,(/opDat3Cardinality/))
  CALL c_f_pointer(opArg4%data_d,opDat4Deviceinit_subz_pm,(/opDat4Cardinality/))


  CALL op_cuda_init_subz_pm <<<blocksPerGrid,threadsPerBlock,dynamicSharedMemorySize>>>( &
  & getSetSizeFromOpArg(opArg1), &
  & opDat1Deviceinit_subz_pm, &
  & opDat2Deviceinit_subz_pm, &
  & opDat3Deviceinit_subz_pm, &
  & opDat4Deviceinit_subz_pm, &
  set%setPtr%size)

  IF ((n_upper .EQ. 0) .OR. (n_upper .EQ. set%setPtr%core_size)) THEN
    CALL op_mpi_wait_all_cuda(numberOfOpDats,opArgArray)
  END IF


  CALL op_mpi_set_dirtybit_cuda(numberOfOpDats,opArgArray)

  istat = cudaDeviceSynchronize()
  call op_timers_core(endTime)

  dataTransfer = 0.0
  dataTransfer = dataTransfer + opArg1%size * getSetSizeFromOpArg(opArg1)
  dataTransfer = dataTransfer + opArg2%size * getSetSizeFromOpArg(opArg2)
  dataTransfer = dataTransfer + opArg3%size * getSetSizeFromOpArg(opArg3)
  dataTransfer = dataTransfer + opArg4%size * getSetSizeFromOpArg(opArg4) * 2.d0
  returnSetKernelTiming = setKernelTime(1 , userSubroutine//C_NULL_CHAR, &
  & endTime-startTime, dataTransfer, 0.00000, 1)
  calledTimes = calledTimes + 1
END SUBROUTINE


! Stub for CPU execution

SUBROUTINE op_wrap_init_subz_pm( &
  & opDat1Local, &
  & opDat2Local, &
  & opDat3Local, &
  & opDat4Local, &
  & bottom,top)
  real(8) opDat1Local(4,*)
  real(8) opDat2Local(4,*)
  real(8) opDat3Local(1,*)
  real(8) opDat4Local(4,*)
  INTEGER(kind=4) bottom,top,i1

  DO i1 = bottom, top - 1, 1
! kernel call
  CALL init_subz_pm( &
    & opDat1Local(1,i1+1), &
    & opDat2Local(1,i1+1), &
    & opDat3Local(1,i1+1), &
    & opDat4Local(1,i1+1) &
    & )
  END DO
END SUBROUTINE
SUBROUTINE init_subz_pm_host_cpu( userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4 )

  IMPLICIT NONE
  character(kind=c_char,len=*), INTENT(IN) :: userSubroutine
  type ( op_set ) , INTENT(IN) :: set

  type ( op_arg ) , INTENT(IN) :: opArg1
  type ( op_arg ) , INTENT(IN) :: opArg2
  type ( op_arg ) , INTENT(IN) :: opArg3
  type ( op_arg ) , INTENT(IN) :: opArg4

  type ( op_arg ) , DIMENSION(4) :: opArgArray
  INTEGER(kind=4) :: numberOfOpDats
  INTEGER(kind=4) :: n_upper
  type ( op_set_core ) , POINTER :: opSetCore

  real(8), POINTER, DIMENSION(:) :: opDat1Local
  INTEGER(kind=4) :: opDat1Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat2Local
  INTEGER(kind=4) :: opDat2Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat3Local
  INTEGER(kind=4) :: opDat3Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat4Local
  INTEGER(kind=4) :: opDat4Cardinality

  INTEGER(kind=4) :: threadID
  INTEGER(kind=4) :: numberOfThreads
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayStart
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayEnd
  REAL(kind=8) :: startTime
  REAL(kind=8) :: endTime
  INTEGER(kind=4) :: returnSetKernelTiming
  INTEGER(kind=4) :: sliceStart
  INTEGER(kind=4) :: sliceEnd
  REAL(kind=4) :: dataTransfer


  INTEGER(kind=4) :: i1,i2,n

  numberOfOpDats = 4

  opArgArray(1) = opArg1
  opArgArray(2) = opArg2
  opArgArray(3) = opArg3
  opArgArray(4) = opArg4

  returnSetKernelTiming = setKernelTime(1 , userSubroutine//C_NULL_CHAR, &
  & 0.d0, 0.00000,0.00000, 0)
  call op_timers_core(startTime)

  n_upper = op_mpi_halo_exchanges(set%setCPtr,numberOfOpDats,opArgArray)


#ifdef _OPENMP
  numberOfThreads = omp_get_max_threads()
#else
  numberOfThreads = 1
#endif

    opSetCore => set%setPtr

    opDat1Cardinality = opArg1%dim * getSetSizeFromOpArg(opArg1)
    opDat2Cardinality = opArg2%dim * getSetSizeFromOpArg(opArg2)
    opDat3Cardinality = opArg3%dim * getSetSizeFromOpArg(opArg3)
    opDat4Cardinality = opArg4%dim * getSetSizeFromOpArg(opArg4)
    CALL c_f_pointer(opArg1%data,opDat1Local,(/opDat1Cardinality/))
    CALL c_f_pointer(opArg2%data,opDat2Local,(/opDat2Cardinality/))
    CALL c_f_pointer(opArg3%data,opDat3Local,(/opDat3Cardinality/))
    CALL c_f_pointer(opArg4%data,opDat4Local,(/opDat4Cardinality/))


    !$OMP PARALLEL DO private (sliceStart,sliceEnd,i1,threadID)
    DO i1 = 0, numberOfThreads - 1, 1
      sliceStart = opSetCore%size * i1 / numberOfThreads
      sliceEnd = opSetCore%size * (i1 + 1) / numberOfThreads
      threadID = omp_get_thread_num()
! kernel call
      CALL op_wrap_init_subz_pm( &
      & opDat1Local, &
      & opDat2Local, &
      & opDat3Local, &
      & opDat4Local, &
      & sliceStart, sliceEnd)
    END DO
    !$OMP END PARALLEL DO
    IF ((n_upper .EQ. 0) .OR. (n_upper .EQ. opSetCore%core_size)) THEN
      CALL op_mpi_wait_all(numberOfOpDats,opArgArray)
    END IF

    CALL op_mpi_set_dirtybit(numberOfOpDats,opArgArray)

    call op_timers_core(endTime)

    dataTransfer = 0.0
    dataTransfer = dataTransfer + opArg1%size * getSetSizeFromOpArg(opArg1)
    dataTransfer = dataTransfer + opArg2%size * getSetSizeFromOpArg(opArg2)
    dataTransfer = dataTransfer + opArg3%size * getSetSizeFromOpArg(opArg3)
    dataTransfer = dataTransfer + opArg4%size * getSetSizeFromOpArg(opArg4) * 2.d0
    returnSetKernelTiming = setKernelTime(1 , userSubroutine//C_NULL_CHAR, &
    & endTime-startTime, dataTransfer, 0.00000, 1)
  END SUBROUTINE
  END MODULE
