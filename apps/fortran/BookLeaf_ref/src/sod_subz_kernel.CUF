!
! auto-generated by op2.py on 2015-01-26 19:04
!

MODULE SOD_SUBZ_MODULE
USE OP2_CONSTANTS
USE kinds_mod,    ONLY: ink,rlk
USE parameters_mod,ONLY: LI
USE OP2_FORTRAN_DECLARATIONS
USE OP2_FORTRAN_RT_SUPPORT
USE ISO_C_BINDING
USE CUDAFOR
USE CUDACONFIGURATIONPARAMS


#ifdef _OPENMP
  USE OMP_LIB
#endif

! sod_subzvariable declarations


TYPE ( c_ptr )  :: planRet_sod_subz

#define OP2_SOA(var,dim,stride) var((dim-1)*stride+1)

CONTAINS

!DEC$ ATTRIBUTES FORCEINLINE :: sod_subz
attributes (host) subroutine sod_subz(ndx1,ndx2,ndx3,ndx4,ndy1,ndy2,ndy3,ndy4,rho,spmass)

    USE kinds_mod,ONLY: rlk
    USE parameters_mod,ONLY: N_SHAPE

    implicit none

    REAL(KIND=rlk), INTENT(IN) :: ndx1,ndx2,ndx3,ndx4,ndy1,ndy2,ndy3,ndy4,rho
    REAL(KIND=rlk), DIMENSION(N_SHAPE), INTENT(OUT) :: spmass

    REAL(KIND=rlk), DIMENSION(N_SHAPE) :: ndx,ndy
    REAL(KIND=rlk) :: x1,x2,x3,x4,y1,y2,y3,y4,w1,w2,w3,w4
    INTEGER(KIND=ink) :: ii,inod

    ndx(1) = ndx1
    ndx(2) = ndx2
    ndx(3) = ndx3
    ndx(4) = ndx4
    ndy(1) = ndy1
    ndy(2) = ndy2
    ndy(3) = ndy3
    ndy(4) = ndy4

    x3=0.25_rlk*(ndx(1)+ndx(2)+ndx(3)+ndx(4))
    y3=0.25_rlk*(ndy(1)+ndy(2)+ndy(3)+ndy(4))
    DO inod=1,4
      x1=ndx(inod)
      y1=ndy(inod)
      ii=MOD(inod,4)+1_ink
      x2=0.5_rlk*(x1+ndx(ii))
      y2=0.5_rlk*(y1+ndy(ii))
      ii=MOD(inod+2,4)+1_ink
      x4=0.5_rlk*(x1+ndx(ii))
      y4=0.5_rlk*(y1+ndy(ii))
      w1=-x1+x2+x3-x4
      w2=-x1-x2+x3+x4
      w3=-y1+y2+y3-y4
      w4=-y1-y2+y3+y4
      spmass(inod)=rho*(w1*w4-w2*w3)
    ENDDO

  END SUBROUTINE sod_subz

attributes (device) subroutine sod_subz_gpu(ndx1,ndx2,ndx3,ndx4,ndy1,ndy2,ndy3,ndy4,rho,spmass)

    USE kinds_mod,ONLY: rlk
    USE parameters_mod,ONLY: N_SHAPE

    implicit none

    REAL(KIND=rlk), INTENT(IN) :: ndx1,ndx2,ndx3,ndx4,ndy1,ndy2,ndy3,ndy4,rho
    REAL(KIND=rlk), DIMENSION(N_SHAPE), INTENT(OUT) :: spmass

    REAL(KIND=rlk), DIMENSION(N_SHAPE) :: ndx,ndy
    REAL(KIND=rlk) :: x1,x2,x3,x4,y1,y2,y3,y4,w1,w2,w3,w4
    INTEGER(KIND=ink) :: ii,inod

    ndx(1) = ndx1
    ndx(2) = ndx2
    ndx(3) = ndx3
    ndx(4) = ndx4
    ndy(1) = ndy1
    ndy(2) = ndy2
    ndy(3) = ndy3
    ndy(4) = ndy4

    x3=0.25_rlk*(ndx(1)+ndx(2)+ndx(3)+ndx(4))
    y3=0.25_rlk*(ndy(1)+ndy(2)+ndy(3)+ndy(4))
    DO inod=1,4
      x1=ndx(inod)
      y1=ndy(inod)
      ii=MOD(inod,4)+1_ink
      x2=0.5_rlk*(x1+ndx(ii))
      y2=0.5_rlk*(y1+ndy(ii))
      ii=MOD(inod+2,4)+1_ink
      x4=0.5_rlk*(x1+ndx(ii))
      y4=0.5_rlk*(y1+ndy(ii))
      w1=-x1+x2+x3-x4
      w2=-x1-x2+x3+x4
      w3=-y1+y2+y3-y4
      w4=-y1-y2+y3+y4
      OP2_SOA(spmass,inod, elements_stride_OP2)=rho*(w1*w4-w2*w3)
    ENDDO

  END SUBROUTINE sod_subz_gpu


! CUDA kernel function
attributes (global) SUBROUTINE op_cuda_sod_subz( &
  &  soa_stride,      &
  & opDat1Devicesod_subz, &
  & opDat5Devicesod_subz, &
  & opDat1Map, &
  & opDat9Devicesod_subz, &
  & opDat10Devicesod_subz, &
  & pblkMap, &
  & poffset, &
  & pnelems, &
  & pnthrcol, &
  & pthrcol, &
  & setSize, &
  & blockOffset)

  IMPLICIT NONE

! local variables
  real(8), DEVICE :: opDat1Devicesod_subz(*)
  real(8), DEVICE :: opDat5Devicesod_subz(*)
  INTEGER(kind=4), DEVICE, INTENT(IN) :: opDat1Map(*)
  real(8), DEVICE, INTENT(IN) :: opDat9Devicesod_subz(*)
  real(8), DEVICE :: opDat10Devicesod_subz(*)

  INTEGER(kind=4) map1idx, map2idx, map3idx, map4idx

  INTEGER(kind=4), VALUE :: soa_stride
  INTEGER(kind=4), DIMENSION(0:*), DEVICE :: pblkMap
  INTEGER(kind=4), DIMENSION(0:*), DEVICE :: poffset
  INTEGER(kind=4), DIMENSION(0:*), DEVICE :: pnelems
  INTEGER(kind=4), DIMENSION(0:*), DEVICE :: pnthrcol
  INTEGER(kind=4), DIMENSION(0:*), DEVICE, INTENT(IN) :: pthrcol
  INTEGER(kind=4), VALUE :: blockOffset
  INTEGER(kind=4), VALUE :: setSize


  INTEGER(kind=4), SHARED :: numOfColours
  INTEGER(kind=4), SHARED :: numberOfActiveThreadsCeiling
  INTEGER(kind=4), SHARED :: blockID
  INTEGER(kind=4), SHARED :: threadBlockOffset
  INTEGER(kind=4), SHARED :: numberOfActiveThreads
  INTEGER(kind=4) :: colour1
  INTEGER(kind=4) :: colour2
  INTEGER(kind=4) :: n1
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: i2
  INTEGER(kind=4) :: i3


  IF (threadIdx%x - 1 .EQ. 0) THEN
    blockID = pblkMap(blockIdx%x - 1 + blockOffset)
    numberOfActiveThreads = pnelems(blockID)
    numberOfActiveThreadsCeiling = blockDim%x * (1 + (numberOfActiveThreads - 1) / blockDim%x)
    numOfColours = pnthrcol(blockID)
    threadBlockOffset = poffset(blockID)

  END IF

  CALL syncthreads()

  i1 = threadIdx%x - 1

  DO WHILE (i1 < numberOfActiveThreadsCeiling )
    IF (i1 < numberOfActiveThreads) THEN
      i3 = i1
      map1idx = opDat1Map(1 + i3 + threadBlockOffset + setSize * 0)
      map2idx = opDat1Map(1 + i3 + threadBlockOffset + setSize * 1)
      map3idx = opDat1Map(1 + i3 + threadBlockOffset + setSize * 2)
      map4idx = opDat1Map(1 + i3 + threadBlockOffset + setSize * 3)

! kernel call
      CALL sod_subz_gpu( &
      & opDat1Devicesod_subz(1 + map1idx), &
      & opDat1Devicesod_subz(1 + map2idx), &
      & opDat1Devicesod_subz(1 + map3idx), &
      & opDat1Devicesod_subz(1 + map4idx), &
      & opDat5Devicesod_subz(1 + map1idx), &
      & opDat5Devicesod_subz(1 + map2idx), &
      & opDat5Devicesod_subz(1 + map3idx), &
      & opDat5Devicesod_subz(1 + map4idx), &
      & opDat9Devicesod_subz((i3 + threadBlockOffset) * (1) +1), &
      & opDat10Devicesod_subz(1 + (i3 + threadBlockOffset)) &
      & )

    END IF
    i1 = i1 + blockDim%x
  END DO



END SUBROUTINE

attributes (host) SUBROUTINE sod_subz_host( userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4, &
  & opArg5, &
  & opArg6, &
  & opArg7, &
  & opArg8, &
  & opArg9, &
  & opArg10 )

  IMPLICIT NONE
  character(len=8), INTENT(IN) :: userSubroutine
  TYPE ( op_set ) , INTENT(IN) :: set

  TYPE ( op_arg ) , INTENT(IN) :: opArg1
  TYPE ( op_arg ) , INTENT(IN) :: opArg2
  TYPE ( op_arg ) , INTENT(IN) :: opArg3
  TYPE ( op_arg ) , INTENT(IN) :: opArg4
  TYPE ( op_arg ) , INTENT(IN) :: opArg5
  TYPE ( op_arg ) , INTENT(IN) :: opArg6
  TYPE ( op_arg ) , INTENT(IN) :: opArg7
  TYPE ( op_arg ) , INTENT(IN) :: opArg8
  TYPE ( op_arg ) , INTENT(IN) :: opArg9
  TYPE ( op_arg ) , INTENT(IN) :: opArg10

  IF (getHybridGPU()) THEN
    CALL sod_subz_host_gpu( userSubroutine, set, &
    & opArg1, &
    & opArg2, &
    & opArg3, &
    & opArg4, &
    & opArg5, &
    & opArg6, &
    & opArg7, &
    & opArg8, &
    & opArg9, &
    & opArg10 )
  ELSE
    CALL sod_subz_host_cpu( userSubroutine, set, &
    & opArg1, &
    & opArg2, &
    & opArg3, &
    & opArg4, &
    & opArg5, &
    & opArg6, &
    & opArg7, &
    & opArg8, &
    & opArg9, &
    & opArg10 )
  END IF
END SUBROUTINE


! Stub for GPU execution

attributes (host) SUBROUTINE sod_subz_host_gpu( userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4, &
  & opArg5, &
  & opArg6, &
  & opArg7, &
  & opArg8, &
  & opArg9, &
  & opArg10 )

  IMPLICIT NONE
  character(len=8), INTENT(IN) :: userSubroutine
  TYPE ( op_set ) , INTENT(IN) :: set

  TYPE ( op_arg ) , INTENT(IN) :: opArg1
  TYPE ( op_arg ) , INTENT(IN) :: opArg2
  TYPE ( op_arg ) , INTENT(IN) :: opArg3
  TYPE ( op_arg ) , INTENT(IN) :: opArg4
  TYPE ( op_arg ) , INTENT(IN) :: opArg5
  TYPE ( op_arg ) , INTENT(IN) :: opArg6
  TYPE ( op_arg ) , INTENT(IN) :: opArg7
  TYPE ( op_arg ) , INTENT(IN) :: opArg8
  TYPE ( op_arg ) , INTENT(IN) :: opArg9
  TYPE ( op_arg ) , INTENT(IN) :: opArg10

  TYPE ( op_arg ) , DIMENSION(10) :: opArgArray
  INTEGER(kind=4) :: numberOfOpDats
  INTEGER(kind=4) :: n_upper
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayStart
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayEnd
  REAL(kind=8) :: startTime
  REAL(kind=8) :: endTime
  INTEGER(kind=4) :: returnSetKernelTiming


  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat1Devicesod_subz
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: opMap1Devicesod_subz
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat5Devicesod_subz
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: opMap5Devicesod_subz
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat9Devicesod_subz
  real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat10Devicesod_subz

  INTEGER(kind=4) :: opDat1Cardinality
  INTEGER(kind=4) :: opMap1Cardinality
  INTEGER(kind=4) :: opDat5Cardinality
  INTEGER(kind=4) :: opMap5Cardinality
  INTEGER(kind=4) :: opDat9Cardinality
  INTEGER(kind=4) :: opDat10Cardinality

  TYPE ( op_plan ) , POINTER :: actualPlan_sod_subz

  INTEGER(kind=4) :: blocksPerGrid
  INTEGER(kind=4) :: threadsPerBlock
  INTEGER(kind=4) :: dynamicSharedMemorySize
  INTEGER(kind=4) :: threadSynchRet
  INTEGER(kind=4), DIMENSION(1:10) :: opDatArray
  INTEGER(kind=4), DIMENSION(1:10) :: mappingIndicesArray
  INTEGER(kind=4), DIMENSION(1:10) :: mappingArray
  INTEGER(kind=4), DIMENSION(1:10) :: accessDescriptorArray
  INTEGER(kind=4), DIMENSION(1:10) :: indirectionDescriptorArray

  INTEGER(kind=4) :: mappingArray1Size
  INTEGER(kind=4) :: mappingArray5Size

  INTEGER(kind=4) :: numberOfIndirectOpDats
  INTEGER(kind=4) :: blockOffset
  INTEGER(kind=4) :: pblkMapSize
  INTEGER(kind=4) :: poffsetSize
  INTEGER(kind=4) :: pnelemsSize
  INTEGER(kind=4) :: pnthrcolSize
  INTEGER(kind=4) :: pthrcolSize
  INTEGER(kind=4), POINTER, DIMENSION(:) :: ncolblk
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: pblkMap
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: poffset
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: pnelems
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: pnthrcol
  INTEGER(kind=4), DIMENSION(:), DEVICE, ALLOCATABLE :: pthrcol
  INTEGER(kind=4) :: partitionSize
  INTEGER(kind=4) :: blockSize
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: i2
  INTEGER(kind=4), SAVE :: calledTimes

  INTEGER(kind=4) :: istat

  numberOfOpDats = 10

  opArgArray(1) = opArg1
  opArgArray(2) = opArg2
  opArgArray(3) = opArg3
  opArgArray(4) = opArg4
  opArgArray(5) = opArg5
  opArgArray(6) = opArg6
  opArgArray(7) = opArg7
  opArgArray(8) = opArg8
  opArgArray(9) = opArg9
  opArgArray(10) = opArg10

  returnSetKernelTiming = setKernelTime(30 , userSubroutine//C_NULL_CHAR, &
  & 0.d0, 0.00000,0.00000, 0)
  call op_timers_core(startTime)

  n_upper = op_mpi_halo_exchanges_cuda(set%setCPtr,numberOfOpDats,opArgArray)

  indirectionDescriptorArray(1) = 0
  indirectionDescriptorArray(2) = 0
  indirectionDescriptorArray(3) = 0
  indirectionDescriptorArray(4) = 0
  indirectionDescriptorArray(5) = 1
  indirectionDescriptorArray(6) = 1
  indirectionDescriptorArray(7) = 1
  indirectionDescriptorArray(8) = 1
  indirectionDescriptorArray(9) = -1
  indirectionDescriptorArray(10) = -1

  numberOfIndirectOpDats = 2

  partitionSize = getPartitionSize(userSubroutine//C_NULL_CHAR,set%setPtr%size)

  planRet_sod_subz = FortranPlanCaller( &
  & userSubroutine//C_NULL_CHAR, &
  & set%setCPtr, &
  & partitionSize, &
  & numberOfOpDats, &
  & opArgArray, &
  & numberOfIndirectOpDats, &
  & indirectionDescriptorArray,2)

  opDat1Cardinality = opArg1%dim * getSetSizeFromOpArg(opArg1)
  opMap1Cardinality = set%setPtr%size * getMapDimFromOpArg(opArg1)
  opDat5Cardinality = opArg5%dim * getSetSizeFromOpArg(opArg5)
  opMap5Cardinality = set%setPtr%size * getMapDimFromOpArg(opArg5)
  opDat9Cardinality = opArg9%dim * getSetSizeFromOpArg(opArg9)
  opDat10Cardinality = opArg10%dim * getSetSizeFromOpArg(opArg10)


  CALL c_f_pointer(opArg1%data_d,opDat1Devicesod_subz,(/opDat1Cardinality/))
  CALL c_f_pointer(opArg1%map_data_d,opMap1Devicesod_subz,(/opMap1Cardinality/))
  CALL c_f_pointer(opArg5%data_d,opDat5Devicesod_subz,(/opDat5Cardinality/))
  CALL c_f_pointer(opArg5%map_data_d,opMap5Devicesod_subz,(/opMap5Cardinality/))
  CALL c_f_pointer(opArg9%data_d,opDat9Devicesod_subz,(/opDat9Cardinality/))
  CALL c_f_pointer(opArg10%data_d,opDat10Devicesod_subz,(/opDat10Cardinality/))

  CALL c_f_pointer(planRet_sod_subz,actualPlan_sod_subz)
  CALL c_f_pointer(actualPlan_sod_subz%ncolblk,ncolblk,(/set%setPtr%size/))
  pblkMapSize = actualPlan_sod_subz%nblocks
  CALL c_f_pointer(actualPlan_sod_subz%blkmap_d,pblkMap,(/pblkMapSize/))
  poffsetSize = actualPlan_sod_subz%nblocks
  CALL c_f_pointer(actualPlan_sod_subz%offset_d,poffset,(/poffsetSize/))
  pnelemsSize = actualPlan_sod_subz%nblocks
  CALL c_f_pointer(actualPlan_sod_subz%nelems_d,pnelems,(/pnelemsSize/))
  pnthrcolSize = actualPlan_sod_subz%nblocks
  CALL c_f_pointer(actualPlan_sod_subz%nthrcol,pnthrcol,(/pnthrcolSize/))
  pthrcolSize = set%setPtr%size
  CALL c_f_pointer(actualPlan_sod_subz%thrcol,pthrcol,(/pthrcolSize/))


  blockOffset = 0

  threadsPerBlock = getBlockSize(userSubroutine//C_NULL_CHAR,set%setPtr%size)
  DO i2 = 0, actualPlan_sod_subz%ncolors - 1, 1
    IF (i2 .EQ. actualPlan_sod_subz%ncolors_core) THEN
      CALL op_mpi_wait_all_cuda(numberOfOpDats,opArgArray)
    END IF

    blocksPerGrid = ncolblk(i2 + 1)
    dynamicSharedMemorySize = reductionSize(opArgArray,numberOfOpDats) * threadsPerBlock

    CALL op_cuda_sod_subz <<<blocksPerGrid,threadsPerBlock,dynamicSharedMemorySize>>> (&
    & getSetSizeFromOpArg(opArg10), &
    & opDat1Devicesod_subz, &
    & opDat5Devicesod_subz, &
    & opMap1Devicesod_subz, &
    & opDat9Devicesod_subz, &
    & opDat10Devicesod_subz, &
    & pblkMap, &
    & poffset,pnelems,pnthrcol,pthrcol, &
    & set%setPtr%size+set%setPtr%exec_size, blockOffset)

    blockOffset = blockOffset + blocksPerGrid
  END DO


  IF ((n_upper .EQ. 0) .OR. (n_upper .EQ. set%setPtr%core_size)) THEN
    CALL op_mpi_wait_all_cuda(numberOfOpDats,opArgArray)
  END IF


  CALL op_mpi_set_dirtybit_cuda(numberOfOpDats,opArgArray)

  istat = cudaDeviceSynchronize()
  call op_timers_core(endTime)

  returnSetKernelTiming = setKernelTime(30 , userSubroutine//C_NULL_CHAR, &
  & endTime-startTime, actualPlan_sod_subz%transfer,actualPlan_sod_subz%transfer2, 1)
  calledTimes = calledTimes + 1
END SUBROUTINE


! Stub for CPU execution

SUBROUTINE op_wrap_sod_subz( &
  & opDat1Local, &
  & opDat5Local, &
  & opDat9Local, &
  & opDat10Local, &
  & opDat1Map, &
  & opDat1MapDim, &
  & bottom,top)
  real(8) opDat1Local(1,*)
  real(8) opDat5Local(1,*)
  real(8) opDat9Local(1,*)
  real(8) opDat10Local(4,*)
  INTEGER(kind=4) opDat1Map(*)
  INTEGER(kind=4) opDat1MapDim
  INTEGER(kind=4) bottom,top,i1
  INTEGER(kind=4) map1idx, map2idx, map3idx, map4idx

  DO i1 = bottom, top - 1, 1
    map1idx = opDat1Map(1 + i1 * opDat1MapDim + 0)+1
    map2idx = opDat1Map(1 + i1 * opDat1MapDim + 1)+1
    map3idx = opDat1Map(1 + i1 * opDat1MapDim + 2)+1
    map4idx = opDat1Map(1 + i1 * opDat1MapDim + 3)+1
! kernel call
  CALL sod_subz( &
    & opDat1Local(1,map1idx), &
    & opDat1Local(1,map2idx), &
    & opDat1Local(1,map3idx), &
    & opDat1Local(1,map4idx), &
    & opDat5Local(1,map1idx), &
    & opDat5Local(1,map2idx), &
    & opDat5Local(1,map3idx), &
    & opDat5Local(1,map4idx), &
    & opDat9Local(1,i1+1), &
    & opDat10Local(1,i1+1) &
    & )
  END DO
END SUBROUTINE
SUBROUTINE sod_subz_host_cpu( userSubroutine, set, &
  & opArg1, &
  & opArg2, &
  & opArg3, &
  & opArg4, &
  & opArg5, &
  & opArg6, &
  & opArg7, &
  & opArg8, &
  & opArg9, &
  & opArg10 )

  IMPLICIT NONE
  character(kind=c_char,len=*), INTENT(IN) :: userSubroutine
  type ( op_set ) , INTENT(IN) :: set

  type ( op_arg ) , INTENT(IN) :: opArg1
  type ( op_arg ) , INTENT(IN) :: opArg2
  type ( op_arg ) , INTENT(IN) :: opArg3
  type ( op_arg ) , INTENT(IN) :: opArg4
  type ( op_arg ) , INTENT(IN) :: opArg5
  type ( op_arg ) , INTENT(IN) :: opArg6
  type ( op_arg ) , INTENT(IN) :: opArg7
  type ( op_arg ) , INTENT(IN) :: opArg8
  type ( op_arg ) , INTENT(IN) :: opArg9
  type ( op_arg ) , INTENT(IN) :: opArg10

  type ( op_arg ) , DIMENSION(10) :: opArgArray
  INTEGER(kind=4) :: numberOfOpDats
  INTEGER(kind=4) :: n_upper
  type ( op_set_core ) , POINTER :: opSetCore

  INTEGER(kind=4), POINTER, DIMENSION(:) :: opDat1Map
  INTEGER(kind=4) :: opDat1MapDim
  real(8), POINTER, DIMENSION(:) :: opDat1Local
  INTEGER(kind=4) :: opDat1Cardinality

  INTEGER(kind=4), POINTER, DIMENSION(:) :: opDat5Map
  INTEGER(kind=4) :: opDat5MapDim
  real(8), POINTER, DIMENSION(:) :: opDat5Local
  INTEGER(kind=4) :: opDat5Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat9Local
  INTEGER(kind=4) :: opDat9Cardinality

  real(8), POINTER, DIMENSION(:) :: opDat10Local
  INTEGER(kind=4) :: opDat10Cardinality

  INTEGER(kind=4) :: threadID
  INTEGER(kind=4) :: numberOfThreads
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayStart
  INTEGER(kind=4), DIMENSION(1:8) :: timeArrayEnd
  REAL(kind=8) :: startTime
  REAL(kind=8) :: endTime
  INTEGER(kind=4) :: returnSetKernelTiming
  LOGICAL :: firstTime_sod_subz = .TRUE.
  type ( c_ptr )  :: planRet_sod_subz
  type ( op_plan ) , POINTER :: actualPlan_sod_subz
  INTEGER(kind=4), POINTER, DIMENSION(:) :: ncolblk_sod_subz
  INTEGER(kind=4), POINTER, DIMENSION(:) :: blkmap_sod_subz
  INTEGER(kind=4), POINTER, DIMENSION(:) :: nelems_sod_subz
  INTEGER(kind=4), POINTER, DIMENSION(:) :: offset_sod_subz
  INTEGER(kind=4), DIMENSION(1:10) :: indirectionDescriptorArray
  INTEGER(kind=4) :: numberOfIndirectOpDats
  INTEGER(kind=4) :: blockOffset
  INTEGER(kind=4) :: nblocks
  INTEGER(kind=4) :: partitionSize
  INTEGER(kind=4) :: blockID
  INTEGER(kind=4) :: nelem
  INTEGER(kind=4) :: offset_b


  INTEGER(kind=4) :: i1,i2,n

  numberOfOpDats = 10

  opArgArray(1) = opArg1
  opArgArray(2) = opArg2
  opArgArray(3) = opArg3
  opArgArray(4) = opArg4
  opArgArray(5) = opArg5
  opArgArray(6) = opArg6
  opArgArray(7) = opArg7
  opArgArray(8) = opArg8
  opArgArray(9) = opArg9
  opArgArray(10) = opArg10

  returnSetKernelTiming = setKernelTime(30 , userSubroutine//C_NULL_CHAR, &
  & 0.d0, 0.00000,0.00000, 0)
  call op_timers_core(startTime)

  n_upper = op_mpi_halo_exchanges(set%setCPtr,numberOfOpDats,opArgArray)

#ifdef OP_PART_SIZE_1
  partitionSize = OP_PART_SIZE_1
#else
  partitionSize = 0
#endif

#ifdef _OPENMP
  numberOfThreads = omp_get_max_threads()
#else
  numberOfThreads = 1
#endif
    indirectionDescriptorArray(1) = 0
    indirectionDescriptorArray(2) = 0
    indirectionDescriptorArray(3) = 0
    indirectionDescriptorArray(4) = 0
    indirectionDescriptorArray(5) = 1
    indirectionDescriptorArray(6) = 1
    indirectionDescriptorArray(7) = 1
    indirectionDescriptorArray(8) = 1
    indirectionDescriptorArray(9) = -1
    indirectionDescriptorArray(10) = -1

    numberOfIndirectOpDats = 2

    planRet_sod_subz = FortranPlanCaller( &
    & userSubroutine//C_NULL_CHAR, &
    & set%setCPtr, &
    & partitionSize, &
    & numberOfOpDats, &
    & opArgArray, &
    & numberOfIndirectOpDats, &
    & indirectionDescriptorArray,2)

    CALL c_f_pointer(planRet_sod_subz,actualPlan_sod_subz)
    CALL c_f_pointer(actualPlan_sod_subz%ncolblk,ncolblk_sod_subz,(/actualPlan_sod_subz%ncolors_core/))
    CALL c_f_pointer(actualPlan_sod_subz%blkmap,blkmap_sod_subz,(/actualPlan_sod_subz%nblocks/))
    CALL c_f_pointer(actualPlan_sod_subz%offset,offset_sod_subz,(/actualPlan_sod_subz%nblocks/))
    CALL c_f_pointer(actualPlan_sod_subz%nelems,nelems_sod_subz,(/actualPlan_sod_subz%nblocks/))

    opSetCore => set%setPtr

    opDat1Cardinality = opArg1%dim * getSetSizeFromOpArg(opArg1)
    opDat1MapDim = getMapDimFromOpArg(opArg1)
    opDat5Cardinality = opArg5%dim * getSetSizeFromOpArg(opArg5)
    opDat5MapDim = getMapDimFromOpArg(opArg5)
    opDat9Cardinality = opArg9%dim * getSetSizeFromOpArg(opArg9)
    opDat10Cardinality = opArg10%dim * getSetSizeFromOpArg(opArg10)
    CALL c_f_pointer(opArg1%data,opDat1Local,(/opDat1Cardinality/))
    CALL c_f_pointer(opArg1%map_data,opDat1Map,(/opSetCore%size*opDat1MapDim/))
    CALL c_f_pointer(opArg5%data,opDat5Local,(/opDat5Cardinality/))
    CALL c_f_pointer(opArg5%map_data,opDat5Map,(/opSetCore%size*opDat5MapDim/))
    CALL c_f_pointer(opArg9%data,opDat9Local,(/opDat9Cardinality/))
    CALL c_f_pointer(opArg10%data,opDat10Local,(/opDat10Cardinality/))


    blockOffset = 0

    DO i1 = 0, actualPlan_sod_subz%ncolors - 1, 1
      IF (i1 .EQ. actualPlan_sod_subz%ncolors_core) THEN
        CALL op_mpi_wait_all(numberOfOpDats,opArgArray)
      END IF

      nblocks = ncolblk_sod_subz(i1 + 1)
      !$OMP PARALLEL DO private (threadID, blockID, nelem, offset_b)
      DO i2 = 0, nblocks - 1, 1
        threadID = omp_get_thread_num()
        blockID = blkmap_sod_subz(i2+blockOffset+1)
        nelem = nelems_sod_subz(blockID+1)
        offset_b = offset_sod_subz(blockID+1)
        CALL op_wrap_sod_subz( &
        & opDat1Local, &
        & opDat5Local, &
        & opDat9Local, &
        & opDat10Local, &
        & opDat1Map, &
        & opDat1MapDim, &
        & offset_b, offset_b+nelem)
      END DO
      !$OMP END PARALLEL DO
      blockOffset = blockOffset + nblocks
    END DO
    IF ((n_upper .EQ. 0) .OR. (n_upper .EQ. opSetCore%core_size)) THEN
      CALL op_mpi_wait_all(numberOfOpDats,opArgArray)
    END IF

    CALL op_mpi_set_dirtybit(numberOfOpDats,opArgArray)

    call op_timers_core(endTime)

    returnSetKernelTiming = setKernelTime(30 , userSubroutine//C_NULL_CHAR, &
    & endTime-startTime, actualPlan_sod_subz%transfer,actualPlan_sod_subz%transfer2, 1)
  END SUBROUTINE
  END MODULE
