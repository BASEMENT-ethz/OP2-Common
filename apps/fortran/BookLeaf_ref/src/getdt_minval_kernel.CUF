!
! auto-generated by op2.py on 2015-01-26 22:23
!

MODULE GETDT_MINVAL_MODULE
USE OP2_CONSTANTS
USE kinds_mod,    ONLY: ink,rlk
USE parameters_mod,ONLY: LI
USE OP2_FORTRAN_DECLARATIONS
USE OP2_FORTRAN_RT_SUPPORT
USE ISO_C_BINDING
USE CUDAFOR
USE CUDACONFIGURATIONPARAMS


#ifdef _OPENMP
  USE OMP_LIB
#endif

! getdt_minvalvariable declarations

real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: reductionArrayDevice2getdt_minval



CONTAINS

! Reduction cuda kernel
  attributes (device) SUBROUTINE ReductionFloat8(reductionResult,inputValue,reductionOperation)
  REAL(kind=8), DIMENSION(:), DEVICE :: reductionResult
  REAL(kind=8) :: inputValue
  INTEGER(kind=4), VALUE :: reductionOperation
  REAL(kind=8), DIMENSION(0:*), SHARED :: sharedDouble8
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: threadID
  threadID = threadIdx%x - 1
  i1 = ishft(blockDim%x,-1)
  CALL syncthreads()
  sharedDouble8(threadID) = inputValue
  DO WHILE (i1 > 0 )
    CALL syncthreads()
    IF (threadID < i1) THEN
      SELECT CASE(reductionOperation)
      CASE (0)
      sharedDouble8(threadID) = sharedDouble8(threadID) + sharedDouble8(threadID + i1)
      CASE (1)
      IF (sharedDouble8(threadID + i1) < sharedDouble8(threadID)) THEN
        sharedDouble8(threadID) = sharedDouble8(threadID + i1)
      END IF
      CASE (2)
      IF (sharedDouble8(threadID + i1) > sharedDouble8(threadID)) THEN
        sharedDouble8(threadID) = sharedDouble8(threadID + i1)
      END IF
      END SELECT
    END IF
    i1 = ishft(i1,-1)
  END DO
  CALL syncthreads()
  IF (threadID .EQ. 0) THEN
    SELECT CASE(reductionOperation)
    CASE (0)
    reductionResult(1) = reductionResult(1) + sharedDouble8(0)
    CASE (1)
    IF (sharedDouble8(0) < reductionResult(1)) THEN
      reductionResult(1) = sharedDouble8(0)
    END IF
    CASE (2)
    IF (sharedDouble8(0) > reductionResult(1)) THEN
      reductionResult(1) = sharedDouble8(0)
    END IF
    END SELECT
  END IF
  CALL syncthreads()
  END SUBROUTINE

  attributes (device) SUBROUTINE ReductionInt4(reductionResult,inputValue,reductionOperation)
  INTEGER(kind=4), DIMENSION(:), DEVICE :: reductionResult
  INTEGER(kind=4) :: inputValue
  INTEGER(kind=4), VALUE :: reductionOperation
  INTEGER(kind=4), DIMENSION(0:*), SHARED :: sharedInt4
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: threadID
  threadID = threadIdx%x - 1
  i1 = ishft(blockDim%x,-1)
  CALL syncthreads()
  sharedInt4(threadID) = inputValue
  DO WHILE (i1 > 0 )
    CALL syncthreads()
    IF (threadID < i1) THEN
      SELECT CASE(reductionOperation)
      CASE (0)
      sharedInt4(threadID) = sharedInt4(threadID) + sharedInt4(threadID + i1)
      CASE (1)
      IF (sharedInt4(threadID + i1) < sharedInt4(threadID)) THEN
        sharedInt4(threadID) = sharedInt4(threadID + i1)
      END IF
      CASE (2)
      IF (sharedInt4(threadID + i1) > sharedInt4(threadID)) THEN
        sharedInt4(threadID) = sharedInt4(threadID + i1)
      END IF
      END SELECT
    END IF
    i1 = ishft(i1,-1)
  END DO
  CALL syncthreads()
  IF (threadID .EQ. 0) THEN
    SELECT CASE(reductionOperation)
    CASE (0)
    reductionResult(1) = reductionResult(1) + sharedInt4(0)
    CASE (1)
    IF (sharedInt4(0) < reductionResult(1)) THEN
      reductionResult(1) = sharedInt4(0)
    END IF
    CASE (2)
    IF (sharedInt4(0) > reductionResult(1)) THEN
      reductionResult(1) = sharedInt4(0)
    END IF
    END SELECT
  END IF
  CALL syncthreads()
  END SUBROUTINE

!DEC$ ATTRIBUTES FORCEINLINE :: getdt_minval
attributes (host) subroutine getdt_minval(rscratch11,w1)

    USE kinds_mod,ONLY: rlk
    USE parameters_mod,ONLY: N_SHAPE

    implicit none

    REAL(KIND=rlk), INTENT(IN) :: rscratch11
    REAL(KIND=rlk), INTENT(INOUT) :: w1

    w1 = MIN(w1,rscratch11)

  END SUBROUTINE getdt_minval

attributes (device) subroutine getdt_minval_gpu(rscratch11,w1)

    USE kinds_mod,ONLY: rlk
    USE parameters_mod,ONLY: N_SHAPE

    implicit none

    REAL(KIND=rlk), INTENT(IN) :: rscratch11
    REAL(KIND=rlk), INTENT(INOUT) :: w1

    w1 = MIN(w1,rscratch11)

  END SUBROUTINE getdt_minval_gpu


! CUDA kernel function
  attributes (global) SUBROUTINE op_cuda_getdt_minval( &
    & opDat1Devicegetdt_minval, &
    & reductionArrayDevice2,   &
    & setSize)

    IMPLICIT NONE

! local variables
    real(8), DEVICE, INTENT(IN) :: opDat1Devicegetdt_minval(*)

    real(8), DIMENSION(:), DEVICE :: reductionArrayDevice2
    real(8) :: opGblDat2Devicegetdt_minval

    INTEGER(kind=4), VALUE :: setSize
    INTEGER(kind=4) :: i1

    opGblDat2Devicegetdt_minval = reductionArrayDevice2(blockIdx%x - 1 + 1)

    DO i1 = threadIdx%x - 1 + (blockIdx%x - 1) * blockDim%x, setSize - 1, blockDim%x * gridDim%x

! kernel call

      CALL getdt_minval_gpu( &
      & opDat1Devicegetdt_minval(i1 + 1), &
      & opGblDat2Devicegetdt_minval &
      & )
    END DO

    CALL ReductionFloat8(reductionArrayDevice2(blockIdx%x - 1 + 1:),opGblDat2Devicegetdt_minval,1)

  END SUBROUTINE

  attributes (host) SUBROUTINE getdt_minval_host( userSubroutine, set, &
    & opArg1, &
    & opArg2 )

    IMPLICIT NONE
    character(len=12), INTENT(IN) :: userSubroutine
    TYPE ( op_set ) , INTENT(IN) :: set

    TYPE ( op_arg ) , INTENT(IN) :: opArg1
    TYPE ( op_arg ) , INTENT(IN) :: opArg2

    IF (getHybridGPU()) THEN
      CALL getdt_minval_host_gpu( userSubroutine, set, &
      & opArg1, &
      & opArg2 )
    ELSE
      CALL getdt_minval_host_cpu( userSubroutine, set, &
      & opArg1, &
      & opArg2 )
    END IF
  END SUBROUTINE


! Stub for GPU execution

  attributes (host) SUBROUTINE getdt_minval_host_gpu( userSubroutine, set, &
    & opArg1, &
    & opArg2 )

    IMPLICIT NONE
    character(len=12), INTENT(IN) :: userSubroutine
    TYPE ( op_set ) , INTENT(IN) :: set

    TYPE ( op_arg ) , INTENT(IN) :: opArg1
    TYPE ( op_arg ) , INTENT(IN) :: opArg2

    TYPE ( op_arg ) , DIMENSION(2) :: opArgArray
    INTEGER(kind=4) :: numberOfOpDats
    INTEGER(kind=4) :: n_upper
    INTEGER(kind=4), DIMENSION(1:8) :: timeArrayStart
    INTEGER(kind=4), DIMENSION(1:8) :: timeArrayEnd
    REAL(kind=8) :: startTime
    REAL(kind=8) :: endTime
    INTEGER(kind=4) :: returnSetKernelTiming


    real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat1Devicegetdt_minval

    INTEGER(kind=4) :: opDat1Cardinality
    INTEGER(kind=4) :: opDat2Cardinality

    INTEGER(kind=4) :: blocksPerGrid
    INTEGER(kind=4) :: threadsPerBlock
    INTEGER(kind=4) :: dynamicSharedMemorySize
    INTEGER(kind=4) :: threadSynchRet
    INTEGER(kind=4), SAVE :: calledTimes
    INTEGER(kind=4) :: i1
    INTEGER(kind=4) :: i2
    INTEGER(kind=4) :: i10
    INTEGER(kind=4) :: i20
    REAL(kind=4) :: dataTransfer

    INTEGER(kind=4) :: istat
    real(8), POINTER :: opDat2Host
    real(8), DIMENSION(:), ALLOCATABLE :: reductionArrayHost2
    INTEGER(kind=4) :: reductionCardinality2

    numberOfOpDats = 2

    opArgArray(1) = opArg1
    opArgArray(2) = opArg2

    returnSetKernelTiming = setKernelTime(7 , userSubroutine//C_NULL_CHAR, &
    & 0.d0, 0.00000,0.00000, 0)
    call op_timers_core(startTime)

    n_upper = op_mpi_halo_exchanges_cuda(set%setCPtr,numberOfOpDats,opArgArray)


    blocksPerGrid = 600
    threadsPerBlock = getBlockSize(userSubroutine//C_NULL_CHAR,set%setPtr%size)
    dynamicSharedMemorySize = reductionSize(opArgArray,numberOfOpDats) * threadsPerBlock

    opDat1Cardinality = opArg1%dim * getSetSizeFromOpArg(opArg1)
    opDat2Cardinality = opArg2%dim


    CALL c_f_pointer(opArg1%data_d,opDat1Devicegetdt_minval,(/opDat1Cardinality/))
    CALL c_f_pointer(opArg2%data,opDat2Host)

    reductionCardinality2 = blocksPerGrid * 1
    allocate( reductionArrayHost2(reductionCardinality2* (1)) )
    IF (.not. allocated(reductionArrayDevice2getdt_minval)) THEN
      allocate( reductionArrayDevice2getdt_minval(reductionCardinality2* (1)) )
    END IF

    DO i10 = 0, reductionCardinality2 - 1, 1
      reductionArrayHost2(i10+1) = opDat2Host
    END DO

    reductionArrayDevice2getdt_minval = reductionArrayHost2

    CALL op_cuda_getdt_minval <<<blocksPerGrid,threadsPerBlock,dynamicSharedMemorySize>>>( &
    & opDat1Devicegetdt_minval, &
    reductionArrayDevice2getdt_minval, &
    set%setPtr%size)

    IF ((n_upper .EQ. 0) .OR. (n_upper .EQ. set%setPtr%core_size)) THEN
      CALL op_mpi_wait_all_cuda(numberOfOpDats,opArgArray)
    END IF


    CALL op_mpi_set_dirtybit_cuda(numberOfOpDats,opArgArray)

    reductionArrayHost2 = reductionArrayDevice2getdt_minval

    DO i10 = 0, reductionCardinality2 - 1, 1
      opDat2Host = MIN(opDat2Host , reductionArrayHost2(i10+1))
    END DO

    deallocate( reductionArrayHost2 )
    CALL op_mpi_reduce_double(opArg2,opArg2%data)

    istat = cudaDeviceSynchronize()
    call op_timers_core(endTime)

    dataTransfer = 0.0
    dataTransfer = dataTransfer + opArg1%size * getSetSizeFromOpArg(opArg1)
    dataTransfer = dataTransfer + opArg2%size * 2.d0
    returnSetKernelTiming = setKernelTime(7 , userSubroutine//C_NULL_CHAR, &
    & endTime-startTime, dataTransfer, 0.00000, 1)
    calledTimes = calledTimes + 1
  END SUBROUTINE


! Stub for CPU execution

  SUBROUTINE op_wrap_getdt_minval( &
    & opDat1Local, &
    & opDat2Local, &
    & bottom,top)
    real(8) opDat1Local(1,*)
    real(8) opDat2Local(1)
    INTEGER(kind=4) bottom,top,i1

    DO i1 = bottom, top - 1, 1
! kernel call
    CALL getdt_minval( &
      & opDat1Local(1,i1+1), &
      & opDat2Local(1) &
      & )
    END DO
  END SUBROUTINE
  SUBROUTINE getdt_minval_host_cpu( userSubroutine, set, &
    & opArg1, &
    & opArg2 )

    IMPLICIT NONE
    character(kind=c_char,len=*), INTENT(IN) :: userSubroutine
    type ( op_set ) , INTENT(IN) :: set

    type ( op_arg ) , INTENT(IN) :: opArg1
    type ( op_arg ) , INTENT(IN) :: opArg2

    type ( op_arg ) , DIMENSION(2) :: opArgArray
    INTEGER(kind=4) :: numberOfOpDats
    INTEGER(kind=4) :: n_upper
    type ( op_set_core ) , POINTER :: opSetCore

    real(8), POINTER, DIMENSION(:) :: opDat1Local
    INTEGER(kind=4) :: opDat1Cardinality

    real(8), POINTER, DIMENSION(:) :: opDat2Local
    INTEGER(kind=4) :: threadID
    INTEGER(kind=4) :: numberOfThreads
    INTEGER(kind=4), DIMENSION(1:8) :: timeArrayStart
    INTEGER(kind=4), DIMENSION(1:8) :: timeArrayEnd
    REAL(kind=8) :: startTime
    REAL(kind=8) :: endTime
    INTEGER(kind=4) :: returnSetKernelTiming
    INTEGER(kind=4) :: sliceStart
    INTEGER(kind=4) :: sliceEnd
    REAL(kind=4) :: dataTransfer

    real(8), DIMENSION(:), ALLOCATABLE :: reductionArrayHost2

    INTEGER(kind=4) :: i1,i2,n

    numberOfOpDats = 2

    opArgArray(1) = opArg1
    opArgArray(2) = opArg2

    returnSetKernelTiming = setKernelTime(7 , userSubroutine//C_NULL_CHAR, &
    & 0.d0, 0.00000,0.00000, 0)
    call op_timers_core(startTime)

    n_upper = op_mpi_halo_exchanges(set%setCPtr,numberOfOpDats,opArgArray)


#ifdef _OPENMP
  numberOfThreads = omp_get_max_threads()
#else
  numberOfThreads = 1
#endif

      opSetCore => set%setPtr

      opDat1Cardinality = opArg1%dim * getSetSizeFromOpArg(opArg1)
      CALL c_f_pointer(opArg1%data,opDat1Local,(/opDat1Cardinality/))
      CALL c_f_pointer(opArg2%data,opDat2Local, (/opArg2%dim/))

      allocate( reductionArrayHost2(numberOfThreads * ((1-1)/64+1)*64) )
      DO i1 = 1, numberOfThreads+1 - 1, 1
        DO i2 = 1, 1+1 - 1, 1
          reductionArrayHost2((i1 - 1) * ((1-1)/64+1)*64 + i2) = opDat2Local(i2)
        END DO
      END DO

      !$OMP PARALLEL DO private (sliceStart,sliceEnd,i1,threadID)
      DO i1 = 0, numberOfThreads - 1, 1
        sliceStart = opSetCore%size * i1 / numberOfThreads
        sliceEnd = opSetCore%size * (i1 + 1) / numberOfThreads
        threadID = omp_get_thread_num()
! kernel call
        CALL op_wrap_getdt_minval( &
        & opDat1Local, &
        & reductionArrayHost2(threadID * ((1-1)/64+1)*64 + 1), &
        & sliceStart, sliceEnd)
      END DO
      !$OMP END PARALLEL DO
      IF ((n_upper .EQ. 0) .OR. (n_upper .EQ. opSetCore%core_size)) THEN
        CALL op_mpi_wait_all(numberOfOpDats,opArgArray)
      END IF

      CALL op_mpi_set_dirtybit(numberOfOpDats,opArgArray)

      DO i1 = 1, numberOfThreads+1 - 1, 1
        opDat2Local = MIN(opDat2Local , reductionArrayHost2((i1 - 1) * ((1-1)/64+1)*64 + 1))
      END DO

      deallocate( reductionArrayHost2 )

      CALL op_mpi_reduce_double(opArg2,opArg2%data)

      call op_timers_core(endTime)

      dataTransfer = 0.0
      dataTransfer = dataTransfer + opArg1%size * getSetSizeFromOpArg(opArg1)
      dataTransfer = dataTransfer + opArg2%size * 2.d0
      returnSetKernelTiming = setKernelTime(7 , userSubroutine//C_NULL_CHAR, &
      & endTime-startTime, dataTransfer, 0.00000, 1)
    END SUBROUTINE
    END MODULE
