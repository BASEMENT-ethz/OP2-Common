!
! auto-generated by op2.py on 2013-02-18 17:54
!

MODULE SAVE_SOLN_MODULE
USE OP2_FORTRAN_DECLARATIONS
USE OP2_FORTRAN_RT_SUPPORT
USE ISO_C_BINDING
USE OP2_CONSTANTS
USE CUDAFOR
USE CUDACONFIGURATIONPARAMS


! variable declarations
TYPE  :: save_soln_opDatDimensions
  INTEGER(kind=4) :: opDat1Dimension
  INTEGER(kind=4) :: opDat2Dimension
END TYPE save_soln_opDatDimensions

TYPE  :: save_soln_opDatCardinalities
  INTEGER(kind=4) :: opDat1Cardinality
  INTEGER(kind=4) :: opDat2Cardinality
END TYPE save_soln_opDatCardinalities

REAL(kind=4) :: loopTimeHostsave_soln
REAL(kind=4) :: loopTimeKernelsave_soln
INTEGER(kind=4) :: numberCalledsave_soln

real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat1Devicesave_soln
real(8), DIMENSION(:), DEVICE, ALLOCATABLE :: opDat2Devicesave_soln

CONTAINS

! user function
include "save_soln.inc"


! CUDA kernel function
attributes (global) SUBROUTINE op_cuda_save_soln( &
  & opDatDimensions, &
  & opDatCardinalities, &
  & setSize, &
  & warpSize, &
  & sharedMemoryOffset)

  IMPLICIT NONE

! local variables
  TYPE ( save_soln_opDatDimensions ) , DEVICE :: opDatDimensions
  TYPE ( save_soln_opDatCardinalities ) , DEVICE :: opDatCardinalities
  real(8), DIMENSION(0:3) :: opDat1Local
  real(8), DIMENSION(0:3) :: opDat2Local
  INTEGER(kind=4), VALUE :: setSize
  INTEGER(kind=4), VALUE :: warpSize
  INTEGER(kind=4), VALUE :: sharedMemoryOffset
  REAL(kind=8), DIMENSION(0:*), SHARED :: sharedFloat8
  INTEGER(kind=4) :: sharedOffsetFloat8
  INTEGER(kind=4) :: numberOfActiveThreads
  INTEGER(kind=4) :: localOffset
  INTEGER(kind=4) :: threadID
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: i2

! kernel call
  threadID = mod(threadIdx%x - 1,warpSize)
  sharedOffsetFloat8 = sharedMemoryOffset * ((threadIdx%x - 1) / warpSize) / 8

  DO i1 = threadIdx%x - 1 + (blockIdx%x - 1) * blockDim%x, setSize - 1, blockDim%x * gridDim%x
    localOffset = i1 - threadID
    numberOfActiveThreads = min(warpSize,setSize - localOffset)
    DO i2 = 0, opDatDimensions%opDat1Dimension - 1, 1
      sharedFloat8(sharedOffsetFloat8 + (threadID + i2 * numberOfActiveThreads)) = &
      & opDat1Devicesave_soln(threadID + (i2 * numberOfActiveThreads + localOffset &
      & * opDatDimensions%opDat1Dimension) + 1)
    END DO

    DO i2 = 0, opDatDimensions%opDat1Dimension - 1, 1
      opDat1Local(i2) = sharedFloat8(sharedOffsetFloat8 + (i2 + threadID * opDatDimensions%opDat1Dimension))
    END DO


    CALL save_soln( &
    & opDat1Local, &
    & opDat2Local &
    & )

    DO i2 = 0, opDatDimensions%opDat2Dimension - 1, 1
      sharedFloat8(sharedOffsetFloat8 + (i2 + threadID * opDatDimensions%opDat2Dimension)) = opDat2Local(i2)
    END DO

    DO i2 = 0, opDatDimensions%opDat2Dimension - 1, 1
      opDat2Devicesave_soln(threadID + (i2 * numberOfActiveThreads + localOffset * &
      & opDatDimensions%opDat2Dimension) + 1) = &
      & sharedFloat8(sharedOffsetFloat8 + (threadID + i2 * numberOfActiveThreads))
    END DO

  END DO


END SUBROUTINE

attributes (host) SUBROUTINE save_soln_host( userSubroutine, set, &
  & opArg1, &
  & opArg2 )

  IMPLICIT NONE
  character(len=9), INTENT(IN) :: userSubroutine
  TYPE ( op_set ) , INTENT(IN) :: set

  TYPE ( op_arg ) , INTENT(IN) :: opArg1
  TYPE ( op_arg ) , INTENT(IN) :: opArg2

  TYPE ( op_arg ) , DIMENSION(2) :: opArgArray
  INTEGER(kind=4) :: numberOfOpDats
  INTEGER(kind=4) :: returnMPIHaloExchange
  INTEGER(kind=4) :: returnSetKernelTiming

  TYPE ( save_soln_opDatDimensions ) , DEVICE :: opDatDimensions
  TYPE ( save_soln_opDatCardinalities ) , DEVICE :: opDatCardinalities

  INTEGER(kind=4) :: opDat1Cardinality
  INTEGER(kind=4) :: opDat2Cardinality

  INTEGER(kind=4) :: blocksPerGrid
  INTEGER(kind=4) :: threadsPerBlock
  INTEGER(kind=4) :: dynamicSharedMemorySize
  INTEGER(kind=4) :: threadSynchRet
  INTEGER(kind=4) :: sharedMemoryOffset
  INTEGER(kind=4) :: warpSize
  INTEGER(kind=4), SAVE :: calledTimes
  INTEGER(kind=4) :: returnDumpOpDat
  INTEGER(kind=4) :: i1
  INTEGER(kind=4) :: i2
  INTEGER(kind=4) :: i10
  INTEGER(kind=4) :: i20

  INTEGER(kind=4) :: istat
  REAL(kind=4) :: accumulatorHostTime
  REAL(kind=4) :: accumulatorKernelTime
  TYPE ( cudaEvent )  :: startTimeHost
  TYPE ( cudaEvent )  :: endTimeHost
  TYPE ( cudaEvent )  :: startTimeKernel
  TYPE ( cudaEvent )  :: endTimeKernel

  numberOfOpDats = 2

  opArgArray(1) = opArg1
  opArgArray(2) = opArg2

  returnMPIHaloExchange = op_mpi_halo_exchanges(set%setCPtr,numberOfOpDats,opArgArray)
  IF (returnMPIHaloExchange .EQ. 0) THEN
    CALL op_mpi_wait_all(numberOfOpDats,opArgArray)
    CALL op_mpi_set_dirtybit(numberOfOpDats,opArgArray)
    RETURN
  END IF

  istat = cudaEventCreate(startTimeHost)
  istat = cudaEventCreate(endTimeHost)
  istat = cudaEventCreate(startTimeKernel)
  istat = cudaEventCreate(endTimeKernel)

  numberCalledsave_soln = numberCalledsave_soln + 1
  istat = cudaEventRecord(startTimeHost,0)


  blocksPerGrid = 200
  threadsPerBlock = getBlockSize(userSubroutine,set%setPtr%size)
  warpSize = OP_WARPSIZE
  dynamicSharedMemorySize = 32
  sharedMemoryOffset = dynamicSharedMemorySize * OP_WARPSIZE
  dynamicSharedMemorySize = dynamicSharedMemorySize * threadsPerBlock

  opDatCardinalities%opDat1Cardinality = opArg1%dim * getSetSizeFromOpArg(opArg1)
  opDatCardinalities%opDat2Cardinality = opArg2%dim * getSetSizeFromOpArg(opArg2)

  opDatDimensions%opDat1Dimension = opArg1%dim
  opDatDimensions%opDat2Dimension = opArg2%dim

  opDat1Cardinality = opArg1%dim * getSetSizeFromOpArg(opArg1)
  opDat2Cardinality = opArg2%dim * getSetSizeFromOpArg(opArg2)

  CALL c_f_pointer(opArg1%data_d,opDat1Devicesave_soln,(/opDat1Cardinality/))
  CALL c_f_pointer(opArg2%data_d,opDat2Devicesave_soln,(/opDat2Cardinality/))

  istat = cudaEventRecord(endTimeHost,0)
  istat = cudaEventSynchronize(endTimeHost)
  istat = cudaEventElapsedTime(accumulatorHostTime,startTimeHost,endTimeHost)

  loopTimeHostsave_soln = loopTimeHostsave_soln + accumulatorHostTime
  istat = cudaEventRecord(startTimeKernel,0)

  CALL op_cuda_save_soln <<<blocksPerGrid,threadsPerBlock,dynamicSharedMemorySize>>> &
  & (opDatDimensions,opDatCardinalities, &
  set%setPtr%size, &
  & warpSize,sharedMemoryOffset)

  threadSynchRet = cudaThreadSynchronize()
  istat = cudaEventRecord(endTimeKernel,0)
  istat = cudaEventSynchronize(endTimeKernel)
  istat = cudaEventElapsedTime(accumulatorKernelTime,startTimeKernel,endTimeKernel)
  loopTimeKernelsave_soln = loopTimeKernelsave_soln + accumulatorKernelTime

  calledTimes = calledTimes + 1
  istat = cudaEventRecord(endTimeHost,0)
  istat = cudaEventSynchronize(endTimeHost)
  istat = cudaEventElapsedTime(accumulatorHostTime,startTimeHost,endTimeHost)
  loopTimeHostsave_soln = loopTimeHostsave_soln + accumulatorHostTime
END SUBROUTINE
END MODULE SAVE_SOLN_MODULE
